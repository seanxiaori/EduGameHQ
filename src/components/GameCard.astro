---
// 通用游戏卡片组件 - 支持所有动态数据
export interface GameCardProps {
  game: {
    slug: string;
    title: string;
    description: string;
    thumbnailUrl: string;
    category: string;
    categoryName: string;
    difficulty: string;
    ageRange: string;
    minAge?: number;
    maxAge?: number;
    featured?: boolean;
    trending?: boolean;
    isNew?: boolean;
    playCount?: number;
    tags?: string[];
    developer?: string;
  };
  showPlayHistory?: boolean;
  showPopularity?: boolean;
  showDeveloper?: boolean;
}

const { game, showPlayHistory = true, showPopularity = true, showDeveloper = false } = Astro.props;

// 生成随机人气数据
const generatePopularity = (baseCount: number = 0) => {
  const base = baseCount > 0 ? baseCount : Math.floor(Math.random() * 10000) + 1000;
  return Math.floor(base * (0.8 + Math.random() * 0.4)); // ±20% 变化
};

// 生成游戏历史
const generatePlayHistory = () => {
  const histories = ['Today', 'Yesterday', 'A few days ago', '2 weeks ago', null];
  return Math.random() > 0.3 ? histories[Math.floor(Math.random() * histories.length)] : null;
};

// 格式化人气数字
const formatPopularity = (num: number) => {
  if (!num || num === 0) return '0';
  if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
  if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
  return num.toString();
};

// 生成动态数据
const popularity = generatePopularity(game.playCount);
const playHistory = showPlayHistory ? generatePlayHistory() : null;
const gameUrl = `/games/${game.slug}`;
---

<div class={`game-card ${game.category}-theme animate-fadeInUp`} data-game-id={game.slug}>
  <div class="game-image-container">
    <img src={game.thumbnailUrl} alt={game.title} class="game-image" />
    <div class="game-overlay">
      <button class="play-button" onclick={`window.location.href='${gameUrl}'`}>
        <i class="fas fa-play"></i>
        <span>Play Now</span>
      </button>
    </div>
    
    <!-- 左上角：游戏历史标签 -->
    {playHistory && (
      <div class={`played-badge ${ 
        playHistory === 'Today' ? 'today' : 
        playHistory === 'Yesterday' ? 'yesterday' : 
        playHistory === 'A few days ago' ? 'few-days-ago' : 
        'weeks-ago'
      }`}>
        {playHistory}
      </div>
    )}
    
    <!-- 右上角：收藏按钮 -->
    <button class="favorite-heart-btn" data-game-slug={game.slug}>
      <i class="far fa-heart"></i>
    </button>
  </div>
  
  <div class="game-info">
    <h3 class="game-title">{game.title}</h3>
    <p class="game-description">{game.description}</p>
    
    <div class="game-tags">
      <span class={`category-tag ${game.category}`}>{game.categoryName}</span>
      {game.featured && <span class="feature-tag featured">FEATURED</span>}
      {game.trending && <span class="feature-tag hot">HOT</span>}
      {game.isNew && <span class="feature-tag new">NEW</span>}
      <span class={`difficulty-tag ${game.difficulty.toLowerCase()}`}>{game.difficulty.toUpperCase()}</span>
    </div>
    
    <div class="game-stats">
      {showPopularity && (
        <div class="stat">
          <i class="fas fa-fire"></i>
          <span class="popularity-count">{formatPopularity(popularity)} popular</span>
        </div>
      )}
      <div class="stat">
        <i class="fas fa-child"></i>
        <span>Ages {game.ageRange}</span>
      </div>
      {showDeveloper && game.developer && (
        <div class="stat">
          <i class="fas fa-user"></i>
          <span>{game.developer}</span>
        </div>
      )}
    </div>
  </div>
</div>

<!-- 通用收藏管理器 - 每个卡片自动初始化 -->
<script>
  // 通用游戏卡片收藏管理器
  class UniversalGameCardManager {
    constructor() {
      this.storageKey = 'favoriteGames';
      this.init();
    }

    init() {
      // 初始化当前页面的所有游戏卡片
      document.addEventListener('DOMContentLoaded', () => {
        this.initializeGameCards();
      });
      
      // 监听动态内容变化
      const observer = new MutationObserver(() => {
        this.initializeGameCards();
      });
      
      observer.observe(document.body, {
        childList: true,
        subtree: true
      });
    }

    initializeGameCards() {
      // 初始化所有未处理的游戏卡片
      const uninitializedCards = document.querySelectorAll('.game-card[data-game-id]:not([data-favorites-initialized])');
      
      uninitializedCards.forEach(card => {
        const gameSlug = card.dataset.gameId;
        if (!gameSlug) return;

        // 标记为已初始化
        card.setAttribute('data-favorites-initialized', 'true');

        // 获取收藏按钮
        const favoriteBtn = card.querySelector('.favorite-heart-btn');
        if (favoriteBtn) {
          // 设置点击事件
          favoriteBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            this.toggleFavorite(gameSlug);
          });

          // 设置初始状态
          this.updateFavoriteButtonState(favoriteBtn, this.isFavorited(gameSlug));
        }
      });
    }

    // 检查是否已收藏
    isFavorited(gameSlug) {
      try {
        const favorites = JSON.parse(localStorage.getItem(this.storageKey) || '[]');
        return favorites.includes(gameSlug);
      } catch (error) {
        console.error('读取收藏状态失败:', error);
        return false;
      }
    }

    // 切换收藏状态
    toggleFavorite(gameSlug) {
      try {
        const favorites = JSON.parse(localStorage.getItem(this.storageKey) || '[]');
        const isFavorited = favorites.includes(gameSlug);
        
        if (isFavorited) {
          // 移除收藏
          const newFavorites = favorites.filter(id => id !== gameSlug);
          localStorage.setItem(this.storageKey, JSON.stringify(newFavorites));
          this.updateAllButtons(gameSlug, false);
          this.showNotification('Removed from favorites', 'removed');
        } else {
          // 添加收藏
          favorites.push(gameSlug);
          localStorage.setItem(this.storageKey, JSON.stringify(favorites));
          this.updateAllButtons(gameSlug, true);
          this.showNotification('Added to favorites', 'added');
        }
        
        // 触发全局事件
        window.dispatchEvent(new CustomEvent('favoritesChanged', {
          detail: { gameSlug, isFavorite: !isFavorited }
        }));
        
      } catch (error) {
        console.error('收藏操作失败:', error);
        this.showNotification('Something went wrong', 'error');
      }
    }

    // 更新所有相关按钮
    updateAllButtons(gameSlug, isFavorited) {
      const gameCards = document.querySelectorAll(`[data-game-id="${gameSlug}"]`);
      gameCards.forEach(card => {
        const favoriteBtn = card.querySelector('.favorite-heart-btn');
        if (favoriteBtn) {
          this.updateFavoriteButtonState(favoriteBtn, isFavorited);
        }
      });
    }

    // 更新单个收藏按钮状态
    updateFavoriteButtonState(button, isFavorited) {
      const heartIcon = button.querySelector('i');
      if (!heartIcon) return;

      if (isFavorited) {
        // 设置为收藏状态
        heartIcon.className = 'fas fa-heart';
        button.classList.add('active', 'favorited');
        button.style.color = '#EC4899';
      } else {
        // 设置为未收藏状态
        heartIcon.className = 'far fa-heart';
        button.classList.remove('active', 'favorited');
        button.style.color = '#9CA3AF';
      }
    }

    // 显示通知
    showNotification(message, type = 'info') {
      // 移除现有通知
      const existingNotification = document.querySelector('.game-card-notification');
      if (existingNotification) {
        existingNotification.remove();
      }

      // 创建通知元素
      const notification = document.createElement('div');
      notification.className = `game-card-notification ${type}`;
      notification.innerHTML = `
        <div class="notification-content">
          <i class="fas ${type === 'added' ? 'fa-heart' : type === 'removed' ? 'fa-heart-broken' : 'fa-exclamation-triangle'}"></i>
          <span>${message}</span>
        </div>
      `;

      // 添加样式
      Object.assign(notification.style, {
        position: 'fixed',
        top: '20px',
        right: '20px',
        zIndex: '9999',
        padding: '1rem 1.5rem',
        borderRadius: '12px',
        background: type === 'added' ? '#10B981' : type === 'removed' ? '#EF4444' : '#F59E0B',
        color: 'white',
        fontWeight: '600',
        fontSize: '0.9rem',
        boxShadow: '0 8px 24px rgba(0, 0, 0, 0.15)',
        transform: 'translateX(100%)',
        transition: 'transform 0.3s ease',
        backdropFilter: 'blur(10px)',
        display: 'flex',
        alignItems: 'center',
        gap: '0.5rem'
      });

      // 添加到页面
      document.body.appendChild(notification);

      // 动画显示
      setTimeout(() => {
        notification.style.transform = 'translateX(0)';
      }, 100);

      // 3秒后自动隐藏
      setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 300);
      }, 3000);
    }
  }

  // 创建全局实例（如果不存在）
  if (!window.universalGameCardManager) {
    window.universalGameCardManager = new UniversalGameCardManager();
  }
</script>

<style>
  /* 引入通用游戏卡片样式 */
  @import "/src/styles/game-card.css";
</style> 
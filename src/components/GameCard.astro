---
// ÂØºÂÖ•Á±ªÂûãÂÆö‰πâ
import type { Game } from '../types/game';

// ÈÄöÁî®Ê∏∏ÊàèÂç°ÁâáÁªÑ‰ª∂ - ÊîØÊåÅÊâÄÊúâÂä®ÊÄÅÊï∞ÊçÆ
export interface GameCardProps {
  game: {
    slug: string;
    title: string;
    description: string;
    thumbnailUrl: string;
    category: string;
    categoryName: string;
    difficulty: string;
    ageRange: string;
    minAge?: number;
    maxAge?: number;
    featured?: boolean;
    trending?: boolean;
    isNew?: boolean;
    playCount?: number;
    tags?: string[];
    developer?: string;
  };
  showPlayHistory?: boolean;
  showPopularity?: boolean;
  showDeveloper?: boolean;
}

// ÁªÑ‰ª∂Â±ûÊÄßÊé•Âè£
interface Props {
  game: Game;
  showTrending?: boolean;
  showFeatured?: boolean;
  showNew?: boolean;
  showUpdated?: boolean;
  showPlayHistory?: boolean;
  showPopularity?: boolean;
  showFavorite?: boolean;
  showDeveloper?: boolean;
  playCount?: number;
}

// Ëß£ÊûÑÂ±ûÊÄßÂπ∂ËÆæÁΩÆÈªòËÆ§ÂÄº
const {
  game,
  showTrending = false,
  showFeatured = false,
  showNew = false,
  showUpdated = false,
  showPlayHistory = false,
  showPopularity = false,
  showFavorite = false,
  showDeveloper = false,
  playCount = 0
} = Astro.props;

// Á°Æ‰øùÊ∏∏ÊàèÂØπË±°ÊúâÊïà
const safeGame: Game = {
  slug: '',
  title: 'Unknown Game',
  description: 'No description available',
  category: 'puzzle',
  categoryName: 'Puzzle',
  difficulty: 'Easy',
  ageRange: '6-12',
  thumbnailUrl: '/images/placeholder-game.jpg',
  gameUrl: '',
  featured: false,
  trending: false,
  isNew: false,
  tags: [],
  developer: 'Unknown',
  ...game
};

// Ê†ºÂºèÂåñ‰∫∫Ê∞îÊï∞Â≠ó
const formatPopularity = (num: number) => {
  if (!num || num === 0) return '0';
  if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
  if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
  return num.toString();
};

// Ê∏∏ÊàèURL
const gameUrl = `/games/${safeGame.slug}`;
---

<!-- ÂºïÂÖ•Ê∏∏ÊàèÁªüËÆ°ÁÆ°ÁêÜÂô® -->
<script src="/src/utils/game-stats-manager.js" is:inline></script>

<div class={`game-card ${safeGame.category}-theme animate-fadeInUp`} data-game-id={safeGame.slug}>
  <div class="game-image-container">
    <img 
      src={safeGame.thumbnailUrl} 
      alt={safeGame.title}
      class="game-image"
      loading="lazy"
      onerror="this.src='/images/logo.svg'"
    />
    
    <div class="game-overlay">
      <div class="game-badges">
        {(showTrending && safeGame.trending) && <span class="badge trending">HOT</span>}
        {(showFeatured && safeGame.featured) && <span class="badge featured">FEATURED</span>}
        {(showNew && safeGame.isNew) && <span class="badge new">NEW</span>}
        {showUpdated && <span class="badge updated">UPDATED</span>}
      </div>
      
      <a href={gameUrl} class="play-button">
        <i class="fas fa-play"></i>
        <span>Play Now</span>
      </a>
      
      {showFavorite && (
        <button class="favorite-heart-btn" data-game-slug={safeGame.slug} aria-label="Add to favorites">
          <i class="far fa-heart"></i>
        </button>
      )}
    </div>
    
    <!-- Â∑¶‰∏äËßíÔºöÊ∏∏ÊàèÂéÜÂè≤Ê†áÁ≠æ - Âä®ÊÄÅÊòæÁ§∫ -->
    <div class="played-badge-container" data-game-slug={safeGame.slug}></div>
  </div>
  
  <div class="game-info">
    <h3 class="game-title">
      <a href={gameUrl}>{safeGame.title}</a>
    </h3>
    
    <p class="game-description">{safeGame.description}</p>
    
    <div class="game-tags">
      <span class={`category-tag ${safeGame.category}`}>{safeGame.categoryName}</span>
      {safeGame.featured && <span class="feature-tag featured">FEATURED</span>}
      {safeGame.trending && <span class="feature-tag hot">HOT</span>}
      {safeGame.isNew && <span class="feature-tag new">NEW</span>}
      <span class={`difficulty-tag ${safeGame.difficulty.toLowerCase()}`}>{safeGame.difficulty.toUpperCase()}</span>
    </div>
    
    <div class="game-stats">
      {showPopularity && (
        <div class="stat popularity-stat" data-game-slug={safeGame.slug}>
          <i class="fas fa-fire"></i>
          <span class="popularity-count">Loading...</span>
        </div>
      )}
      <div class="stat">
        <i class="fas fa-child"></i>
        <span>Ages {safeGame.ageRange}</span>
      </div>
      {showDeveloper && safeGame.developer && (
        <div class="stat">
          <i class="fas fa-user"></i>
          <span>{safeGame.developer}</span>
        </div>
      )}
    </div>
  </div>
</div>

<!-- ‰øÆÂ§çÊî∂ËóèBUGÁöÑÊ∏∏ÊàèÂç°ÁâáÁÆ°ÁêÜÂô® - ‰∫ã‰ª∂ÂßîÊâòÁâà -->
<script define:vars={{ safeGame, showPlayHistory, showPopularity }}>
  // ÁÆÄÂåñÁöÑÂÖ®Â±ÄÊ∏∏ÊàèÂç°ÁâáÁÆ°ÁêÜÂô® - ‰ΩøÁî®‰∫ã‰ª∂ÂßîÊâòÈÅøÂÖçÈáçÂ§çÁªëÂÆöÈóÆÈ¢ò
  (function() {
    // Èò≤Ê≠¢ÈáçÂ§çÂàùÂßãÂåñ
    if (window.gameCardManagerInitialized) {
      return;
    }
    
    console.log('üéÆ ÂàùÂßãÂåñÊ∏∏ÊàèÂç°ÁâáÁÆ°ÁêÜÂô® (‰∫ã‰ª∂ÂßîÊâòÁâà)...');
    
    const STORAGE_KEY = 'favoriteGames';
    
    // Êî∂ËóèÂäüËÉΩÁÆ°ÁêÜ
    class FavoriteManager {
      // Ê£ÄÊü•ÊòØÂê¶Â∑≤Êî∂Ëóè
      static isFavorited(gameSlug) {
        try {
          const favorites = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
          return favorites.includes(gameSlug);
        } catch (error) {
          console.error('‚ùå ËØªÂèñÊî∂ËóèÁä∂ÊÄÅÂ§±Ë¥•:', error);
          return false;
        }
      }
      
      // ÂàáÊç¢Êî∂ËóèÁä∂ÊÄÅ
      static toggleFavorite(gameSlug) {
        try {
          console.log(`üîÑ ÂàáÊç¢Êî∂ËóèÁä∂ÊÄÅ: ${gameSlug}`);
          
          const favorites = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
          const currentlyFavorited = favorites.includes(gameSlug);
          
          let newFavorites;
          let newState;
          
          if (currentlyFavorited) {
            // ÁßªÈô§Êî∂Ëóè
            newFavorites = favorites.filter(id => id !== gameSlug);
            newState = false;
            this.showNotification('Removed from favorites', 'removed');
          } else {
            // Ê∑ªÂä†Êî∂Ëóè
            newFavorites = [...favorites, gameSlug];
            newState = true;
            this.showNotification('Added to favorites', 'added');
          }
          
          // ‰øùÂ≠òÂà∞localStorage
          localStorage.setItem(STORAGE_KEY, JSON.stringify(newFavorites));
          
          // Á´ãÂç≥Êõ¥Êñ∞ÊâÄÊúâÁõ∏ÂÖ≥ÊåâÈíÆ
          this.updateAllButtonsForGame(gameSlug, newState);
          
          // Ëß¶ÂèëÂÖ®Â±Ä‰∫ã‰ª∂
          window.dispatchEvent(new CustomEvent('favoritesChanged', {
            detail: { gameSlug, isFavorite: newState }
          }));
          
          console.log(`‚úÖ Êî∂ËóèÁä∂ÊÄÅÊõ¥Êñ∞ÊàêÂäü ${gameSlug}: ${newState ? 'Â∑≤Êî∂Ëóè' : 'Â∑≤ÂèñÊ∂àÊî∂Ëóè'}`);
          
        } catch (error) {
          console.error('‚ùå Êî∂ËóèÊìç‰ΩúÂ§±Ë¥•:', error);
          this.showNotification('Something went wrong', 'error');
        }
      }
      
      // Êõ¥Êñ∞ÁâπÂÆöÊ∏∏ÊàèÁöÑÊâÄÊúâÊåâÈíÆ
      static updateAllButtonsForGame(gameSlug, isFavorited) {
        const gameCards = document.querySelectorAll(`[data-game-id="${gameSlug}"]`);
        console.log(`üîÑ Êõ¥Êñ∞ ${gameCards.length} ‰∏™ ${gameSlug} ÁöÑÊî∂ËóèÊåâÈíÆÁä∂ÊÄÅ: ${isFavorited ? 'Â∑≤Êî∂Ëóè' : 'Êú™Êî∂Ëóè'}`);
        
        gameCards.forEach(card => {
          const favoriteBtn = card.querySelector('.favorite-heart-btn');
          if (favoriteBtn) {
            this.updateButtonState(favoriteBtn, isFavorited);
          }
        });
      }
      
      // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
      static updateButtonState(button, isFavorited) {
        if (!button) return;
        
        const icon = button.querySelector('i');
        if (icon) {
          icon.className = isFavorited ? 'fas fa-heart' : 'far fa-heart';
        }
        
        // Êõ¥Êñ∞Ê†∑Âºè
        if (isFavorited) {
          button.style.background = 'linear-gradient(135deg, #EC4899 0%, #DB2777 100%)';
          button.style.color = 'white';
          button.style.borderColor = 'rgba(236, 72, 153, 0.6)';
          button.style.boxShadow = '0 4px 15px rgba(236, 72, 153, 0.4)';
          button.classList.add('favorited');
        } else {
          button.style.background = 'rgba(0, 0, 0, 0.25)';
          button.style.color = '#FFFFFF';
          button.style.borderColor = 'rgba(255, 255, 255, 0.2)';
          button.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.2)';
          button.classList.remove('favorited');
        }
        
        // Ê∑ªÂä†Áä∂ÊÄÅÂàáÊç¢Âä®Áîª
        button.style.transform = 'scale(1.1)';
        setTimeout(() => {
          button.style.transform = 'scale(1)';
        }, 150);
      }
      
      // ÂêåÊ≠•ÊâÄÊúâÊî∂ËóèÊåâÈíÆÁä∂ÊÄÅ
      static syncAllButtons() {
        const allGameCards = document.querySelectorAll('.game-card[data-game-id]');
        console.log(`üîÑ ÂêåÊ≠• ${allGameCards.length} ‰∏™Ê∏∏ÊàèÂç°ÁâáÁöÑÊî∂ËóèÁä∂ÊÄÅ`);
        
        allGameCards.forEach(card => {
          const gameSlug = card.dataset.gameId;
          const favoriteBtn = card.querySelector('.favorite-heart-btn');
          
          if (gameSlug && favoriteBtn) {
            const isFavorited = this.isFavorited(gameSlug);
            this.updateButtonState(favoriteBtn, isFavorited);
          }
        });
      }
      
      // ÊòæÁ§∫ÈÄöÁü•
      static showNotification(message, type) {
        const existingNotification = document.querySelector('.game-card-notification');
        if (existingNotification) {
          existingNotification.remove();
        }

        const notification = document.createElement('div');
        notification.className = `game-card-notification ${type}`;
        notification.style.cssText = `
          position: fixed !important;
          top: 2rem !important;
          right: 2rem !important;
          background: ${type === 'added' ? '#10B981' : type === 'removed' ? '#EF4444' : '#6B7280'} !important;
          color: white !important;
          padding: 0.75rem 1.25rem !important;
          border-radius: 8px !important;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;
          z-index: 10000 !important;
          font-size: 0.875rem !important;
          font-weight: 600 !important;
          transform: translateX(100%) !important;
          opacity: 0 !important;
          transition: all 0.3s ease !important;
        `;
        
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.style.transform = 'translateX(0)';
          notification.style.opacity = '1';
        }, 10);
        
        setTimeout(() => {
          notification.style.transform = 'translateX(100%)';
          notification.style.opacity = '0';
          setTimeout(() => {
            if (document.body.contains(notification)) {
              document.body.removeChild(notification);
            }
          }, 300);
        }, 2000);
      }
    }
    
    // ‰∫∫Ê∞îÂÄºÁÆ°ÁêÜ
    class PopularityManager {
      static updatePopularityDisplay(card, gameSlug) {
        if (!showPopularity) return;
        
        const popularityStat = card.querySelector('.popularity-stat');
        if (!popularityStat) return;

        const popularityCount = popularityStat.querySelector('.popularity-count');
        if (!popularityCount) return;

        let popularity;
        
        if (window.gameStatsManager) {
          popularity = window.gameStatsManager.getPopularity(gameSlug, safeGame);
        } else {
          // ‰ΩøÁî®Â§áÁî®ËÆ°ÁÆóÊñπÊ≥ï
          popularity = this.calculateFallbackPopularity(gameSlug, safeGame);
        }

        popularityCount.textContent = this.formatPopularity(popularity) + ' popular';
        this.updatePopularityStyle(popularityCount, popularity);
      }
      
      static calculateFallbackPopularity(gameSlug, gameInfo) {
        let basePopularity = 500;
        
        const categoryMultipliers = {
          'math': 1.8, 'science': 1.7, 'language': 1.6, 'puzzle': 1.4, 
          'art': 1.3, 'sports': 1.2, 'strategy': 1.5, 'adventure': 1.1, 'action': 1.0
        };
        
        basePopularity *= (categoryMultipliers[gameInfo.category] || 1.0);
        
        if (gameInfo.featured) basePopularity += 800;
        if (gameInfo.trending) basePopularity += 600;
        if (gameInfo.isNew) basePopularity += 400;
        
        // Âü∫‰∫égameSlugÁöÑ‰∏ÄËá¥ÊÄßÈöèÊú∫Âåñ
        let hash = 0;
        for (let i = 0; i < gameSlug.length; i++) {
          hash = ((hash << 5) - hash) + gameSlug.charCodeAt(i);
        }
        const randomVariation = (Math.abs(hash) % 400) - 200;
        basePopularity += randomVariation;
        
        return Math.max(Math.floor(basePopularity), 300);
      }
      
      static updatePopularityStyle(element, popularity) {
        element.classList.remove('popularity-low', 'popularity-medium', 'popularity-high', 'popularity-hot');
        
        if (popularity >= 3000) {
          element.classList.add('popularity-hot');
        } else if (popularity >= 2000) {
          element.classList.add('popularity-high');
        } else if (popularity >= 1000) {
          element.classList.add('popularity-medium');
        } else {
          element.classList.add('popularity-low');
        }
      }
      
      static formatPopularity(num) {
        if (!num || num === 0) return '0';
        if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
        if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
        return num.toString();
      }
    }
    
    // Ê∏∏ÊàèÂéÜÂè≤ÁÆ°ÁêÜ
    class HistoryManager {
      static updatePlayHistoryBadge(card, gameSlug) {
        if (!showPlayHistory) return;
        
        const badgeContainer = card.querySelector('.played-badge-container');
        if (!badgeContainer) return;

        if (window.gameStatsManager) {
          const historyLabel = window.gameStatsManager.getPlayHistoryLabel(gameSlug);
          if (historyLabel) {
            const badgeClass = this.getHistoryBadgeClass(historyLabel);
            badgeContainer.innerHTML = `<div class="played-badge ${badgeClass}">${historyLabel}</div>`;
          } else {
            badgeContainer.innerHTML = '';
          }
        }
      }
      
      static getHistoryBadgeClass(label) {
        const classMap = {
          'Today': 'today',
          'Yesterday': 'yesterday',
          'A few days ago': 'few-days-ago',
          '2 weeks ago': 'weeks-ago',
          'A month ago': 'month-ago'
        };
        return classMap[label] || 'default';
      }
    }
    
    // ‰∏ªÂàùÂßãÂåñÂáΩÊï∞
    function initializeGameCards() {
      const allGameCards = document.querySelectorAll('.game-card[data-game-id]');
      console.log(`üîç ÂàùÂßãÂåñ ${allGameCards.length} ‰∏™Ê∏∏ÊàèÂç°Áâá`);
      
      allGameCards.forEach(card => {
        const gameSlug = card.dataset.gameId;
        if (!gameSlug) return;

        // Êõ¥Êñ∞‰∫∫Ê∞îÂÄºÊòæÁ§∫
        PopularityManager.updatePopularityDisplay(card, gameSlug);
        
        // Êõ¥Êñ∞Ê∏∏ÊàèÂéÜÂè≤Ê†áÁ≠æ
        HistoryManager.updatePlayHistoryBadge(card, gameSlug);
      });
      
      // ÂêåÊ≠•ÊâÄÊúâÊî∂ËóèÊåâÈíÆÁä∂ÊÄÅ
      FavoriteManager.syncAllButtons();
    }
    
    // ‰ΩøÁî®‰∫ã‰ª∂ÂßîÊâòÂ§ÑÁêÜÊî∂ËóèÊåâÈíÆÁÇπÂáª - ÈÅøÂÖçÈáçÂ§çÁªëÂÆöÈóÆÈ¢ò
    function setupEventDelegation() {
      // ÁßªÈô§ÂèØËÉΩÂ≠òÂú®ÁöÑÊóßÁõëÂê¨Âô®
      document.removeEventListener('click', handleFavoriteClick);
      
      // Ê∑ªÂä†Êñ∞ÁöÑ‰∫ã‰ª∂ÂßîÊâòÁõëÂê¨Âô®
      document.addEventListener('click', handleFavoriteClick);
      console.log('‚úÖ ‰∫ã‰ª∂ÂßîÊâòËÆæÁΩÆÂÆåÊàê');
    }
    
    // Êî∂ËóèÊåâÈíÆÁÇπÂáªÂ§ÑÁêÜÂáΩÊï∞
    function handleFavoriteClick(e) {
      // Ê£ÄÊü•ÊòØÂê¶ÁÇπÂáªÁöÑÊòØÊî∂ËóèÊåâÈíÆ
      const favoriteBtn = e.target.closest('.favorite-heart-btn');
      if (!favoriteBtn) return;
      
      e.preventDefault();
      e.stopPropagation();
      
      // Ëé∑ÂèñÊ∏∏Êàèslug
      const gameSlug = favoriteBtn.getAttribute('data-game-slug');
      if (!gameSlug) {
        console.error('‚ùå Êú™ÊâæÂà∞Ê∏∏Êàèslug');
        return;
      }
      
      console.log(`üíñ ÁÇπÂáªÊî∂ËóèÊåâÈíÆ: ${gameSlug}`);
      FavoriteManager.toggleFavorite(gameSlug);
    }
    
    // ËÆæÁΩÆÂÖ∂‰ªñ‰∫ã‰ª∂ÁõëÂê¨Âô®
    function setupEventListeners() {
      // ÁõëÂê¨localStorageÂèòÂåñÔºàË∑®Ê†áÁ≠æÈ°µÂêåÊ≠•Ôºâ
      window.addEventListener('storage', (e) => {
        if (e.key === STORAGE_KEY) {
          console.log('üì¶ Ê£ÄÊµãÂà∞Êî∂ËóèÊï∞ÊçÆÂèòÂåñÔºåÂêåÊ≠•ÊâÄÊúâÊåâÈíÆÁä∂ÊÄÅ...');
          FavoriteManager.syncAllButtons();
        }
      });
      
      // ÁõëÂê¨ÁªüËÆ°Êï∞ÊçÆÊõ¥Êñ∞
      window.addEventListener('gameStatsUpdated', (e) => {
        console.log('üìä ÁªüËÆ°Êï∞ÊçÆÊõ¥Êñ∞ÔºåÈáçÊñ∞ÂàùÂßãÂåñÊ∏∏ÊàèÂç°Áâá...');
        initializeGameCards();
      });
      
      // ÁõëÂê¨Êî∂ËóèÂèòÂåñ‰∫ã‰ª∂
      window.addEventListener('favoritesChanged', (e) => {
        console.log('üì¢ Êî∂Âà∞Êî∂ËóèÂèòÂåñ‰∫ã‰ª∂:', e.detail);
      });
    }
    
    // DOMÂèòÂåñÁõëÂê¨Âô®
    function setupMutationObserver() {
      const observer = new MutationObserver((mutations) => {
        let hasNewCards = false;
        mutations.forEach(mutation => {
          mutation.addedNodes.forEach(node => {
            if (node.nodeType === Node.ELEMENT_NODE) {
              // Ê£ÄÊü•ÊòØÂê¶ÊòØÊ∏∏ÊàèÂç°ÁâáÊàñÂåÖÂê´Ê∏∏ÊàèÂç°Áâá
              if (node.classList?.contains('game-card') || 
                  node.querySelector?.('.game-card')) {
                hasNewCards = true;
              }
            }
          });
        });
        
        if (hasNewCards) {
          console.log('üîÑ Ê£ÄÊµãÂà∞Êñ∞ÁöÑÊ∏∏ÊàèÂç°ÁâáÔºåÈáçÊñ∞ÂàùÂßãÂåñ...');
          setTimeout(initializeGameCards, 100); // Âª∂ËøüÁ°Æ‰øùDOMÂÆåÂÖ®Âä†ËΩΩ
        }
      });
      
      observer.observe(document.body, {
        childList: true,
        subtree: true
      });
    }
    
    // ‰∏ªÂàùÂßãÂåñÂáΩÊï∞
    function init() {
      console.log('üöÄ ÂºÄÂßãÂàùÂßãÂåñÊ∏∏ÊàèÂç°ÁâáÁÆ°ÁêÜÂô®...');
      
      // ËÆæÁΩÆ‰∫ã‰ª∂ÂßîÊâò
      setupEventDelegation();
      
      // ËÆæÁΩÆÂÖ∂‰ªñ‰∫ã‰ª∂ÁõëÂê¨Âô®
      setupEventListeners();
      
      // ËÆæÁΩÆDOMÂèòÂåñÁõëÂê¨
      setupMutationObserver();
      
      // ÂàùÂßãÂåñÁé∞ÊúâÊ∏∏ÊàèÂç°Áâá
      initializeGameCards();
      
      // Ê†áËÆ∞‰∏∫Â∑≤ÂàùÂßãÂåñ
      window.gameCardManagerInitialized = true;
      
      console.log('‚úÖ Ê∏∏ÊàèÂç°ÁâáÁÆ°ÁêÜÂô®ÂàùÂßãÂåñÂÆåÊàê');
    }
    
    // Ê†πÊçÆDOMÁä∂ÊÄÅÂÜ≥ÂÆöÂàùÂßãÂåñÊó∂Êú∫
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      // DOMÂ∑≤ÁªèÂä†ËΩΩÂÆåÊàêÔºåÂª∂Ëøü‰∏ÄÁÇπÊó∂Èó¥Á°Æ‰øùÊâÄÊúâÁªÑ‰ª∂ÈÉΩÊ∏≤ÊüìÂÆåÊØï
      setTimeout(init, 100);
    }
    
  })();
</script>

<style>
  /* ÂºïÂÖ•ÈÄöÁî®Ê∏∏ÊàèÂç°ÁâáÊ†∑Âºè */
  @import "/src/styles/game-card.css";

  /* ‰∫∫Ê∞îÂÄºÁ≠âÁ∫ßÊ†∑Âºè */
  .popularity-count {
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .popularity-count.popularity-hot {
    color: #DC2626;
    text-shadow: 0 0 8px rgba(220, 38, 38, 0.3);
    animation: popularityPulse 2s infinite;
  }

  .popularity-count.popularity-high {
    color: #EA580C;
  }

  .popularity-count.popularity-medium {
    color: #CA8A04;
  }

  .popularity-count.popularity-low {
    color: #6B7280;
  }

  @keyframes popularityPulse {
    0%, 100% { 
      transform: scale(1); 
      opacity: 1; 
    }
    50% { 
      transform: scale(1.05); 
      opacity: 0.9; 
    }
  }
</style> 
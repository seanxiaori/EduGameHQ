---
// 导入类型定义
import type { Game } from '../types/game';

// 组件属性接口
interface Props {
  game: Game;
  showTrending?: boolean;
  showFeatured?: boolean;
  showNew?: boolean;
  showUpdated?: boolean;
  showPopularity?: boolean;
  showFavorite?: boolean;
  showDeveloper?: boolean;
}

// 解构属性并设置默认值
const {
  game,
  showTrending = false,
  showFeatured = false,
  showNew = false,
  showUpdated = false,
  showPopularity = false,
  showFavorite = false,
  showDeveloper = false
} = Astro.props;

// 确保游戏对象有效 - 修复类型不匹配问题
const safeGame: Partial<Game> & Pick<Game, 'slug' | 'title' | 'description' | 'category' | 'categoryName' | 'iframeUrl' | 'difficulty' | 'ageRange' | 'minAge' | 'maxAge' | 'thumbnailUrl' | 'featured' | 'trending' | 'isNew' | 'tags' | 'developer' | 'source' | 'iframeCompatible' | 'verified'> = {
  slug: game.slug || '',
  title: game.title || 'Unknown Game',
  description: game.description || 'No description available',
  category: game.category || 'puzzle',
  categoryName: game.categoryName || 'Puzzle',
  iframeUrl: game.iframeUrl || '',
  difficulty: game.difficulty || 'Easy',
  ageRange: game.ageRange || '6-12',
  minAge: game.minAge || 6,
  maxAge: game.maxAge || 12,
  thumbnailUrl: game.thumbnailUrl || '/images/logo.svg',
  featured: game.featured || false,
  trending: game.trending || false,
  isNew: game.isNew || false,
  tags: game.tags || [],
  developer: game.developer || 'Unknown',
  source: game.source || 'External',
  iframeCompatible: game.iframeCompatible ?? true,
  verified: game.verified ?? true,
  ...game
};

// 游戏URL
const gameUrl = `/games/${safeGame.slug}`;
---

<div class={`game-card ${safeGame.category}-theme animate-fadeInUp`} data-game-id={safeGame.slug}>
  <div class="game-image-container">
    <!-- 优化的图片懒加载 -->
    <div class="image-lazy-wrapper">
      <!-- 模糊占位符 -->
      <div class="image-placeholder">
        <div class="placeholder-shimmer"></div>
        <i class="fas fa-gamepad placeholder-icon"></i>
      </div>
      
      <!-- 实际图片（懒加载） -->
      <img 
        data-src={safeGame.thumbnailUrl}
        alt={safeGame.title}
        class="game-image lazy-image"
        onload="this.parentElement.classList.add('loaded')"
        onerror="this.dataset.src='/images/logo.svg'; this.src='/images/logo.svg'; this.parentElement.classList.add('loaded')"
      />
    </div>
    
    <!-- Play按钮独立出来 -->
    <a href={gameUrl} class="play-button">
      <i class="fas fa-play"></i>
      <span>Play Now</span>
    </a>
    
    <!-- 游戏徽章独立出来 -->
    <div class="game-badges">
      {(showTrending && safeGame.trending) && <span class="badge trending">HOT</span>}
      {(showFeatured && safeGame.featured) && <span class="badge featured">FEATURED</span>}
      {(showNew && safeGame.isNew) && <span class="badge new">NEW</span>}
      {showUpdated && <span class="badge updated">UPDATED</span>}
    </div>
    
    <!-- 收藏按钮独立出来，依赖全局脚本处理 -->
    {showFavorite && (
      <button class="favorite-heart-btn" data-game-slug={safeGame.slug} aria-label="Add to favorites">
        <i class="far fa-heart"></i>
      </button>
    )}
    
    <!-- 左上角：游戏历史标签 - 动态显示 -->
    <div class="played-badge-container" data-game-slug={safeGame.slug}></div>
  </div>
  
  <div class="game-info">
    <h3 class="game-title">
      <a href={gameUrl}>{safeGame.title}</a>
    </h3>
    
    <p class="game-description">{safeGame.description}</p>
    
    <div class="game-tags">
      <span class={`category-tag ${safeGame.category}`}>{safeGame.categoryName}</span>
      {safeGame.featured && <span class="feature-tag featured">FEATURED</span>}
      {safeGame.trending && <span class="feature-tag hot">HOT</span>}
      {safeGame.isNew && <span class="feature-tag new">NEW</span>}
      <span class={`difficulty-tag ${safeGame.difficulty.toLowerCase()}`}>{safeGame.difficulty.toUpperCase()}</span>
    </div>
    
    <div class="game-stats">
      {showPopularity && (
        <div class="stat popularity-stat" data-game-slug={safeGame.slug}>
          <i class="fas fa-fire"></i>
          <span class="popularity-count">Loading...</span>
        </div>
      )}
      <div class="stat">
        <i class="fas fa-child"></i>
        <span>Ages {safeGame.ageRange}</span>
      </div>
      {showDeveloper && safeGame.developer && (
        <div class="stat">
          <i class="fas fa-user"></i>
          <span>{safeGame.developer}</span>
        </div>
      )}
    </div>
  </div>
</div>

<style>
  /* 引入通用游戏卡片样式 */
  @import "/src/styles/game-card.css";

  /* 🚀 图片懒加载样式 */
  .image-lazy-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
    border-radius: 12px;
    background: #F8FAFC;
  }

  .image-placeholder {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #F1F5F9 0%, #E2E8F0 100%);
    z-index: 1;
    transition: opacity 0.3s ease;
  }

  .placeholder-shimmer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent 0%,
      rgba(255, 255, 255, 0.4) 50%,
      transparent 100%
    );
    animation: shimmer 1.5s infinite;
  }

  @keyframes shimmer {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }

  .placeholder-icon {
    font-size: 2rem;
    color: #CBD5E1;
    z-index: 2;
  }

  .lazy-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 2;
  }

  .image-lazy-wrapper.loaded .image-placeholder {
    opacity: 0;
    pointer-events: none;
  }

  .image-lazy-wrapper.loaded .lazy-image {
    opacity: 1;
  }

  /* 人气值等级样式 */
  .popularity-count {
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .popularity-count.popularity-hot {
    color: #DC2626;
    text-shadow: 0 0 8px rgba(220, 38, 38, 0.3);
    animation: popularityPulse 2s infinite;
  }

  .popularity-count.popularity-high {
    color: #EA580C;
  }

  .popularity-count.popularity-medium {
    color: #CA8A04;
  }

  .popularity-count.popularity-low {
    color: #6B7280;
  }

  @keyframes popularityPulse {
    0%, 100% { 
      transform: scale(1); 
      opacity: 1; 
    }
    50% { 
      transform: scale(1.05); 
      opacity: 0.9; 
    }
  }
</style>

<script>
  // 🚀 图片懒加载实现
  function initImageLazyLoading() {
    // 检查浏览器是否支持 Intersection Observer
    if (!('IntersectionObserver' in window)) {
      // 不支持的话，直接加载所有图片
      document.querySelectorAll('.lazy-image').forEach(img => {
        const dataSrc = img.getAttribute('data-src');
        if (dataSrc) {
          (img as HTMLImageElement).src = dataSrc;
        }
      });
      return;
    }

    // 创建 Intersection Observer
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target as HTMLImageElement;
          const dataSrc = img.getAttribute('data-src');
          
          if (dataSrc) {
            console.log('🖼️ 开始加载图片:', dataSrc);
            img.src = dataSrc;
            img.removeAttribute('data-src');
            observer.unobserve(img);
          }
        }
      });
    }, {
      // 设置根边距，提前加载即将进入视口的图片
      rootMargin: '50px 0px',
      threshold: 0.1
    });

    // 观察所有懒加载图片
    document.querySelectorAll('.lazy-image[data-src]').forEach(img => {
      imageObserver.observe(img);
    });

    console.log('👁️ 图片懒加载观察器已初始化');
  }

  // DOM加载完成后初始化
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initImageLazyLoading);
  } else {
    initImageLazyLoading();
  }

  // 导出到全局，供其他脚本使用
  (window as any).initImageLazyLoading = initImageLazyLoading;
</script> 
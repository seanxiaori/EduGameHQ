---
// 导入类型定义
import type { Game } from '../types/game';

// 通用游戏卡片组件 - 支持所有动态数据
export interface GameCardProps {
  game: {
    slug: string;
    title: string;
    description: string;
    thumbnailUrl: string;
    category: string;
    categoryName: string;
    difficulty: string;
    ageRange: string;
    minAge?: number;
    maxAge?: number;
    featured?: boolean;
    trending?: boolean;
    isNew?: boolean;
    playCount?: number;
    tags?: string[];
    developer?: string;
  };
  showPlayHistory?: boolean;
  showPopularity?: boolean;
  showDeveloper?: boolean;
}

// 组件属性接口
interface Props {
  game: Game;
  showTrending?: boolean;
  showFeatured?: boolean;
  showNew?: boolean;
  showUpdated?: boolean;
  showPlayHistory?: boolean;
  showPopularity?: boolean;
  showFavorite?: boolean;
  showDeveloper?: boolean;
  playCount?: number;
}

// 解构属性并设置默认值
const {
  game,
  showTrending = false,
  showFeatured = false,
  showNew = false,
  showUpdated = false,
  showPlayHistory = false,
  showPopularity = false,
  showFavorite = false,
  showDeveloper = false,
  playCount = 0
} = Astro.props;

// 确保游戏对象有效
const safeGame: Game = {
  slug: '',
  title: 'Unknown Game',
  description: 'No description available',
  category: 'puzzle',
  categoryName: 'Puzzle',
  difficulty: 'Easy',
  ageRange: '6-12',
  thumbnailUrl: '/images/logo.svg',
  gameUrl: '',
  featured: false,
  trending: false,
  isNew: false,
  tags: [],
  developer: 'Unknown',
  ...game
};

// 格式化人气数字
const formatPopularity = (num: number) => {
  if (!num || num === 0) return '0';
  if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
  if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
  return num.toString();
};

// 游戏URL
const gameUrl = `/games/${safeGame.slug}`;
---

<div class={`game-card ${safeGame.category}-theme animate-fadeInUp`} data-game-id={safeGame.slug}>
  <div class="game-image-container">
    <img 
      src={safeGame.thumbnailUrl} 
      alt={safeGame.title}
      class="game-image"
      loading="lazy"
      onerror="this.src='/images/logo.svg'"
    />
    
    <!-- Play按钮独立出来 -->
    <a href={gameUrl} class="play-button">
      <i class="fas fa-play"></i>
      <span>Play Now</span>
    </a>
    
    <!-- 游戏徽章独立出来 -->
    <div class="game-badges">
      {(showTrending && safeGame.trending) && <span class="badge trending">HOT</span>}
      {(showFeatured && safeGame.featured) && <span class="badge featured">FEATURED</span>}
      {(showNew && safeGame.isNew) && <span class="badge new">NEW</span>}
      {showUpdated && <span class="badge updated">UPDATED</span>}
    </div>
    
    <!-- 收藏按钮独立出来，依赖全局脚本处理 -->
    {showFavorite && (
      <button class="favorite-heart-btn" data-game-slug={safeGame.slug} aria-label="Add to favorites">
        <i class="far fa-heart"></i>
      </button>
    )}
    
    <!-- 左上角：游戏历史标签 - 动态显示 -->
    <div class="played-badge-container" data-game-slug={safeGame.slug}></div>
  </div>
  
  <div class="game-info">
    <h3 class="game-title">
      <a href={gameUrl}>{safeGame.title}</a>
    </h3>
    
    <p class="game-description">{safeGame.description}</p>
    
    <div class="game-tags">
      <span class={`category-tag ${safeGame.category}`}>{safeGame.categoryName}</span>
      {safeGame.featured && <span class="feature-tag featured">FEATURED</span>}
      {safeGame.trending && <span class="feature-tag hot">HOT</span>}
      {safeGame.isNew && <span class="feature-tag new">NEW</span>}
      <span class={`difficulty-tag ${safeGame.difficulty.toLowerCase()}`}>{safeGame.difficulty.toUpperCase()}</span>
    </div>
    
    <div class="game-stats">
      {showPopularity && (
        <div class="stat popularity-stat" data-game-slug={safeGame.slug}>
          <i class="fas fa-fire"></i>
          <span class="popularity-count">Loading...</span>
        </div>
      )}
      <div class="stat">
        <i class="fas fa-child"></i>
        <span>Ages {safeGame.ageRange}</span>
      </div>
      {showDeveloper && safeGame.developer && (
        <div class="stat">
          <i class="fas fa-user"></i>
          <span>{safeGame.developer}</span>
        </div>
      )}
    </div>
  </div>
</div>

<style>
  /* 引入通用游戏卡片样式 */
  @import "/src/styles/game-card.css";

  /* 人气值等级样式 */
  .popularity-count {
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .popularity-count.popularity-hot {
    color: #DC2626;
    text-shadow: 0 0 8px rgba(220, 38, 38, 0.3);
    animation: popularityPulse 2s infinite;
  }

  .popularity-count.popularity-high {
    color: #EA580C;
  }

  .popularity-count.popularity-medium {
    color: #CA8A04;
  }

  .popularity-count.popularity-low {
    color: #6B7280;
  }

  @keyframes popularityPulse {
    0%, 100% { 
      transform: scale(1); 
      opacity: 1; 
    }
    50% { 
      transform: scale(1.05); 
      opacity: 0.9; 
    }
  }
</style> 
---
// 导入类型定义
import type { Game } from '../types/game';

// 通用游戏卡片组件 - 支持所有动态数据
export interface GameCardProps {
  game: {
    slug: string;
    title: string;
    description: string;
    thumbnailUrl: string;
    category: string;
    categoryName: string;
    difficulty: string;
    ageRange: string;
    minAge?: number;
    maxAge?: number;
    featured?: boolean;
    trending?: boolean;
    isNew?: boolean;
    playCount?: number;
    tags?: string[];
    developer?: string;
  };
  showPlayHistory?: boolean;
  showPopularity?: boolean;
  showDeveloper?: boolean;
}

// 组件属性接口
interface Props {
  game: Game;
  showTrending?: boolean;
  showFeatured?: boolean;
  showNew?: boolean;
  showUpdated?: boolean;
  showPlayHistory?: boolean;
  showPopularity?: boolean;
  showFavorite?: boolean;
  showDeveloper?: boolean;
  playCount?: number;
}

// 解构属性并设置默认值
const {
  game,
  showTrending = false,
  showFeatured = false,
  showNew = false,
  showUpdated = false,
  showPlayHistory = false,
  showPopularity = false,
  showFavorite = false,
  showDeveloper = false,
  playCount = 0
} = Astro.props;

// 确保游戏对象有效
const safeGame: Game = {
  slug: '',
  title: 'Unknown Game',
  description: 'No description available',
  category: 'puzzle',
  categoryName: 'Puzzle',
  difficulty: 'Easy',
  ageRange: '6-12',
  thumbnailUrl: '/images/placeholder-game.jpg',
  gameUrl: '',
  featured: false,
  trending: false,
  isNew: false,
  tags: [],
  developer: 'Unknown',
  ...game
};

// 格式化人气数字
const formatPopularity = (num: number) => {
  if (!num || num === 0) return '0';
  if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
  if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
  return num.toString();
};

// 游戏URL
const gameUrl = `/games/${safeGame.slug}`;
---

<!-- 引入游戏统计管理器 -->
<script src="/src/utils/game-stats-manager.js" is:inline></script>

<div class={`game-card ${safeGame.category}-theme animate-fadeInUp`} data-game-id={safeGame.slug}>
  <div class="game-image-container">
    <img 
      src={safeGame.thumbnailUrl} 
      alt={safeGame.title}
      class="game-image"
      loading="lazy"
      onerror="this.src='/images/logo.svg'"
    />
    
    <div class="game-overlay">
      <div class="game-badges">
        {(showTrending && safeGame.trending) && <span class="badge trending">HOT</span>}
        {(showFeatured && safeGame.featured) && <span class="badge featured">FEATURED</span>}
        {(showNew && safeGame.isNew) && <span class="badge new">NEW</span>}
        {showUpdated && <span class="badge updated">UPDATED</span>}
      </div>
      
      <a href={gameUrl} class="play-button">
        <i class="fas fa-play"></i>
        <span>Play Now</span>
      </a>
    </div>
    
    <!-- 收藏按钮独立出来，不受蒙版影响 -->
    {showFavorite && (
      <button class="favorite-heart-btn" data-game-slug={safeGame.slug} aria-label="Add to favorites">
        <i class="far fa-heart"></i>
      </button>
    )}
    
    <!-- 左上角：游戏历史标签 - 动态显示 -->
    <div class="played-badge-container" data-game-slug={safeGame.slug}></div>
  </div>
  
  <div class="game-info">
    <h3 class="game-title">
      <a href={gameUrl}>{safeGame.title}</a>
    </h3>
    
    <p class="game-description">{safeGame.description}</p>
    
    <div class="game-tags">
      <span class={`category-tag ${safeGame.category}`}>{safeGame.categoryName}</span>
      {safeGame.featured && <span class="feature-tag featured">FEATURED</span>}
      {safeGame.trending && <span class="feature-tag hot">HOT</span>}
      {safeGame.isNew && <span class="feature-tag new">NEW</span>}
      <span class={`difficulty-tag ${safeGame.difficulty.toLowerCase()}`}>{safeGame.difficulty.toUpperCase()}</span>
    </div>
    
    <div class="game-stats">
      {showPopularity && (
        <div class="stat popularity-stat" data-game-slug={safeGame.slug}>
          <i class="fas fa-fire"></i>
          <span class="popularity-count">Loading...</span>
        </div>
      )}
      <div class="stat">
        <i class="fas fa-child"></i>
        <span>Ages {safeGame.ageRange}</span>
      </div>
      {showDeveloper && safeGame.developer && (
        <div class="stat">
          <i class="fas fa-user"></i>
          <span>{safeGame.developer}</span>
        </div>
      )}
    </div>
  </div>
</div>

<!-- 极简调试脚本 - 立即执行 -->
<script is:inline>
  // 立即执行的调试脚本
  console.log('🚀 GameCard脚本开始执行...');
  
  // 等待DOM加载
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSimpleFavorites);
  } else {
    initSimpleFavorites();
  }
  
  function initSimpleFavorites() {
    console.log('📄 DOM已加载，开始初始化收藏功能...');
    
    // 查找所有收藏按钮
    const favoriteButtons = document.querySelectorAll('.favorite-heart-btn');
    console.log('🔍 找到收藏按钮数量:', favoriteButtons.length);
    
    // 为每个按钮添加点击事件
    favoriteButtons.forEach((button, index) => {
      const gameSlug = button.getAttribute('data-game-slug');
      console.log(`🎮 按钮 ${index + 1}: 游戏 ${gameSlug}`);
      
      if (gameSlug) {
        // 初始化按钮状态
        updateButtonState(button, gameSlug);
        
        // 添加点击事件
        button.addEventListener('click', function(e) {
          console.log('💖 点击收藏按钮:', gameSlug);
          e.preventDefault();
          e.stopPropagation();
          toggleFavorite(gameSlug, button);
        });
        
        console.log(`✅ 按钮 ${index + 1} 初始化完成`);
      } else {
        console.error(`❌ 按钮 ${index + 1} 缺少游戏ID`);
      }
    });
    
    console.log('🎉 收藏功能初始化完成!');
  }
  
  // 简化的收藏切换函数
  function toggleFavorite(gameSlug, button) {
    console.log('🔄 开始切换收藏状态:', gameSlug);
    
    try {
      // 获取当前收藏列表
      const favorites = JSON.parse(localStorage.getItem('favoriteGames') || '[]');
      console.log('📋 当前收藏列表:', favorites);
      
      const isCurrentlyFavorited = favorites.includes(gameSlug);
      console.log('📋 当前状态:', isCurrentlyFavorited ? '已收藏' : '未收藏');
      
      let newFavorites;
      if (isCurrentlyFavorited) {
        // 取消收藏
        newFavorites = favorites.filter(id => id !== gameSlug);
        console.log('➖ 取消收藏:', gameSlug);
      } else {
        // 添加收藏
        newFavorites = [...favorites, gameSlug];
        console.log('➕ 添加收藏:', gameSlug);
      }
      
      // 保存到localStorage
      localStorage.setItem('favoriteGames', JSON.stringify(newFavorites));
      console.log('💾 保存新列表:', newFavorites);
      
      // 更新按钮状态
      updateButtonState(button, gameSlug);
      
      // 显示提示
      const message = isCurrentlyFavorited ? '已取消收藏' : '已添加收藏';
      console.log('✅ 操作完成:', message);
      
      // 简单的提示（可选）
      if (window.showNotification) {
        window.showNotification(message, isCurrentlyFavorited ? 'removed' : 'added');
      }
      
    } catch (error) {
      console.error('❌ 收藏操作失败:', error);
    }
  }
  
  // 更新按钮状态
  function updateButtonState(button, gameSlug) {
    try {
      const favorites = JSON.parse(localStorage.getItem('favoriteGames') || '[]');
      const isFavorited = favorites.includes(gameSlug);
      
      const heartIcon = button.querySelector('i');
      if (heartIcon) {
        if (isFavorited) {
          heartIcon.className = 'fas fa-heart';
          button.classList.add('active');
          console.log('💖 按钮状态: 已收藏');
        } else {
          heartIcon.className = 'far fa-heart';
          button.classList.remove('active');
          console.log('🤍 按钮状态: 未收藏');
        }
      }
    } catch (error) {
      console.error('❌ 更新按钮状态失败:', error);
    }
  }
  
  console.log('🔧 GameCard脚本加载完成');
</script>

<style>
  /* 引入通用游戏卡片样式 */
  @import "/src/styles/game-card.css";

  /* 人气值等级样式 */
  .popularity-count {
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .popularity-count.popularity-hot {
    color: #DC2626;
    text-shadow: 0 0 8px rgba(220, 38, 38, 0.3);
    animation: popularityPulse 2s infinite;
  }

  .popularity-count.popularity-high {
    color: #EA580C;
  }

  .popularity-count.popularity-medium {
    color: #CA8A04;
  }

  .popularity-count.popularity-low {
    color: #6B7280;
  }

  @keyframes popularityPulse {
    0%, 100% { 
      transform: scale(1); 
      opacity: 1; 
    }
    50% { 
      transform: scale(1.05); 
      opacity: 0.9; 
    }
  }
</style> 
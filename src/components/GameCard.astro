---
// ÂØºÂÖ•Á±ªÂûãÂÆö‰πâ
import type { Game } from '../types/game';

// ÈÄöÁî®Ê∏∏ÊàèÂç°ÁâáÁªÑ‰ª∂ - ÊîØÊåÅÊâÄÊúâÂä®ÊÄÅÊï∞ÊçÆ
export interface GameCardProps {
  game: {
    slug: string;
    title: string;
    description: string;
    thumbnailUrl: string;
    category: string;
    categoryName: string;
    difficulty: string;
    ageRange: string;
    minAge?: number;
    maxAge?: number;
    featured?: boolean;
    trending?: boolean;
    isNew?: boolean;
    playCount?: number;
    tags?: string[];
    developer?: string;
  };
  showPlayHistory?: boolean;
  showPopularity?: boolean;
  showDeveloper?: boolean;
}

// ÁªÑ‰ª∂Â±ûÊÄßÊé•Âè£
interface Props {
  game: Game;
  showTrending?: boolean;
  showFeatured?: boolean;
  showNew?: boolean;
  showUpdated?: boolean;
  showPlayHistory?: boolean;
  showPopularity?: boolean;
  showFavorite?: boolean;
  showDeveloper?: boolean;
  playCount?: number;
}

// Ëß£ÊûÑÂ±ûÊÄßÂπ∂ËÆæÁΩÆÈªòËÆ§ÂÄº
const {
  game,
  showTrending = false,
  showFeatured = false,
  showNew = false,
  showUpdated = false,
  showPlayHistory = false,
  showPopularity = false,
  showFavorite = false,
  showDeveloper = false,
  playCount = 0
} = Astro.props;

// Á°Æ‰øùÊ∏∏ÊàèÂØπË±°ÊúâÊïà
const safeGame: Game = {
  slug: '',
  title: 'Unknown Game',
  description: 'No description available',
  category: 'puzzle',
  categoryName: 'Puzzle',
  difficulty: 'Easy',
  ageRange: '6-12',
  thumbnailUrl: '/images/placeholder-game.jpg',
  gameUrl: '',
  featured: false,
  trending: false,
  isNew: false,
  tags: [],
  developer: 'Unknown',
  ...game
};

// Ê†ºÂºèÂåñ‰∫∫Ê∞îÊï∞Â≠ó
const formatPopularity = (num: number) => {
  if (!num || num === 0) return '0';
  if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
  if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
  return num.toString();
};

// Ê∏∏ÊàèURL
const gameUrl = `/games/${safeGame.slug}`;
---

<!-- ÂºïÂÖ•Ê∏∏ÊàèÁªüËÆ°ÁÆ°ÁêÜÂô® -->
<script src="/src/utils/game-stats-manager.js" is:inline></script>

<div class={`game-card ${safeGame.category}-theme animate-fadeInUp`} data-game-id={safeGame.slug}>
  <div class="game-image-container">
    <img 
      src={safeGame.thumbnailUrl} 
      alt={safeGame.title}
      class="game-image"
      loading="lazy"
      onerror="this.src='/images/logo.svg'"
    />
    
    <div class="game-overlay">
      <div class="game-badges">
        {(showTrending && safeGame.trending) && <span class="badge trending">HOT</span>}
        {(showFeatured && safeGame.featured) && <span class="badge featured">FEATURED</span>}
        {(showNew && safeGame.isNew) && <span class="badge new">NEW</span>}
        {showUpdated && <span class="badge updated">UPDATED</span>}
      </div>
      
      <a href={gameUrl} class="play-button">
        <i class="fas fa-play"></i>
        <span>Play Now</span>
      </a>
    </div>
    
    <!-- Êî∂ËóèÊåâÈíÆÁã¨Á´ãÂá∫Êù•Ôºå‰∏çÂèóËíôÁâàÂΩ±Âìç -->
    {showFavorite && (
      <button class="favorite-heart-btn" data-game-slug={safeGame.slug} aria-label="Add to favorites">
        <i class="far fa-heart"></i>
      </button>
    )}
    
    <!-- Â∑¶‰∏äËßíÔºöÊ∏∏ÊàèÂéÜÂè≤Ê†áÁ≠æ - Âä®ÊÄÅÊòæÁ§∫ -->
    <div class="played-badge-container" data-game-slug={safeGame.slug}></div>
  </div>
  
  <div class="game-info">
    <h3 class="game-title">
      <a href={gameUrl}>{safeGame.title}</a>
    </h3>
    
    <p class="game-description">{safeGame.description}</p>
    
    <div class="game-tags">
      <span class={`category-tag ${safeGame.category}`}>{safeGame.categoryName}</span>
      {safeGame.featured && <span class="feature-tag featured">FEATURED</span>}
      {safeGame.trending && <span class="feature-tag hot">HOT</span>}
      {safeGame.isNew && <span class="feature-tag new">NEW</span>}
      <span class={`difficulty-tag ${safeGame.difficulty.toLowerCase()}`}>{safeGame.difficulty.toUpperCase()}</span>
    </div>
    
    <div class="game-stats">
      {showPopularity && (
        <div class="stat popularity-stat" data-game-slug={safeGame.slug}>
          <i class="fas fa-fire"></i>
          <span class="popularity-count">Loading...</span>
        </div>
      )}
      <div class="stat">
        <i class="fas fa-child"></i>
        <span>Ages {safeGame.ageRange}</span>
      </div>
      {showDeveloper && safeGame.developer && (
        <div class="stat">
          <i class="fas fa-user"></i>
          <span>{safeGame.developer}</span>
        </div>
      )}
    </div>
  </div>
</div>

<!-- ÁÆÄÂåñÁâàÊî∂ËóèÂäüËÉΩË∞ÉËØïËÑöÊú¨ -->
<script define:vars={{ safeGame, showPlayHistory, showPopularity }}>
  // ÁÆÄÂåñÁâàÊî∂ËóèÁÆ°ÁêÜÂô® - ‰∏ìÊ≥®Ë∞ÉËØï
  (function() {
    console.log('üîß ÂàùÂßãÂåñÁÆÄÂåñÁâàÊî∂ËóèÁÆ°ÁêÜÂô®...');
    
    const STORAGE_KEY = 'favoriteGames';
    
    // ÁÆÄÂåñÁöÑÊî∂ËóèÁÆ°ÁêÜÁ±ª
    class SimpleFavoriteManager {
      // Ê£ÄÊü•ÊòØÂê¶Â∑≤Êî∂Ëóè
      static isFavorited(gameSlug) {
        try {
          const favorites = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
          const result = favorites.includes(gameSlug);
          console.log(`üîç Ê£ÄÊü•Êî∂ËóèÁä∂ÊÄÅ ${gameSlug}: ${result ? 'Â∑≤Êî∂Ëóè' : 'Êú™Êî∂Ëóè'}`);
          return result;
        } catch (error) {
          console.error('‚ùå ËØªÂèñÊî∂ËóèÁä∂ÊÄÅÂ§±Ë¥•:', error);
          return false;
        }
      }
      
      // ÂàáÊç¢Êî∂ËóèÁä∂ÊÄÅ
      static toggleFavorite(gameSlug) {
        try {
          console.log(`üîÑ ÂºÄÂßãÂàáÊç¢Êî∂ËóèÁä∂ÊÄÅ: ${gameSlug}`);
          
          const favorites = JSON.parse(localStorage.getItem(STORAGE_KEY) || '[]');
          const currentlyFavorited = favorites.includes(gameSlug);
          
          console.log(`üìã ÂΩìÂâçÊî∂ËóèÂàóË°®:`, favorites);
          console.log(`üìã ÂΩìÂâçÁä∂ÊÄÅ: ${currentlyFavorited ? 'Â∑≤Êî∂Ëóè' : 'Êú™Êî∂Ëóè'}`);
          
          let newFavorites;
          let newState;
          
          if (currentlyFavorited) {
            // ÁßªÈô§Êî∂Ëóè
            newFavorites = favorites.filter(id => id !== gameSlug);
            newState = false;
            console.log(`‚ûñ ÁßªÈô§Êî∂Ëóè: ${gameSlug}`);
          } else {
            // Ê∑ªÂä†Êî∂Ëóè
            newFavorites = [...favorites, gameSlug];
            newState = true;
            console.log(`‚ûï Ê∑ªÂä†Êî∂Ëóè: ${gameSlug}`);
          }
          
          // ‰øùÂ≠òÂà∞localStorage
          localStorage.setItem(STORAGE_KEY, JSON.stringify(newFavorites));
          console.log(`üíæ ‰øùÂ≠òÊñ∞ÁöÑÊî∂ËóèÂàóË°®:`, newFavorites);
          
          // Á´ãÂç≥Êõ¥Êñ∞ÊâÄÊúâÁõ∏ÂÖ≥ÊåâÈíÆ
          this.updateAllButtonsForGame(gameSlug, newState);
          
          console.log(`‚úÖ Êî∂ËóèÁä∂ÊÄÅÊõ¥Êñ∞ÂÆåÊàê ${gameSlug}: ${newState ? 'Â∑≤Êî∂Ëóè' : 'Â∑≤ÂèñÊ∂àÊî∂Ëóè'}`);
          
          // ÊòæÁ§∫ÈÄöÁü•
          this.showNotification(newState ? 'Added to favorites' : 'Removed from favorites', newState ? 'added' : 'removed');
          
        } catch (error) {
          console.error('‚ùå Êî∂ËóèÊìç‰ΩúÂ§±Ë¥•:', error);
          this.showNotification('Something went wrong', 'error');
        }
      }
      
      // Êõ¥Êñ∞ÁâπÂÆöÊ∏∏ÊàèÁöÑÊâÄÊúâÊåâÈíÆ
      static updateAllButtonsForGame(gameSlug, isFavorited) {
        const gameCards = document.querySelectorAll(`[data-game-id="${gameSlug}"]`);
        console.log(`üîÑ ÊâæÂà∞ ${gameCards.length} ‰∏™ ${gameSlug} ÁöÑÊ∏∏ÊàèÂç°Áâá`);
        
        gameCards.forEach((card, index) => {
          console.log(`üéÆ Â§ÑÁêÜÁ¨¨ ${index + 1} ‰∏™Âç°Áâá`);
          const favoriteBtn = card.querySelector('.favorite-heart-btn');
          if (favoriteBtn) {
            console.log(`üíñ ÊâæÂà∞Êî∂ËóèÊåâÈíÆÔºåÊõ¥Êñ∞Áä∂ÊÄÅ: ${isFavorited ? 'Â∑≤Êî∂Ëóè' : 'Êú™Êî∂Ëóè'}`);
            this.updateButtonState(favoriteBtn, isFavorited);
          } else {
            console.log(`‚ö† Êú™ÊâæÂà∞Êî∂ËóèÊåâÈíÆ`);
          }
        });
      }
      
      // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
      static updateButtonState(button, isFavorited) {
        if (!button) {
          console.log(`‚ö† ÊåâÈíÆ‰∏çÂ≠òÂú®`);
          return;
        }
        
        console.log(`üé® Êõ¥Êñ∞ÊåâÈíÆÊ†∑Âºè: ${isFavorited ? 'Êî∂ËóèÁä∂ÊÄÅ' : 'Êú™Êî∂ËóèÁä∂ÊÄÅ'}`);
        
        const icon = button.querySelector('i');
        if (icon) {
          icon.className = isFavorited ? 'fas fa-heart' : 'far fa-heart';
          console.log(`üéØ ÂõæÊ†áÁ±ªÂêçÊõ¥Êñ∞‰∏∫: ${icon.className}`);
        }
        
        // Êõ¥Êñ∞Ê†∑Âºè
        if (isFavorited) {
          button.style.background = 'linear-gradient(135deg, #EC4899 0%, #DB2777 100%)';
          button.style.color = 'white';
          button.style.borderColor = 'rgba(236, 72, 153, 0.6)';
          button.style.boxShadow = '0 4px 15px rgba(236, 72, 153, 0.4)';
          button.classList.add('favorited');
        } else {
          button.style.background = 'rgba(0, 0, 0, 0.25)';
          button.style.color = '#FFFFFF';
          button.style.borderColor = 'rgba(255, 255, 255, 0.2)';
          button.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.2)';
          button.classList.remove('favorited');
        }
        
        // Ê∑ªÂä†Áä∂ÊÄÅÂàáÊç¢Âä®Áîª
        button.style.transform = 'scale(1.1)';
        setTimeout(() => {
          button.style.transform = 'scale(1)';
        }, 150);
      }
      
      // ÊòæÁ§∫ÈÄöÁü•
      static showNotification(message, type) {
        console.log(`üì¢ ÊòæÁ§∫ÈÄöÁü•: ${message} (${type})`);
        
        const existingNotification = document.querySelector('.game-card-notification');
        if (existingNotification) {
          existingNotification.remove();
        }

        const notification = document.createElement('div');
        notification.className = `game-card-notification ${type}`;
        notification.style.cssText = `
          position: fixed !important;
          top: 2rem !important;
          right: 2rem !important;
          background: ${type === 'added' ? '#10B981' : type === 'removed' ? '#EF4444' : '#6B7280'} !important;
          color: white !important;
          padding: 0.75rem 1.25rem !important;
          border-radius: 8px !important;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;
          z-index: 10000 !important;
          font-size: 0.875rem !important;
          font-weight: 600 !important;
          transform: translateX(100%) !important;
          opacity: 0 !important;
          transition: all 0.3s ease !important;
        `;
        
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.style.transform = 'translateX(0)';
          notification.style.opacity = '1';
        }, 10);
        
        setTimeout(() => {
          notification.style.transform = 'translateX(100%)';
          notification.style.opacity = '0';
          setTimeout(() => {
            if (document.body.contains(notification)) {
              document.body.removeChild(notification);
            }
          }, 300);
        }, 2000);
      }
    }
    
    // Áõ¥Êé•ÁªëÂÆöÁÇπÂáª‰∫ã‰ª∂Âà∞ÊâÄÊúâÊî∂ËóèÊåâÈíÆ
    function bindFavoriteButtons() {
      console.log('üîó ÂºÄÂßãÁªëÂÆöÊî∂ËóèÊåâÈíÆ‰∫ã‰ª∂...');
      
      const favoriteButtons = document.querySelectorAll('.favorite-heart-btn');
      console.log(`üîç ÊâæÂà∞ ${favoriteButtons.length} ‰∏™Êî∂ËóèÊåâÈíÆ`);
      
      favoriteButtons.forEach((button, index) => {
        const gameSlug = button.getAttribute('data-game-slug');
        console.log(`üéÆ Á¨¨ ${index + 1} ‰∏™ÊåâÈíÆÔºåÊ∏∏Êàè: ${gameSlug}`);
        
        if (!gameSlug) {
          console.error(`‚ùå Á¨¨ ${index + 1} ‰∏™ÊåâÈíÆÁº∫Â∞ë data-game-slug Â±ûÊÄß`);
          return;
        }
        
        // ÁßªÈô§ÊóßÁöÑ‰∫ã‰ª∂ÁõëÂê¨Âô®ÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
        button.removeEventListener('click', button._favoriteClickHandler);
        
        // ÂàõÂª∫Êñ∞ÁöÑÁÇπÂáªÂ§ÑÁêÜÂáΩÊï∞
        button._favoriteClickHandler = function(e) {
          console.log(`üíñ ÁÇπÂáªÊî∂ËóèÊåâÈíÆ: ${gameSlug}`);
          e.preventDefault();
          e.stopPropagation();
          SimpleFavoriteManager.toggleFavorite(gameSlug);
        };
        
        // ÁªëÂÆöÊñ∞ÁöÑ‰∫ã‰ª∂ÁõëÂê¨Âô®
        button.addEventListener('click', button._favoriteClickHandler);
        
        // ÂàùÂßãÂåñÊåâÈíÆÁä∂ÊÄÅ
        const isFavorited = SimpleFavoriteManager.isFavorited(gameSlug);
        SimpleFavoriteManager.updateButtonState(button, isFavorited);
        
        console.log(`‚úÖ Á¨¨ ${index + 1} ‰∏™ÊåâÈíÆÁªëÂÆöÂÆåÊàê`);
      });
    }
    
    // ÂàùÂßãÂåñÂáΩÊï∞
    function init() {
      console.log('üöÄ ÁÆÄÂåñÁâàÊî∂ËóèÁÆ°ÁêÜÂô®ÂàùÂßãÂåñÂºÄÂßã...');
      
      // Á≠âÂæÖDOMÂÆåÂÖ®Âä†ËΩΩ
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          console.log('üìÑ DOMÂä†ËΩΩÂÆåÊàêÔºåÂºÄÂßãÁªëÂÆöÊåâÈíÆ...');
          setTimeout(bindFavoriteButtons, 100);
        });
      } else {
        console.log('üìÑ DOMÂ∑≤Âä†ËΩΩÔºåÁ´ãÂç≥ÁªëÂÆöÊåâÈíÆ...');
        setTimeout(bindFavoriteButtons, 100);
      }
      
      console.log('‚úÖ ÁÆÄÂåñÁâàÊî∂ËóèÁÆ°ÁêÜÂô®ÂàùÂßãÂåñÂÆåÊàê');
    }
    
    // ÂêØÂä®ÂàùÂßãÂåñ
    init();
    
  })();
</script>

<style>
  /* ÂºïÂÖ•ÈÄöÁî®Ê∏∏ÊàèÂç°ÁâáÊ†∑Âºè */
  @import "/src/styles/game-card.css";

  /* ‰∫∫Ê∞îÂÄºÁ≠âÁ∫ßÊ†∑Âºè */
  .popularity-count {
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .popularity-count.popularity-hot {
    color: #DC2626;
    text-shadow: 0 0 8px rgba(220, 38, 38, 0.3);
    animation: popularityPulse 2s infinite;
  }

  .popularity-count.popularity-high {
    color: #EA580C;
  }

  .popularity-count.popularity-medium {
    color: #CA8A04;
  }

  .popularity-count.popularity-low {
    color: #6B7280;
  }

  @keyframes popularityPulse {
    0%, 100% { 
      transform: scale(1); 
      opacity: 1; 
    }
    50% { 
      transform: scale(1.05); 
      opacity: 0.9; 
    }
  }
</style> 
---
// 导入类型定义
import type { Game } from '../types/game';
import { getLanguageFromPath, getLocalizedPath, t } from '../i18n/utils';

// 组件属性接口
interface Props {
  game: Game;
  translations?: Record<string, any>;
  showTrending?: boolean;
  showFeatured?: boolean;
  showNew?: boolean;
  showUpdated?: boolean;
  showPlayHistory?: boolean;
  showPopularity?: boolean;
  showFavorite?: boolean;
  showDeveloper?: boolean;
}

// 解构属性并设置默认值
const { 
  game, 
  translations,
  showTrending = false, 
  showFeatured = false, 
  showNew = false,
  showUpdated = false,
  showPopularity = false, 
  showFavorite = false,
  showDeveloper = false
} = Astro.props;

// 翻译游戏数据的函数
function getTranslatedGameData(game: Game, translations?: Record<string, any>) {
  if (!translations) {
    return {
      title: game.title,
      description: game.description
    };
  }
  
  // 尝试从翻译文件中获取游戏数据翻译
  const gameKey = game.slug || game.title?.toLowerCase().replace(/\s+/g, '_');
  const translatedTitle = t(translations, `games_data.${gameKey}.title`, game.title);
  const translatedDescription = t(translations, `games_data.${gameKey}.description`, game.description);
  
  return {
    title: translatedTitle,
    description: translatedDescription
  };
}

// 获取翻译后的游戏数据
const translatedGameData = getTranslatedGameData(game, translations);

// 确保游戏对象有效 - 修复类型不匹配问题
const safeGame = {
  ...game,
  // 只覆盖需要默认值的关键字段
  slug: game.slug || '',
  title: translatedGameData.title || 'Unknown Game',
  description: translatedGameData.description || 'No description available',
  thumbnailUrl: game.thumbnailUrl || '/images/logo.svg'
};

// 格式化人气值显示 - 构建时静态渲染
function formatPopularity(num) {
  if (!num || num === 0) return '0';
  if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
  if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
  return num.toString();
}

// 计算显示的人气值 - 使用games.json中的playCount数据
const rawPopularity = safeGame.playCount || 1200;
const formattedPopularity = formatPopularity(rawPopularity);

// 获取当前语言并生成正确的游戏URL
const currentLang = getLanguageFromPath(Astro.url.pathname);
const gameUrl = getLocalizedPath(`/games/${safeGame.slug}`, currentLang);
---

<div class={`game-card ${safeGame.category}-theme animate-fadeInUp`} data-game-id={safeGame.slug}>
  <div class="game-image-container">
    <!-- 优化的图片加载 - 移除懒加载避免404错误 -->
    <div class="image-wrapper">
      <!-- 实际图片（直接加载） -->
      <img 
        src={safeGame.thumbnailUrl}
        alt={safeGame.title}
        class="game-image"
        onload="this.parentElement.classList.add('loaded')"
        onerror="this.src='/images/logo.svg'; this.parentElement.classList.add('loaded')"
        loading="lazy"
      />
    </div>
    
    <!-- Play按钮独立出来 -->
    <a href={gameUrl} class="play-button">
      <i class="fas fa-play"></i>
      <span>Play Now</span>
    </a>
    
    <!-- 游戏徽章独立出来 -->
      <div class="game-badges">
        {(showTrending && safeGame.trending) && <span class="badge trending">HOT</span>}
        {(showFeatured && safeGame.featured) && <span class="badge featured">FEATURED</span>}
        {(showNew && safeGame.isNew) && <span class="badge new">NEW</span>}
        {showUpdated && <span class="badge updated">UPDATED</span>}
      </div>
      
    <!-- 收藏按钮独立出来，依赖全局脚本处理 -->
      {showFavorite && (
        <button class="favorite-heart-btn" data-game-slug={safeGame.slug} aria-label="Add to favorites">
          <i class="far fa-heart"></i>
        </button>
      )}
    
    <!-- 左上角：游戏历史标签 - 动态显示 -->
    <div class="played-badge-container" data-game-slug={safeGame.slug}></div>
  </div>
  
  <div class="game-info">
    <h3 class="game-title">
      <a href={gameUrl}>{safeGame.title}</a>
    </h3>
    
    <p class="game-description">{safeGame.description}</p>
    
    <div class="game-tags">
      <span class={`category-tag ${safeGame.category}`}>
        {safeGame.categoryName || (safeGame.category && 
          safeGame.category.charAt(0).toUpperCase() + safeGame.category.slice(1))}
      </span>
      {safeGame.featured && <span class="feature-tag featured">FEATURED</span>}
      {safeGame.trending && <span class="feature-tag hot">HOT</span>}
      {safeGame.isNew && <span class="feature-tag new">NEW</span>}
      <span class={`difficulty-tag ${safeGame.difficulty.toLowerCase()}`}>{safeGame.difficulty.toUpperCase()}</span>
    </div>
    
      <div class="game-stats">
      {showPopularity && (
        <div class="stat popularity-stat" data-game-slug={safeGame.slug}>
          <i class="fas fa-fire"></i>
          <span class="popularity-count">{formattedPopularity}</span>
        </div>
      )}
      <div class="stat">
        <i class="fas fa-child"></i>
        <span>Ages {safeGame.ageRange}</span>
      </div>
      {showDeveloper && safeGame.developer && (
        <div class="stat">
          <i class="fas fa-user"></i>
          <span>{safeGame.developer}</span>
    </div>
      )}
    </div>
  </div>
</div>

<style>
  /* 引入通用游戏卡片样式 */
  @import "/src/styles/game-card.css";

  /* 🚀 简化的图片加载样式 */
  .image-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
    border-radius: 12px;
    background: #F8FAFC;
  }

  .game-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
    border-radius: 12px;
  }

  .game-image:hover {
    transform: scale(1.05);
  }

  /* 人气值等级样式 */
  .popularity-count {
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .popularity-count.popularity-hot {
    color: #DC2626;
    text-shadow: 0 0 8px rgba(220, 38, 38, 0.3);
    animation: popularityPulse 2s infinite;
  }

  .popularity-count.popularity-high {
    color: #EA580C;
  }

  .popularity-count.popularity-medium {
    color: #CA8A04;
  }
  
  .popularity-count.popularity-low {
    color: #6B7280;
  }

  @keyframes popularityPulse {
    0%, 100% { 
      transform: scale(1); 
      opacity: 1; 
    }
    50% { 
      transform: scale(1.05); 
      opacity: 0.9; 
    }
  }
</style>
---
// 导入类型定义
import type { Game } from '../types/game';

// 通用游戏卡片组件 - 支持所有动态数据
export interface GameCardProps {
  game: {
    slug: string;
    title: string;
    description: string;
    thumbnailUrl: string;
    category: string;
    categoryName: string;
    difficulty: string;
    ageRange: string;
    minAge?: number;
    maxAge?: number;
    featured?: boolean;
    trending?: boolean;
    isNew?: boolean;
    playCount?: number;
    tags?: string[];
    developer?: string;
  };
  showPlayHistory?: boolean;
  showPopularity?: boolean;
  showDeveloper?: boolean;
}

// 组件属性接口
interface Props {
  game: Game;
  showTrending?: boolean;
  showFeatured?: boolean;
  showNew?: boolean;
  showUpdated?: boolean;
  showPlayHistory?: boolean;
  showPopularity?: boolean;
  showFavorite?: boolean;
  showDeveloper?: boolean;
  playCount?: number;
}

// 解构属性并设置默认值
const {
  game,
  showTrending = false,
  showFeatured = false,
  showNew = false,
  showUpdated = false,
  showPlayHistory = false,
  showPopularity = false,
  showFavorite = false,
  showDeveloper = false,
  playCount = 0
} = Astro.props;

// 确保游戏对象有效
const safeGame: Game = {
  slug: '',
  title: 'Unknown Game',
  description: 'No description available',
  category: 'puzzle',
  categoryName: 'Puzzle',
  difficulty: 'Easy',
  ageRange: '6-12',
  thumbnailUrl: '/images/placeholder-game.jpg',
  gameUrl: '',
  featured: false,
  trending: false,
  isNew: false,
  tags: [],
  developer: 'Unknown',
  ...game
};

// 格式化人气数字
const formatPopularity = (num: number) => {
  if (!num || num === 0) return '0';
  if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
  if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
  return num.toString();
};

// 游戏URL
const gameUrl = `/games/${safeGame.slug}`;
---

<!-- 引入游戏统计管理器 -->
<script src="/src/utils/game-stats-manager.js" is:inline></script>

<div class={`game-card ${safeGame.category}-theme animate-fadeInUp`} data-game-id={safeGame.slug}>
  <div class="game-image-container">
    <img 
      src={safeGame.thumbnailUrl} 
      alt={safeGame.title}
      class="game-image"
      loading="lazy"
      onerror="this.src='/images/logo.svg'"
    />
    
    <div class="game-overlay">
      <div class="game-badges">
        {(showTrending && safeGame.trending) && <span class="badge trending">HOT</span>}
        {(showFeatured && safeGame.featured) && <span class="badge featured">FEATURED</span>}
        {(showNew && safeGame.isNew) && <span class="badge new">NEW</span>}
        {showUpdated && <span class="badge updated">UPDATED</span>}
      </div>
      
      <a href={gameUrl} class="play-button">
        <i class="fas fa-play"></i>
        <span>Play Now</span>
      </a>
      
      {showFavorite && (
        <button class="favorite-heart-btn" data-game-slug={safeGame.slug} aria-label="Add to favorites">
          <i class="far fa-heart"></i>
        </button>
      )}
    </div>
    
    <!-- 左上角：游戏历史标签 - 动态显示 -->
    <div class="played-badge-container" data-game-slug={safeGame.slug}></div>
  </div>
  
  <div class="game-info">
    <h3 class="game-title">
      <a href={gameUrl}>{safeGame.title}</a>
    </h3>
    
    <p class="game-description">{safeGame.description}</p>
    
    <div class="game-tags">
      <span class={`category-tag ${safeGame.category}`}>{safeGame.categoryName}</span>
      {safeGame.featured && <span class="feature-tag featured">FEATURED</span>}
      {safeGame.trending && <span class="feature-tag hot">HOT</span>}
      {safeGame.isNew && <span class="feature-tag new">NEW</span>}
      <span class={`difficulty-tag ${safeGame.difficulty.toLowerCase()}`}>{safeGame.difficulty.toUpperCase()}</span>
    </div>
    
    <div class="game-stats">
      {showPopularity && (
        <div class="stat popularity-stat" data-game-slug={safeGame.slug}>
          <i class="fas fa-fire"></i>
          <span class="popularity-count">Loading...</span>
        </div>
      )}
      <div class="stat">
        <i class="fas fa-child"></i>
        <span>Ages {safeGame.ageRange}</span>
      </div>
      {showDeveloper && safeGame.developer && (
        <div class="stat">
          <i class="fas fa-user"></i>
          <span>{safeGame.developer}</span>
        </div>
      )}
    </div>
  </div>
</div>

<!-- 增强的游戏卡片管理器 - 集成统计系统 -->
<script define:vars={{ safeGame, showPlayHistory, showPopularity }}>
  // 增强的游戏卡片管理器
  class EnhancedGameCardManager {
    constructor() {
      this.storageKey = 'favoriteGames';
      this.init();
    }

    init() {
      // 立即初始化游戏卡片，不等待统计管理器
      this.initializeGameCards();
      
      // 等待统计管理器加载后再次更新（获取更精确的数据）
      if (typeof window.gameStatsManager === 'undefined') {
        setTimeout(() => {
          if (typeof window.gameStatsManager !== 'undefined') {
            this.initializeGameCards(); // 用真实数据重新更新
          }
        }, 500);
      }
      
      // 监听动态内容变化
      const observer = new MutationObserver(() => {
        this.initializeGameCards();
      });
      
      observer.observe(document.body, {
        childList: true,
        subtree: true
      });

      // 监听统计数据更新
      window.addEventListener('gameStatsUpdated', (e) => {
        this.handleStatsUpdate(e.detail);
      });
    }
    
    initializeGameCards() {
      // 初始化所有未处理的游戏卡片
      const uninitializedCards = document.querySelectorAll('.game-card[data-game-id]:not([data-enhanced-initialized])');
      
      uninitializedCards.forEach(card => {
        const gameSlug = card.dataset.gameId;
        if (!gameSlug) return;

        // 标记为已初始化
        card.setAttribute('data-enhanced-initialized', 'true');

        // 设置收藏功能
        this.setupFavoriteButton(card, gameSlug);
        
        // 更新动态数据显示
        this.updateDynamicData(card, gameSlug);
      });
    }

    setupFavoriteButton(card, gameSlug) {
      const favoriteBtn = card.querySelector('.favorite-heart-btn');
      if (favoriteBtn) {
        // 设置点击事件
        favoriteBtn.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          this.toggleFavorite(gameSlug);
        });

        // 设置初始状态
        this.updateFavoriteButtonState(favoriteBtn, this.isFavorited(gameSlug));
      }
    }

    updateDynamicData(card, gameSlug) {
      if (!window.gameStatsManager) {
        // 如果统计管理器还未加载，使用备用方案显示基础人气值
        this.updatePopularityWithFallback(card, gameSlug);
        return;
      }
      
      // 更新人气值显示 - 立即显示，不再显示Loading
      const popularityStat = card.querySelector('.popularity-stat');
      if (popularityStat) {
        const popularity = window.gameStatsManager.getPopularity(gameSlug, safeGame);
        const popularityCount = popularityStat.querySelector('.popularity-count');
        if (popularityCount) {
          popularityCount.textContent = this.formatPopularity(popularity) + ' popular';
          // 添加人气值等级样式
          this.updatePopularityStyle(popularityCount, popularity);
        }
      }

      // 更新游戏历史标签
      const badgeContainer = card.querySelector('.played-badge-container');
      if (badgeContainer && showPlayHistory) {
        const historyLabel = window.gameStatsManager.getPlayHistoryLabel(gameSlug);
        if (historyLabel) {
          const badgeClass = this.getHistoryBadgeClass(historyLabel);
          badgeContainer.innerHTML = `<div class="played-badge ${badgeClass}">${historyLabel}</div>`;
        } else {
          badgeContainer.innerHTML = '';
        }
      }
    }

    updatePopularityWithFallback(card, gameSlug) {
      // 备用方案：在统计管理器加载前显示基础人气值
      const popularityStat = card.querySelector('.popularity-stat');
      if (popularityStat) {
        const popularityCount = popularityStat.querySelector('.popularity-count');
        if (popularityCount && popularityCount.textContent === 'Loading...') {
          // 使用简化版本的基础人气值计算
          const basePopularity = this.calculateFallbackPopularity(gameSlug, safeGame);
          popularityCount.textContent = this.formatPopularity(basePopularity) + ' popular';
          this.updatePopularityStyle(popularityCount, basePopularity);
        }
      }
    }

    calculateFallbackPopularity(gameSlug, gameInfo) {
      let basePopularity = 500;
      
      // 简化版分类权重
      const categoryMultipliers = {
        'math': 1.8, 'science': 1.7, 'language': 1.6, 'puzzle': 1.4, 
        'art': 1.3, 'sports': 1.2, 'strategy': 1.5, 'adventure': 1.1, 'action': 1.0
      };
      
      basePopularity *= (categoryMultipliers[gameInfo.category] || 1.0);
      
      // 特色加成
      if (gameInfo.featured) basePopularity += 800;
      if (gameInfo.trending) basePopularity += 600;
      if (gameInfo.isNew) basePopularity += 400;
      
      // 简单的哈希随机化
      let hash = 0;
      for (let i = 0; i < gameSlug.length; i++) {
        hash = ((hash << 5) - hash) + gameSlug.charCodeAt(i);
      }
      const randomVariation = (Math.abs(hash) % 400) - 200;
      basePopularity += randomVariation;
      
      return Math.max(Math.floor(basePopularity), 300);
    }

    updatePopularityStyle(element, popularity) {
      // 根据人气值设置不同的颜色样式
      element.classList.remove('popularity-low', 'popularity-medium', 'popularity-high', 'popularity-hot');
      
      if (popularity >= 3000) {
        element.classList.add('popularity-hot');
      } else if (popularity >= 2000) {
        element.classList.add('popularity-high');
      } else if (popularity >= 1000) {
        element.classList.add('popularity-medium');
      } else {
        element.classList.add('popularity-low');
      }
    }

    getHistoryBadgeClass(label) {
      switch (label) {
        case 'Today': return 'today';
        case 'Yesterday': return 'yesterday';
        case 'A few days ago': return 'few-days-ago';
        case '2 weeks ago': return 'weeks-ago';
        case 'A month ago': return 'month-ago';
        default: return 'default';
      }
    }

    formatPopularity(num) {
      if (!num || num === 0) return '0';
      if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
      if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
      return num.toString();
    }

    handleStatsUpdate(detail) {
      // 当统计数据更新时，刷新相关游戏卡片的显示
      if (detail.gameSlug) {
        const cards = document.querySelectorAll(`[data-game-id="${detail.gameSlug}"]`);
        cards.forEach(card => {
          this.updateDynamicData(card, detail.gameSlug);
        });
      } else {
        // 全局更新
        const allCards = document.querySelectorAll('.game-card[data-game-id]');
        allCards.forEach(card => {
          const gameSlug = card.dataset.gameId;
          if (gameSlug) {
            this.updateDynamicData(card, gameSlug);
          }
        });
      }
    }

    // 检查是否已收藏
    isFavorited(gameSlug) {
      try {
        const favorites = JSON.parse(localStorage.getItem(this.storageKey) || '[]');
        return favorites.includes(gameSlug);
      } catch (error) {
        console.error('读取收藏状态失败:', error);
        return false;
      }
    }

    // 切换收藏状态
    toggleFavorite(gameSlug) {
      try {
        const favorites = JSON.parse(localStorage.getItem(this.storageKey) || '[]');
        const isFavorited = favorites.includes(gameSlug);
        
        if (isFavorited) {
          // 移除收藏
          const newFavorites = favorites.filter(id => id !== gameSlug);
          localStorage.setItem(this.storageKey, JSON.stringify(newFavorites));
          this.updateAllButtons(gameSlug, false);
          this.showNotification('Removed from favorites', 'removed');
        } else {
          // 添加收藏
          favorites.push(gameSlug);
          localStorage.setItem(this.storageKey, JSON.stringify(favorites));
          this.updateAllButtons(gameSlug, true);
          this.showNotification('Added to favorites', 'added');
        }
        
        // 触发全局事件
        window.dispatchEvent(new CustomEvent('favoritesChanged', {
          detail: { gameSlug, isFavorite: !isFavorited }
        }));
        
      } catch (error) {
        console.error('收藏操作失败:', error);
        this.showNotification('Something went wrong', 'error');
      }
    }

    // 更新所有相关按钮
    updateAllButtons(gameSlug, isFavorited) {
      const gameCards = document.querySelectorAll(`[data-game-id="${gameSlug}"]`);
      gameCards.forEach(card => {
        const favoriteBtn = card.querySelector('.favorite-heart-btn');
        if (favoriteBtn) {
          this.updateFavoriteButtonState(favoriteBtn, isFavorited);
        }
      });
    }

    // 更新收藏按钮状态
    updateFavoriteButtonState(button, isFavorited) {
      const icon = button.querySelector('i');
      if (icon) {
        icon.className = isFavorited ? 'fas fa-heart' : 'far fa-heart';
      }
      
      // 更新样式以匹配新的透明玻璃效果设计
      if (isFavorited) {
        button.style.background = 'linear-gradient(135deg, #EC4899 0%, #DB2777 100%)';
        button.style.color = 'white';
        button.style.borderColor = 'rgba(236, 72, 153, 0.6)';
        button.style.boxShadow = '0 4px 15px rgba(236, 72, 153, 0.4)';
      } else {
        button.style.background = 'rgba(0, 0, 0, 0.25)';
        button.style.color = '#FFFFFF';
        button.style.borderColor = 'rgba(255, 255, 255, 0.2)';
        button.style.boxShadow = '0 2px 8px rgba(0, 0, 0, 0.2)';
      }
      
      // 添加动画效果
      if (isFavorited) {
        button.style.transform = 'scale(1.1)';
        setTimeout(() => {
          button.style.transform = 'scale(1)';
        }, 200);
      }
    }

    // 显示通知
    showNotification(message, type) {
      // 移除已存在的通知
      const existingNotification = document.querySelector('.game-card-notification');
      if (existingNotification) {
        existingNotification.remove();
      }

      const notification = document.createElement('div');
      notification.className = `game-card-notification ${type}`;
      notification.style.cssText = `
        position: fixed !important;
        top: 2rem !important;
        right: 2rem !important;
        background: ${type === 'added' ? '#10B981' : type === 'removed' ? '#EF4444' : '#6B7280'} !important;
        color: white !important;
        padding: 0.75rem 1.25rem !important;
        border-radius: 8px !important;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;
        z-index: 10000 !important;
        font-size: 0.875rem !important;
        font-weight: 600 !important;
        transform: translateX(100%) !important;
        opacity: 0 !important;
        transition: all 0.3s ease !important;
      `;
      
      notification.textContent = message;
      document.body.appendChild(notification);
      
      // 显示动画
      setTimeout(() => {
        notification.style.transform = 'translateX(0)';
        notification.style.opacity = '1';
      }, 10);
      
      // 自动隐藏
      setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        notification.style.opacity = '0';
        setTimeout(() => {
          if (document.body.contains(notification)) {
            document.body.removeChild(notification);
          }
        }, 300);
      }, 2000);
    }
  }

  // 创建增强管理器实例
  if (typeof window.enhancedGameCardManager === 'undefined') {
    window.enhancedGameCardManager = new EnhancedGameCardManager();
  }
</script>

<style>
  /* 引入通用游戏卡片样式 */
  @import "/src/styles/game-card.css";

  /* 人气值等级样式 */
  .popularity-count {
    font-weight: 600;
    transition: all 0.3s ease;
  }

  .popularity-count.popularity-hot {
    color: #DC2626;
    text-shadow: 0 0 8px rgba(220, 38, 38, 0.3);
    animation: popularityPulse 2s infinite;
  }

  .popularity-count.popularity-high {
    color: #EA580C;
  }

  .popularity-count.popularity-medium {
    color: #CA8A04;
  }

  .popularity-count.popularity-low {
    color: #6B7280;
  }

  @keyframes popularityPulse {
    0%, 100% { 
      transform: scale(1); 
      opacity: 1; 
    }
    50% { 
      transform: scale(1.05); 
      opacity: 0.9; 
    }
  }
</style> 
---
import BaseLayout from '../layouts/BaseLayout.astro';
import type { Game, GameData } from '../types/game';
import fs from 'fs';
import path from 'path';

const seoData = {
  title: "Sports Games for Kids | Free Online Physical Education Games | EduGameHQ",
  description: "Play 30+ free sports games for kids aged 6-18. Learn teamwork, strategy, and healthy competition through fun physical education games.",
  keywords: ["sports games", "physical education games", "team sports games", "fitness games", "sports for kids", "educational sports games", "free sports games"],
  ogImage: "/images/sports-games-og.jpg"
};

// ‰ªéJSONÊñá‰ª∂ËØªÂèñÊ∏∏ÊàèÊï∞ÊçÆ - ‰øÆÂ§çË∑ØÂæÑ
const gamesDataPath = path.join(process.cwd(), 'src/data/games.json');
let allGamesData: Game[] = [];

try {
  const fileContent = fs.readFileSync(gamesDataPath, 'utf-8');
  allGamesData = JSON.parse(fileContent) as Game[];
} catch (error) {
  console.warn('Unable to read games data file:', error);
}

// Á≠õÈÄâ‰ΩìËÇ≤Ê∏∏Êàè
const sportsGames = allGamesData
  .filter(game => game.category === 'sports')
  .map(game => ({
    id: game.slug,
    title: game.title,
    description: game.description,
    image: game.thumbnailUrl || '/images/logo.svg', // ‰ΩøÁî®ÂÆûÈôÖÁº©Áï•ÂõæURLÊàñlogo‰Ωú‰∏∫Â§áÁî®
    url: `/games/${game.slug}`,
    category: game.category,
    categoryName: game.categoryName,
    ageRange: game.ageRange,
    difficulty: game.difficulty || 'Medium',
    skills: game.tags || [],
    isFeatured: game.featured || Math.random() > 0.7
  }));

// ÊåâÈöæÂ∫¶ÂàÜÁªÑÊ∏∏Êàè
const featuredGames = sportsGames.filter(game => game.isFeatured).slice(0, 4);
const easyGames = sportsGames.filter(game => game.difficulty === 'Easy');
const mediumGames = sportsGames.filter(game => game.difficulty === 'Medium');
const hardGames = sportsGames.filter(game => game.difficulty === 'Hard');

// Â¶ÇÊûúÊ≤°ÊúâÁâπËâ≤Ê∏∏ÊàèÔºå‰ªéÊâÄÊúâÊ∏∏Êàè‰∏≠ÈÄâÊã©Ââç4‰∏™‰Ωú‰∏∫ÁâπËâ≤
const displayFeaturedGames = featuredGames.length > 0 ? featuredGames : sportsGames.slice(0, 4);

// Á°Æ‰øùÊØè‰∏™ÈöæÂ∫¶Ëá≥Â∞ëÊúâ‰∏Ä‰∫õÊ∏∏ÊàèÊòæÁ§∫
const displayEasyGames = easyGames.length > 0 ? easyGames : sportsGames.filter(game => game.difficulty !== 'Hard').slice(0, 4);
const displayMediumGames = mediumGames.length > 0 ? mediumGames : sportsGames.slice(2, 6);
const displayHardGames = hardGames.length > 0 ? hardGames : sportsGames.slice(-2); // ÂèñÊúÄÂêé2‰∏™‰Ωú‰∏∫Âõ∞ÈöæÊ∏∏Êàè

// ‰ΩìËÇ≤Â≠¶‰π†Âª∫ËÆÆ
const sportsLearningTips = [
  {
    icon: 'fas fa-clock',
    title: 'Regular Practice',
    text: 'Spend 30-45 minutes daily practicing sports skills to improve coordination and fitness'
  },
  {
    icon: 'fas fa-users',
    title: 'Learn Teamwork',
    text: 'Focus on communication, cooperation, and supporting your teammates'
  },
  {
    icon: 'fas fa-handshake',
    title: 'Fair Play',
    text: 'Practice good sportsmanship and respect for rules and opponents'
  },
  {
    icon: 'fas fa-heart',
    title: 'Stay Active',
    text: 'Maintain physical health through regular exercise and healthy habits'
  }
];

// ‰ΩìËÇ≤Ê†∏ÂøÉÊäÄËÉΩ
const sportsCoreSkills = [
  {
    icon: 'fas fa-users',
    title: 'Teamwork',
    description: 'Learn to work effectively with teammates and support each other'
  },
  {
    icon: 'fas fa-crosshairs',
    title: 'Coordination',
    description: 'Develop hand-eye coordination and motor skills'
  },
  {
    icon: 'fas fa-chess',
    title: 'Strategic Thinking',
    description: 'Learn tactical thinking and game planning'
  },
  {
    icon: 'fas fa-dumbbell',
    title: 'Physical Fitness',
    description: 'Improve strength, endurance, and overall health'
  },
  {
    icon: 'fas fa-medal',
    title: 'Sportsmanship',
    description: 'Practice fair play and respect for others'
  },
  {
    icon: 'fas fa-brain',
    title: 'Mental Toughness',
    description: 'Build resilience and confidence through challenges'
  }
];
---

<BaseLayout title={seoData.title} description={seoData.description}>
  <!-- ÂºïÂÖ•Áªü‰∏ÄÊ∏∏ÊàèÂç°ÁâáÊ†∑Âºè -->
  <link rel="stylesheet" href="/src/styles/game-card.css">
  
  <main class="main-content">
    <div class="content-wrapper">
      
      <!-- 1. È°µÈù¢È°∂ÈÉ®Âå∫Âüü -->
      <section class="page-header">
        <div class="header-content">
          <div class="header-icon">
            <div class="section-icon sports">
              <i class="fas fa-running"></i>
            </div>
          </div>
          <div class="header-text">
            <h1 class="page-title">Sports Games</h1>
            <p class="page-description">
              Get active and learn through sports! Our sports games combine physical education concepts with fun gameplay, teaching teamwork, strategy, and healthy competition while developing motor skills and sportsmanship.
            </p>
          </div>
        </div>
      </section>

      <!-- 2. ÁâπËâ≤Ê∏∏ÊàèÊ®°Âùó -->
      <section class="game-module featured-module">
        <div class="module-header">
          <div class="module-icon featured-icon">
            <i class="fas fa-star"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Featured Sports Games</h2>
            <p class="module-subtitle">Top-rated sports games for active learning and fun</p>
          </div>
        </div>
        
        <div class="games-grid">
          {displayFeaturedGames.map((game, index) => {
            const popularity = Math.floor(Math.random() * 15000) + 500;
            const formatPopularity = (num) => {
              if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
              if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
              return num.toString();
            };
            
            // ÈöèÊú∫ÁîüÊàêÊ∏∏ÊàèÂéÜÂè≤
            const histories = ['Today', 'Yesterday', 'A few days ago', null];
            const randomHistory = histories[Math.floor(Math.random() * histories.length)];
            
            return (
              <div class="game-card sports-theme featured animate-fadeInUp" style={`animation-delay: ${index * 0.1}s`} data-game-id={game.id}>
                <div class="game-image-container">
                  <img src={game.image} alt={game.title} class="game-image" />
                  <div class="game-overlay">
                    {randomHistory && (
                      <div class={`played-badge ${
                        randomHistory === 'Today' ? 'today' : 
                        randomHistory === 'Yesterday' ? 'yesterday' : 
                        'few-days-ago'
                      }`}>
                        {randomHistory}
                      </div>
                    )}
                    <div class="popularity-badge">
                      üî• {formatPopularity(popularity)}
                    </div>
                    <button class="play-button" onclick={`window.location.href='${game.url}'`}>
                      <i class="fas fa-play"></i>
                      <span>Play Now</span>
                    </button>
                  </div>
                </div>
                <div class="game-info">
                  <h3 class="game-title">{game.title}</h3>
                  <div class="game-tags">
                    <span class="category-tag sports">Sports</span>
                    <span class="feature-tag featured">FEATURED</span>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </section>

      <!-- 3. ÂÆπÊòìÈöæÂ∫¶Ê∏∏ÊàèÊ®°Âùó -->
      {displayEasyGames.length > 0 && (
        <section class="game-module difficulty-module easy-module">
          <div class="module-header">
            <div class="module-icon easy-icon">
              <i class="fas fa-smile"></i>
            </div>
            <div class="module-title-group">
              <h2 class="module-title">Easy Sports Games</h2>
              <p class="module-subtitle">Perfect for beginners and young athletes</p>
            </div>
          </div>
          
          <div class="games-grid">
            {displayEasyGames.slice(0, 4).map((game, index) => {
              const popularity = game.playCount;
              const formatPopularity = (num) => {
                if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
                if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
                return num.toString();
              };
              
              return (
                <div class="game-card sports-theme animate-fadeInUp" style={`animation-delay: ${index * 0.1}s`} data-game-id={game.id}>
                  <div class="game-image-container">
                    <img src={game.image} alt={game.title} class="game-image" />
                    <div class="game-overlay">
                      <div class="popularity-badge">
                        ‚≠ê {formatPopularity(popularity)}
                      </div>
                      <button class="play-button" onclick={`window.location.href='${game.url}'`}>
                        <i class="fas fa-play"></i>
                        <span>Play Now</span>
                      </button>
                    </div>
                  </div>
                  <div class="game-info">
                    <h3 class="game-title">{game.title}</h3>
                    <div class="game-tags">
                      <span class="category-tag sports">Sports</span>
                      <span class="difficulty-tag easy">EASY</span>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </section>
      )}

      <!-- 4. ‰∏≠Á≠âÈöæÂ∫¶Ê∏∏ÊàèÊ®°Âùó -->
      {displayMediumGames.length > 0 && (
        <section class="game-module difficulty-module medium-module">
          <div class="module-header">
            <div class="module-icon medium-icon">
              <i class="fas fa-meh"></i>
            </div>
            <div class="module-title-group">
              <h2 class="module-title">Medium Sports Games</h2>
              <p class="module-subtitle">Intermediate challenges for developing athletes</p>
            </div>
          </div>
          
          <div class="games-grid">
            {displayMediumGames.slice(0, 4).map((game, index) => {
              const popularity = game.playCount;
              const formatPopularity = (num) => {
                if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
                if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
                return num.toString();
              };
              
              return (
                <div class="game-card sports-theme animate-fadeInUp" style={`animation-delay: ${index * 0.1}s`} data-game-id={game.id}>
                  <div class="game-image-container">
                    <img src={game.image} alt={game.title} class="game-image" />
                    <div class="game-overlay">
                      <div class="popularity-badge">
                        ‚≠ê {formatPopularity(popularity)}
                      </div>
                      <button class="play-button" onclick={`window.location.href='${game.url}'`}>
                        <i class="fas fa-play"></i>
                        <span>Play Now</span>
                      </button>
                    </div>
                  </div>
                  <div class="game-info">
                    <h3 class="game-title">{game.title}</h3>
                    <div class="game-tags">
                      <span class="category-tag sports">Sports</span>
                      <span class="difficulty-tag medium">MEDIUM</span>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </section>
      )}

      <!-- 5. Âõ∞ÈöæÊ∏∏ÊàèÊ®°Âùó -->
      {displayHardGames.length > 0 && (
        <section class="game-module difficulty-module hard-module">
          <div class="module-header">
            <div class="module-icon hard-icon">
              <i class="fas fa-frown"></i>
            </div>
            <div class="module-title-group">
              <h2 class="module-title">Hard Sports Games</h2>
              <p class="module-subtitle">Advanced challenges for experienced athletes</p>
            </div>
          </div>
          
          <div class="games-grid">
            {displayHardGames.map((game, index) => {
              const popularity = game.playCount;
              const formatPopularity = (num) => {
                if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
                if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
                return num.toString();
              };
              
              return (
                <div class="game-card sports-theme animate-fadeInUp" style={`animation-delay: ${index * 0.1}s`} data-game-id={game.id}>
                  <div class="game-image-container">
                    <img src={game.image} alt={game.title} class="game-image" />
                    <div class="game-overlay">
                      <div class="popularity-badge">
                        ‚≠ê {formatPopularity(popularity)}
                      </div>
                      <button class="play-button" onclick={`window.location.href='${game.url}'`}>
                        <i class="fas fa-play"></i>
                        <span>Play Now</span>
                      </button>
                    </div>
                  </div>
                  <div class="game-info">
                    <h3 class="game-title">{game.title}</h3>
                    <div class="game-tags">
                      <span class="category-tag sports">Sports</span>
                      <span class="difficulty-tag hard">HARD</span>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </section>
      )}

      <!-- 6. Â≠¶‰π†Âª∫ËÆÆÊ®°Âùó -->
      <section class="info-module tips-module">
        <div class="module-header">
          <div class="module-icon tips-icon">
            <i class="fas fa-lightbulb"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Sports Learning Tips</h2>
            <p class="module-subtitle">Essential advice for athletic development and sportsmanship</p>
          </div>
        </div>
        
        <div class="tips-grid">
          {sportsLearningTips.map((tip, index) => (
            <div class="tip-item animate-fadeInUp" style={`animation-delay: ${(index + 1) * 0.1}s`}>
              <div class="tip-icon">
                <i class={tip.icon}></i>
              </div>
              <div class="tip-content">
                <h3 class="tip-title">{tip.title}</h3>
                <p class="tip-text">{tip.text}</p>
              </div>
            </div>
          ))}
        </div>
      </section>

      <!-- 7. Ê†∏ÂøÉÊäÄËÉΩÊ®°Âùó -->
      <section class="info-module skills-module">
        <div class="module-header">
          <div class="module-icon skills-icon">
            <i class="fas fa-brain"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Core Sports Skills</h2>
            <p class="module-subtitle">Essential abilities developed through sports and physical education</p>
          </div>
        </div>
        
        <div class="skills-grid">
          {sportsCoreSkills.map((skill, index) => (
            <div class="skill-item animate-fadeInUp" style={`animation-delay: ${(index + 1) * 0.1}s`}>
              <div class="skill-icon">
                <i class={skill.icon}></i>
              </div>
              <div class="skill-content">
                <h3 class="skill-title">{skill.title}</h3>
                <p class="skill-description">{skill.description}</p>
              </div>
            </div>
          ))}
        </div>
      </section>

    </div>
  </main>
</BaseLayout>

<style>
  /* ‰ΩìËÇ≤‰∏ªÈ¢òËâ≤ÂèòÈáè */
  :root {
    --sports-primary: #DC2626;
    --sports-secondary: #B91C1C;
    --sports-light: #FEF2F2;
    --sports-gradient: linear-gradient(135deg, #DC2626 0%, #B91C1C 100%);
  }

  /* ‰∏ªË¶ÅÂ∏ÉÂ±Ä */
  .main-content {
    min-height: 100vh;
    background: linear-gradient(135deg, #FEFCFB 0%, #F8F6F3 50%, rgba(220, 38, 38, 0.03) 100%);
    padding-top: 2rem;
  }

  .content-wrapper {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
  }

  /* È°µÈù¢È°∂ÈÉ®Âå∫Âüü */
  .page-header {
    background: linear-gradient(135deg, #FFFBF5 0%, #FFF7ED 50%, rgba(220, 38, 38, 0.08) 100%);
    border-radius: 20px;
    padding: 2rem;
    margin-bottom: 2.5rem;
    border: 1px solid rgba(220, 38, 38, 0.15);
    box-shadow: 
      0 8px 32px rgba(220, 38, 38, 0.08),
      0 2px 8px rgba(0, 0, 0, 0.04);
    position: relative;
    overflow: hidden;
  }

  .page-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent 0%, rgba(220, 38, 38, 0.3) 50%, transparent 100%);
  }

  .header-content {
    display: flex;
    align-items: center;
    gap: 2rem;
    position: relative;
    z-index: 1;
  }

  .header-icon {
    flex-shrink: 0;
  }

  .section-icon {
    width: 72px;
    height: 72px;
    border-radius: 20px;
    background: linear-gradient(135deg, #DC2626 0%, #B91C1C 50%, #991B1B 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.75rem;
    box-shadow: 
      0 8px 24px rgba(220, 38, 38, 0.25),
      0 4px 12px rgba(220, 38, 38, 0.15),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
    transition: all 0.3s ease;
    position: relative;
  }

  .section-icon:hover {
    transform: translateY(-2px) scale(1.02);
    box-shadow: 
      0 12px 32px rgba(220, 38, 38, 0.3),
      0 6px 16px rgba(220, 38, 38, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
  }

  .header-text {
    flex: 1;
    text-align: left;
  }

  .page-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 2.5rem;
    font-weight: 800;
    background: var(--sports-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin: 0 0 0.75rem 0;
    line-height: 1.2;
  }

  .page-description {
    color: #64748B;
    font-size: 1.125rem;
    line-height: 1.6;
    margin: 0;
  }

  /* Ê∏∏ÊàèÊ®°Âùó */
  .game-module,
  .info-module {
    margin-bottom: 3rem;
  }

  .module-header {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    margin-bottom: 1.5rem;
    padding: 1.5rem;
    background: white;
    border-radius: 16px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    border: 1px solid #F3F4F6;
  }

  .module-icon {
    width: 48px;
    height: 48px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.25rem;
    flex-shrink: 0;
    margin-top: 2px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .featured-icon {
    background: linear-gradient(135deg, #F59E0B 0%, #D97706 100%);
  }

  .easy-icon {
    background: linear-gradient(135deg, #10B981 0%, #059669 100%);
  }

  .medium-icon {
    background: linear-gradient(135deg, #F59E0B 0%, #D97706 100%);
  }

  .hard-icon {
    background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
  }

  .tips-icon {
    background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%);
  }

  .skills-icon {
    background: linear-gradient(135deg, #EC4899 0%, #DB2777 100%);
  }

  .module-title-group {
    flex: 1;
  }

  .module-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 1.5rem;
    font-weight: 700;
    color: #1F2937;
    margin: 0 0 0.25rem 0;
    line-height: 1.3;
  }

  .module-subtitle {
    color: #6B7280;
    font-size: 0.9rem;
    margin: 0;
    line-height: 1.4;
  }

  /* Ê∏∏ÊàèÁΩëÊ†º */
  .games-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 1.5rem;
    padding: 0 1.5rem 1.5rem;
  }

  /* ‰ΩìËÇ≤‰∏ªÈ¢òÊ∏∏ÊàèÂç°Áâá */
  .game-card.sports-theme {
    border: 1px solid rgba(220, 38, 38, 0.1);
  }

  .game-card.sports-theme:hover {
    border-color: rgba(220, 38, 38, 0.2);
    box-shadow: 0 20px 40px rgba(220, 38, 38, 0.1);
  }

  /* ÂàÜÁ±ªÊ†áÁ≠æ */
  .category-tag.sports {
    background: var(--sports-gradient);
    color: white;
  }

  /* Â≠¶‰π†Âª∫ËÆÆÊ®°Âùó */
  .tips-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    padding: 0 1.5rem 1.5rem;
  }

  .tip-item {
    background: white;
    border-radius: 12px;
    padding: 1.25rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    border: 1px solid #F3F4F6;
    transition: all 0.3s ease;
    display: flex;
    gap: 0.875rem;
    align-items: flex-start;
  }

  .tip-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    border-color: rgba(139, 92, 246, 0.2);
  }

  .tip-icon {
    width: 32px;
    height: 32px;
    border-radius: 8px;
    background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 0.875rem;
    flex-shrink: 0;
    margin-top: 2px;
    box-shadow: 0 2px 6px rgba(139, 92, 246, 0.3);
  }

  .tip-content {
    flex: 1;
  }

  .tip-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 0.9rem;
    font-weight: 600;
    color: #1F2937;
    margin: 0 0 0.25rem 0;
    line-height: 1.3;
  }

  .tip-text {
    color: #6B7280;
    line-height: 1.4;
    margin: 0;
    font-size: 0.8rem;
  }

  /* Ê†∏ÂøÉÊäÄËÉΩÊ®°Âùó */
  .skills-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    padding: 0 1.5rem 1.5rem;
  }

  .skill-item {
    background: white;
    border-radius: 12px;
    padding: 1.25rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    border: 1px solid #F3F4F6;
    transition: all 0.3s ease;
    text-align: left;
    display: flex;
    gap: 0.875rem;
    align-items: flex-start;
  }

  .skill-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    border-color: rgba(236, 72, 153, 0.2);
  }

  .skill-icon {
    width: 32px;
    height: 32px;
    border-radius: 8px;
    background: linear-gradient(135deg, #EC4899 0%, #DB2777 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 0.875rem;
    flex-shrink: 0;
    margin-top: 2px;
    box-shadow: 0 2px 6px rgba(236, 72, 153, 0.3);
  }

  .skill-content {
    flex: 1;
  }

  .skill-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 0.9rem;
    font-weight: 600;
    color: #1F2937;
    margin: 0 0 0.25rem 0;
    line-height: 1.3;
  }

  .skill-description {
    color: #6B7280;
    line-height: 1.4;
    margin: 0;
    font-size: 0.8rem;
  }

  /* Âä®ÁîªÊïàÊûú */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fadeInUp {
    animation: fadeInUp 0.6s ease-out forwards;
  }

  /* ÂìçÂ∫îÂºèËÆæËÆ° */
  @media (max-width: 1024px) {
    .tips-grid {
      grid-template-columns: 1fr;
    }

    .skills-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .header-content {
      gap: 1.5rem;
    }

    .page-title {
      font-size: 2.25rem;
    }

    .page-description {
      font-size: 1rem;
    }
  }

  @media (max-width: 768px) {
    .content-wrapper {
      padding: 1rem;
    }

    .page-header {
      padding: 1.5rem;
      margin-bottom: 2rem;
      border-radius: 18px;
      text-align: left;
    }

    .header-content {
      flex-direction: column;
      align-items: flex-start;
      gap: 1.25rem;
    }

    .section-icon {
      width: 64px;
      height: 64px;
    }

    .page-title {
      font-size: 2rem;
    }

    .page-description {
      font-size: 1rem;
    }

    .module-header {
      flex-direction: column;
      gap: 0.75rem;
      padding: 1.25rem;
    }

    .module-icon {
      width: 44px;
      height: 44px;
      font-size: 1.125rem;
      margin-top: 0;
    }

    .module-title {
      font-size: 1.375rem;
    }

    .module-subtitle {
      font-size: 0.875rem;
    }

    .game-module,
    .info-module {
      margin-bottom: 2.5rem;
    }

    .tips-grid {
      grid-template-columns: 1fr;
    }

    .skills-grid {
      grid-template-columns: 1fr;
    }

    .tip-item,
    .skill-item {
      padding: 1rem;
      gap: 0.75rem;
    }
    
    .tip-icon,
    .skill-icon {
      width: 28px;
      height: 28px;
      font-size: 0.75rem;
    }

    .tip-title,
    .skill-title {
      font-size: 0.875rem;
    }

    .tip-text,
    .skill-description {
      font-size: 0.75rem;
    }
  }

  @media (max-width: 640px) {
    .page-header {
      padding: 1.25rem;
      border-radius: 16px;
    }

    .header-content {
      gap: 1rem;
    }

    .page-title {
      font-size: 1.75rem;
    }

    .section-icon {
      width: 56px;
      height: 56px;
    }

    .page-description {
      font-size: 0.95rem;
    }

    .module-title {
      font-size: 1.25rem;
    }

    .module-header {
      padding: 1rem;
    }

    .tip-item,
    .skill-item {
      padding: 0.875rem;
    }
  }
</style>


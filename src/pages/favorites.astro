---
import BaseLayout from '../layouts/BaseLayout.astro';
import GameCard from '../components/GameCard.astro';
import type { Game } from '../types/game';
import fs from 'fs';
import path from 'path';

const seoData = {
  title: "Your Favorite Games | Educational Games Collection | EduGameHQ",
  description: "Access your personalized collection of favorite educational games. Keep track of the games you love most and continue your learning journey.",
  keywords: ["favorite games", "saved games", "educational favorites", "game collection", "personalized learning", "bookmarked games"],
  ogImage: "/images/favorites-og.jpg"
};

// ‰ªéJSONÊñá‰ª∂ËØªÂèñÊ∏∏ÊàèÊï∞ÊçÆ
const gamesDataPath = path.join(process.cwd(), 'src/data/games.json');
let allGamesData: Game[] = [];

try {
  const fileContent = fs.readFileSync(gamesDataPath, 'utf-8');
  allGamesData = JSON.parse(fileContent) as Game[];
} catch (error) {
  console.warn('Unable to read games data file:', error);
}

// Ëé∑Âèñ‰∏Ä‰∫õÁ§∫‰æãÊé®ËçêÊ∏∏ÊàèÔºà‰∏çÂêåÂàÜÁ±ªÁöÑÁÉ≠Èó®Ê∏∏ÊàèÔºâ
const recommendedGames = allGamesData
  .filter(game => game.featured || game.popularity > 500)
  .slice(0, 6);
---

<BaseLayout title={seoData.title} description={seoData.description}>
  <!-- ÂºïÂÖ•Áªü‰∏ÄÊ∏∏ÊàèÂç°ÁâáÊ†∑Âºè -->
  <link rel="stylesheet" href="/src/styles/game-card.css">
  
  <!-- ‰∏ªË¶ÅÂÜÖÂÆπ -->
  <main class="main-content">
    <div class="content-wrapper">
      <!-- È°µÈù¢Â§¥ÈÉ® -->
      <section class="page-header">
        <div class="header-content">
          <div class="header-icon">
            <div class="section-icon favorites">
              <i class="fas fa-heart"></i>
            </div>
          </div>
          <div class="header-text">
            <h1 class="page-title">Your Favorites</h1>
            <p class="page-description">
              Your personal collection of favorite educational games. Keep playing the games you love most!
            </p>
          </div>
        </div>
        
        <!-- ÁÆ°ÁêÜÊìç‰Ωú -->
        <div class="header-actions">
          <button id="clearFavoritesBtn" class="clear-favorites-btn">
            <i class="fas fa-trash-alt"></i>
            <span>Clear All</span>
          </button>
        </div>
      </section>

      <!-- Êî∂ËóèÁªüËÆ° -->
      <section class="favorites-stats">
        <div class="stat-card">
          <div class="stat-icon">
            <i class="fas fa-heart"></i>
          </div>
          <div class="stat-info">
            <div class="stat-number" id="favoritesCount">0</div>
            <div class="stat-label">Favorite Games</div>
          </div>
        </div>
        
        <div class="stat-card">
          <div class="stat-icon">
            <i class="fas fa-gamepad"></i>
          </div>
          <div class="stat-info">
            <div class="stat-number" id="categoriesCount">0</div>
            <div class="stat-label">Categories</div>
          </div>
        </div>
        
        <div class="stat-card">
          <div class="stat-icon">
            <i class="fas fa-clock"></i>
          </div>
          <div class="stat-info">
            <div class="stat-number" id="totalPlayTime">0h</div>
            <div class="stat-label">Total Play Time</div>
          </div>
        </div>
      </section>

      <!-- Êî∂ËóèÊ∏∏ÊàèÂàóË°® -->
      <section class="favorites-section">
        <!-- ÊúâÊî∂ËóèÊ∏∏ÊàèÊó∂ÊòæÁ§∫ -->
        <div id="favoritesWithGames" class="favorites-content" style="display: none;">
          <div class="module-header">
            <div class="module-icon favorites-icon">
              <i class="fas fa-star"></i>
            </div>
            <div class="module-title-group">
              <h2 class="module-title">Your Favorite Games</h2>
              <p class="module-subtitle">Games you've marked as favorites</p>
            </div>
          </div>
          
          <!-- ‰ΩøÁî®Áªü‰∏ÄGameCardÁªÑ‰ª∂È¢ÑÊ∏≤ÊüìÊâÄÊúâÊ∏∏ÊàèÔºåJavaScriptÊéßÂà∂ÊòæÁ§∫/ÈöêËóè -->
          <div class="games-grid" id="favoritesGrid">
            {allGamesData.map((game) => (
              <div class="favorite-game-card" data-game-slug={game.slug} style="display: none;">
                <GameCard 
                  game={game} 
                  showPopularity={true} 
                  showFavorite={true} 
                  showDeveloper={false}
                />
              </div>
            ))}
          </div>
        </div>

        <!-- Êó†Êî∂ËóèÊ∏∏ÊàèÊó∂ÊòæÁ§∫ -->
        <div id="emptyFavorites" class="empty-state">
          <div class="empty-icon">
            <i class="fas fa-heart-broken"></i>
          </div>
          <div class="empty-content">
            <h3 class="empty-title">No Favorite Games Yet</h3>
            <p class="empty-description">
              Start exploring our educational games and click the ‚ù§Ô∏è button to add games to your favorites!
            </p>
            <div class="empty-actions">
              <a href="/" class="action-btn primary">
                <i class="fas fa-home"></i>
                Browse Games
              </a>
              <a href="/trending" class="action-btn secondary">
                <i class="fas fa-fire"></i>
                Trending Games
              </a>
            </div>
          </div>
        </div>
      </section>

      <!-- Êé®ËçêÊ∏∏Êàè -->
      <section class="recommendations-section">
        <div class="module-header">
          <div class="module-icon recommendations-icon">
            <i class="fas fa-lightbulb"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Recommended for You</h2>
            <p class="module-subtitle">Games similar to your favorites</p>
          </div>
        </div>
        
        <div class="games-grid">
          {recommendedGames.map((game) => (
            <GameCard game={game} showPlayHistory={true} showPopularity={true} showFavorite={true} />
          ))}
        </div>
      </section>
    </div>
  </main>

  <!-- ÁÆÄÂåñÁöÑÊî∂ËóèÁÆ°ÁêÜJavaScript -->
  <script is:inline>
    // ÊûÅÁÆÄÁöÑÊî∂ËóèÁÆ°ÁêÜÁ±ª - Âè™Ë¥üË¥£ÊòæÁ§∫/ÈöêËóèÈ¢ÑÊ∏≤ÊüìÁöÑGameCard
    class SimpleFavoritesManager {
      constructor() {
        this.favoriteGameIds = new Set();
        this.init();
      }

      // ÂàùÂßãÂåñ
      init() {
        this.loadFavorites();
        this.updateDisplay();
        this.initializeEventListeners();
        console.log('‚úÖ Êî∂ËóèÁÆ°ÁêÜÂô®ÂàùÂßãÂåñÂÆåÊàê');
      }

      // ‰ªélocalStorageÂä†ËΩΩÊî∂ËóèÂàóË°®
      loadFavorites() {
        try {
          const favorites = JSON.parse(localStorage.getItem('favoriteGames') || '[]');
          this.favoriteGameIds = new Set(favorites);
        } catch (error) {
          console.error('Âä†ËΩΩÊî∂ËóèÂàóË°®Â§±Ë¥•:', error);
          this.favoriteGameIds = new Set();
        }
      }

      // Êõ¥Êñ∞ÊòæÁ§∫Áä∂ÊÄÅ
      updateDisplay() {
        const favoritesWithGames = document.getElementById('favoritesWithGames');
        const emptyFavorites = document.getElementById('emptyFavorites');
        const favoriteCards = document.querySelectorAll('.favorite-game-card');

        // ÈöêËóèÊâÄÊúâÊ∏∏ÊàèÂç°Áâá
        favoriteCards.forEach(card => {
          card.style.display = 'none';
        });

        // ÊòæÁ§∫Êî∂ËóèÁöÑÊ∏∏ÊàèÂç°Áâá
        let visibleCount = 0;
        this.favoriteGameIds.forEach(gameSlug => {
          const card = document.querySelector(`[data-game-slug="${gameSlug}"]`);
          if (card) {
            card.style.display = 'block';
            visibleCount++;
          }
        });

        // Ê†πÊçÆÊòØÂê¶ÊúâÊî∂ËóèÊ∏∏ÊàèÊòæÁ§∫‰∏çÂêåÂÜÖÂÆπ
        if (visibleCount > 0) {
          favoritesWithGames.style.display = 'block';
          emptyFavorites.style.display = 'none';
        } else {
          favoritesWithGames.style.display = 'none';
          emptyFavorites.style.display = 'block';
        }

        // Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
        this.updateStats();
      }

      // Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
      updateStats() {
        const favoritesCount = this.favoriteGameIds.size;
        
        // ËÆ°ÁÆóÊî∂ËóèÊ∏∏ÊàèÁöÑÂàÜÁ±ªÊï∞Èáè
        const categories = new Set();
        this.favoriteGameIds.forEach(gameSlug => {
          const card = document.querySelector(`[data-game-slug="${gameSlug}"]`);
          if (card) {
            // ‰ªéGameCard‰∏≠ÊèêÂèñÂàÜÁ±ª‰ø°ÊÅØÔºàÈÄöËøáÊü•Êâæcategory-tagÔºâ
            const categoryTag = card.querySelector('.category-tag');
            if (categoryTag) {
              categories.add(categoryTag.textContent.trim());
            }
          }
        });

        // Êõ¥Êñ∞ÁªüËÆ°ÊòæÁ§∫
        document.getElementById('favoritesCount').textContent = favoritesCount;
        document.getElementById('categoriesCount').textContent = categories.size;
        document.getElementById('totalPlayTime').textContent = Math.floor(favoritesCount * 0.5) + 'h';
      }

      // Ê∏ÖÁ©∫ÊâÄÊúâÊî∂Ëóè
      clearAllFavorites() {
        if (confirm('Á°ÆÂÆöË¶ÅÊ∏ÖÁ©∫ÊâÄÊúâÊî∂ËóèÊ∏∏ÊàèÂêóÔºüÊ≠§Êìç‰ΩúÊó†Ê≥ïÊí§ÈîÄ„ÄÇ')) {
          this.favoriteGameIds.clear();
          localStorage.setItem('favoriteGames', JSON.stringify([]));
          
          this.updateDisplay();
          
          // Ëß¶ÂèëÂÖ®Â±ÄÊî∂ËóèÂèòÂåñ‰∫ã‰ª∂
          window.dispatchEvent(new CustomEvent('favoritesChanged'));
          
          console.log('üóëÔ∏è Â∑≤Ê∏ÖÁ©∫ÊâÄÊúâÊî∂ËóèÊ∏∏Êàè');
        }
      }

      // ÂàùÂßãÂåñ‰∫ã‰ª∂ÁõëÂê¨Âô®
      initializeEventListeners() {
        // Ê∏ÖÁ©∫Êî∂ËóèÊåâÈíÆ
        const clearBtn = document.getElementById('clearFavoritesBtn');
        if (clearBtn) {
          clearBtn.addEventListener('click', () => this.clearAllFavorites());
        }

        // ÁõëÂê¨Êî∂ËóèÁä∂ÊÄÅÂèòÂåñÔºàÊù•Ëá™GameCardÁªÑ‰ª∂Ôºâ
        window.addEventListener('favoritesChanged', () => {
          this.loadFavorites();
          this.updateDisplay();
        });
      }
    }

    // È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
    document.addEventListener('DOMContentLoaded', function() {
      window.simpleFavoritesManager = new SimpleFavoritesManager();
    });
  </script>
</BaseLayout>

<style>
  /* ‰∏ªË¶ÅÂÜÖÂÆπÂå∫Âüü */
  .main-content {
    width: 100%;
    background: #FEFCFB;
    min-height: 100vh;
  }

  .content-wrapper {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
  }

  /* È°µÈù¢Â§¥ÈÉ® - Á∫¢Ëâ≤‰∏ªÈ¢ò */
  .page-header {
    background: linear-gradient(135deg, #FEF2F2 0%, #FEE2E2 50%, #DC2626 100%);
    border-radius: 20px;
    padding: 3rem;
    margin-bottom: 3rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 4px 14px 0 rgba(220, 38, 38, 0.2);
    position: relative;
    overflow: hidden;
  }

  .page-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.2), transparent 50%);
  }

  .header-content {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    position: relative;
    z-index: 1;
  }

  .header-icon {
    flex-shrink: 0;
  }

  .section-icon {
    width: 64px;
    height: 64px;
    border-radius: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.5rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .section-icon.favorites {
    background: linear-gradient(135deg, #DC2626, #B91C1C);
  }

  .header-text {
    flex: 1;
  }

  .page-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 2.5rem;
    font-weight: 800;
    margin: 0 0 0.5rem 0;
    color: #991B1B;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    line-height: 1.2;
  }

  .page-description {
    font-size: 1.125rem;
    color: #7F1D1D;
    margin: 0;
    font-weight: 500;
    line-height: 1.6;
  }

  .header-actions {
    position: relative;
    z-index: 1;
  }

  .clear-favorites-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: rgba(255, 255, 255, 0.9);
    color: #DC2626;
    border: 2px solid rgba(220, 38, 38, 0.2);
    padding: 0.75rem 1.5rem;
    border-radius: 12px;
    font-weight: 600;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .clear-favorites-btn:hover {
    background: #DC2626;
    color: white;
    border-color: #DC2626;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);
  }

  /* Êî∂ËóèÁªüËÆ° */
  .favorites-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-bottom: 3rem;
  }

  .stat-card {
    background: white;
    border-radius: 16px;
    padding: 2rem;
    display: flex;
    align-items: center;
    gap: 1.5rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    border: 1px solid #F3F4F6;
    transition: all 0.3s ease;
  }

  .stat-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(220, 38, 38, 0.15);
    border-color: rgba(220, 38, 38, 0.25);
  }

  .stat-icon {
    width: 56px;
    height: 56px;
    border-radius: 12px;
    background: linear-gradient(135deg, #DC2626, #B91C1C);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.25rem;
    box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);
    flex-shrink: 0;
  }

  .stat-info {
    flex: 1;
  }

  .stat-number {
    font-size: 2rem;
    font-weight: 800;
    color: #1F2937;
    line-height: 1;
    font-family: 'Space Grotesk', sans-serif;
  }

  .stat-label {
    font-size: 0.9rem;
    color: #6B7280;
    font-weight: 600;
    margin-top: 0.25rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  /* Êî∂ËóèÊ∏∏ÊàèÂå∫Âüü */
  .favorites-section {
    margin-bottom: 3rem;
  }

  .favorites-content {
    background: white;
    border-radius: 20px;
    padding: 2rem;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
    border: 1px solid #E5E7EB;
  }

  /* Ê®°ÂùóÂ§¥ÈÉ® */
  .module-header {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    margin-bottom: 2rem;
    padding-bottom: 1.5rem;
    border-bottom: 2px solid #F3F4F6;
  }

  .module-icon {
    width: 56px;
    height: 56px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.25rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    flex-shrink: 0;
  }

  .favorites-icon {
    background: linear-gradient(135deg, #DC2626, #B91C1C);
  }

  .recommendations-icon {
    background: linear-gradient(135deg, #F59E0B, #D97706);
  }

  .module-title-group {
    flex: 1;
  }

  .module-title {
    font-size: 1.75rem;
    font-weight: 700;
    color: #1F2937;
    margin: 0 0 0.25rem 0;
    font-family: 'Space Grotesk', sans-serif;
  }

  .module-subtitle {
    font-size: 1rem;
    color: #6B7280;
    margin: 0;
    font-weight: 500;
  }

  /* Ê∏∏ÊàèÁΩëÊ†º */
  .games-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 1.5rem;
  }

  /* ÁÆÄÂåñfavorite-game-cardÊ†∑ÂºèÔºåÂõ†‰∏∫ÂÜÖÈÉ®‰ΩøÁî®GameCardÁªÑ‰ª∂ */
  .favorite-game-card {
    /* GameCardÁªÑ‰ª∂Ëá™Â∏¶Ê†∑ÂºèÔºåËøôÈáå‰∏çÈúÄË¶ÅÈ¢ùÂ§ñÊ†∑Âºè */
  }

  /* Á©∫Áä∂ÊÄÅ */
  .empty-state {
    background: white;
    border-radius: 20px;
    padding: 4rem 2rem;
    text-align: center;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
    border: 1px solid #E5E7EB;
  }

  .empty-icon {
    width: 96px;
    height: 96px;
    margin: 0 auto 2rem;
    border-radius: 50%;
    background: linear-gradient(135deg, #FEE2E2, #FECACA);
    display: flex;
    align-items: center;
    justify-content: center;
    color: #DC2626;
    font-size: 2.5rem;
    box-shadow: 0 8px 24px rgba(220, 38, 38, 0.15);
  }

  .empty-title {
    font-size: 1.75rem;
    font-weight: 700;
    color: #1F2937;
    margin: 0 0 1rem 0;
    font-family: 'Space Grotesk', sans-serif;
  }

  .empty-description {
    font-size: 1.125rem;
    color: #6B7280;
    line-height: 1.7;
    margin: 0 0 2rem 0;
    max-width: 480px;
    margin-left: auto;
    margin-right: auto;
  }

  .empty-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.875rem 1.75rem;
    border-radius: 12px;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.3s ease;
    font-size: 1rem;
  }

  .action-btn.primary {
    background: linear-gradient(135deg, #DC2626, #B91C1C);
    color: white;
    box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);
  }

  .action-btn.primary:hover {
    background: linear-gradient(135deg, #B91C1C, #991B1B);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(220, 38, 38, 0.4);
  }

  .action-btn.secondary {
    background: white;
    color: #DC2626;
    border: 2px solid #DC2626;
  }

  .action-btn.secondary:hover {
    background: #DC2626;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);
  }

  /* Êé®ËçêÊ∏∏ÊàèÂå∫Âüü */
  .recommendations-section {
    background: white;
    border-radius: 20px;
    padding: 2rem;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
    border: 1px solid #E5E7EB;
  }

  /* ÂìçÂ∫îÂºèËÆæËÆ° */
  @media (max-width: 1024px) {
    .content-wrapper {
      padding: 1.5rem;
    }
    
    .page-header {
      padding: 2rem;
      flex-direction: column;
      gap: 1.5rem;
      text-align: center;
    }
    
    .header-content {
      flex-direction: column;
      gap: 1rem;
    }
  }

  @media (max-width: 768px) {
    .content-wrapper {
      padding: 1rem;
    }
    
    .page-header {
      padding: 1.5rem;
    }
    
    .page-title {
      font-size: 2rem;
    }
    
    .favorites-stats {
      grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
      gap: 1rem;
    }
    
    .stat-card {
      padding: 1.5rem;
    }
    
    .stat-icon {
      width: 48px;
      height: 48px;
      font-size: 1rem;
    }
    
    .stat-number {
      font-size: 1.5rem;
    }
    
    .games-grid {
      grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
      gap: 1rem;
    }
    
    .favorites-content, .recommendations-section {
      padding: 1.5rem;
    }
    
    .empty-state {
      padding: 3rem 1.5rem;
    }
    
    .empty-actions {
      flex-direction: column;
      align-items: center;
    }
    
    .action-btn {
      width: 100%;
      max-width: 240px;
      justify-content: center;
    }
  }

  @media (max-width: 480px) {
    .games-grid {
      grid-template-columns: 1fr;
    }
    
    .favorites-stats {
      grid-template-columns: 1fr;
    }
  }
</style> 
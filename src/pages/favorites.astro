---
import BaseLayout from '../layouts/BaseLayout.astro';
import GameCard from '../components/GameCard.astro';
import type { Game } from '../types/game';
import fs from 'fs';
import path from 'path';

const seoData = {
  title: "Your Favorite Games | Educational Games Collection | EduGameHQ",
  description: "Access your personalized collection of favorite educational games. Keep track of the games you love most and continue your learning journey.",
  keywords: ["favorite games", "saved games", "educational favorites", "game collection", "personalized learning", "bookmarked games"],
  ogImage: "/images/favorites-og.jpg"
};

// ‰ªéJSONÊñá‰ª∂ËØªÂèñÊ∏∏ÊàèÊï∞ÊçÆ
const gamesDataPath = path.join(process.cwd(), 'src/data/games.json');
let allGamesData: Game[] = [];

try {
  const fileContent = fs.readFileSync(gamesDataPath, 'utf-8');
  allGamesData = JSON.parse(fileContent) as Game[];
} catch (error) {
  console.warn('Unable to read games data file:', error);
}

// Ëé∑Âèñ‰∏Ä‰∫õÁ§∫‰æãÊé®ËçêÊ∏∏ÊàèÔºà‰∏çÂêåÂàÜÁ±ªÁöÑÁÉ≠Èó®Ê∏∏ÊàèÔºâ
const recommendedGames = allGamesData
  .filter(game => game.featured || game.popularity > 500)
  .slice(0, 6);
---

<BaseLayout title={seoData.title} description={seoData.description}>
  <!-- ÂºïÂÖ•Áªü‰∏ÄÊ∏∏ÊàèÂç°ÁâáÊ†∑Âºè -->
  <link rel="stylesheet" href="/src/styles/game-card.css">
  
  <!-- ‰∏ªË¶ÅÂÜÖÂÆπ -->
  <main class="main-content">
    <div class="content-wrapper">
      <!-- È°µÈù¢Â§¥ÈÉ® -->
      <section class="page-header">
        <div class="header-content">
          <div class="header-icon">
            <div class="section-icon favorites">
              <i class="fas fa-heart"></i>
            </div>
          </div>
          <div class="header-text">
            <h1 class="page-title">Your Favorites</h1>
            <p class="page-description">
              Your personal collection of favorite educational games. Keep playing the games you love most!
            </p>
          </div>
        </div>
        
        <!-- ÁÆ°ÁêÜÊìç‰Ωú -->
        <div class="header-actions">
          <button id="clearFavoritesBtn" class="clear-favorites-btn">
            <i class="fas fa-trash-alt"></i>
            <span>Clear All</span>
          </button>
        </div>
      </section>

      <!-- Êî∂ËóèÁªüËÆ° -->
      <section class="favorites-stats">
        <div class="stat-card">
          <div class="stat-icon">
            <i class="fas fa-heart"></i>
          </div>
          <div class="stat-info">
            <div class="stat-number" id="favoritesCount">0</div>
            <div class="stat-label">Favorite Games</div>
          </div>
        </div>
        
        <div class="stat-card">
          <div class="stat-icon">
            <i class="fas fa-gamepad"></i>
          </div>
          <div class="stat-info">
            <div class="stat-number" id="categoriesCount">0</div>
            <div class="stat-label">Categories</div>
          </div>
        </div>
        
        <div class="stat-card">
          <div class="stat-icon">
            <i class="fas fa-clock"></i>
          </div>
          <div class="stat-info">
            <div class="stat-number" id="totalPlayTime">0h</div>
            <div class="stat-label">Total Play Time</div>
          </div>
        </div>
      </section>

      <!-- Êî∂ËóèÊ∏∏ÊàèÂàóË°® -->
      <section class="favorites-section">
        <!-- ÊúâÊî∂ËóèÊ∏∏ÊàèÊó∂ÊòæÁ§∫ -->
        <div id="favoritesWithGames" class="favorites-content" style="display: none;">
          <div class="module-header">
            <div class="module-icon favorites-icon">
              <i class="fas fa-star"></i>
            </div>
            <div class="module-title-group">
              <h2 class="module-title">Your Favorite Games</h2>
              <p class="module-subtitle">Games you've marked as favorites</p>
            </div>
          </div>
          
          <div class="games-grid" id="favoritesGrid">
            <!-- Âä®ÊÄÅÁîüÊàêÁöÑÊî∂ËóèÊ∏∏ÊàèÂç°ÁâáÂ∞ÜÂú®ËøôÈáåÊòæÁ§∫ -->
          </div>
        </div>

        <!-- Êó†Êî∂ËóèÊ∏∏ÊàèÊó∂ÊòæÁ§∫ -->
        <div id="emptyFavorites" class="empty-state">
          <div class="empty-icon">
            <i class="fas fa-heart-broken"></i>
          </div>
          <div class="empty-content">
            <h3 class="empty-title">No Favorite Games Yet</h3>
            <p class="empty-description">
              Start exploring our educational games and click the ‚ù§Ô∏è button to add games to your favorites!
            </p>
            <div class="empty-actions">
              <a href="/" class="action-btn primary">
                <i class="fas fa-home"></i>
                Browse Games
              </a>
              <a href="/trending" class="action-btn secondary">
                <i class="fas fa-fire"></i>
                Trending Games
              </a>
            </div>
          </div>
        </div>
      </section>

      <!-- Êé®ËçêÊ∏∏Êàè -->
      <section class="recommendations-section">
        <div class="module-header">
          <div class="module-icon recommendations-icon">
            <i class="fas fa-lightbulb"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Recommended for You</h2>
            <p class="module-subtitle">Games similar to your favorites</p>
          </div>
        </div>
        
        <div class="games-grid">
          {recommendedGames.map((game) => (
            <GameCard game={game} showPlayHistory={true} showPopularity={true} showFavorite={true} />
          ))}
        </div>
      </section>
    </div>
  </main>

  <!-- Â∞ÜÊúçÂä°Âô®Á´ØÊ∏∏ÊàèÊï∞ÊçÆ‰º†ÈÄíÁªôÂÆ¢Êà∑Á´Ø -->
  <script is:inline define:vars={{ allGamesData }}>
    // Â∞ÜÊúçÂä°Âô®Á´ØÁöÑÊ∏∏ÊàèÊï∞ÊçÆËÆæÁΩÆ‰∏∫ÂÖ®Â±ÄÂèòÈáèÔºå‰æõJavaScript‰ΩøÁî®
    window.GAMES_DATA = allGamesData;
  </script>

  <!-- Êî∂ËóèÁÆ°ÁêÜÁöÑJavaScript -->
  <script is:inline>
    // ÁÆÄÂåñÁöÑÊî∂ËóèÁÆ°ÁêÜÁ±ª
    class FavoritesManager {
      constructor() {
        this.allGames = window.GAMES_DATA || [];
        this.favoriteGameIds = new Set();
        this.init();
      }

      // ÂàùÂßãÂåñ
      init() {
        this.loadFavorites();
        this.updateStats();
        this.renderFavorites();
        this.initializeEventListeners();
        console.log('‚úÖ Êî∂ËóèÁÆ°ÁêÜÂô®ÂàùÂßãÂåñÂÆåÊàê');
      }

      // ‰ªélocalStorageÂä†ËΩΩÊî∂ËóèÂàóË°®
      loadFavorites() {
        try {
          const favorites = JSON.parse(localStorage.getItem('favoriteGames') || '[]');
          this.favoriteGameIds = new Set(favorites);
        } catch (error) {
          console.error('Âä†ËΩΩÊî∂ËóèÂàóË°®Â§±Ë¥•:', error);
          this.favoriteGameIds = new Set();
        }
      }

      // Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
      updateStats() {
        const favoritesCount = this.favoriteGameIds.size;
        const categories = new Set();
        
        this.favoriteGameIds.forEach(gameId => {
          const game = this.allGames.find(g => g.slug === gameId);
          if (game) categories.add(game.category);
        });

        document.getElementById('favoritesCount').textContent = favoritesCount;
        document.getElementById('categoriesCount').textContent = categories.size;
        document.getElementById('totalPlayTime').textContent = `${Math.floor(favoritesCount * 15 / 60)}h`;
      }

      // Ê∏≤ÊüìÊî∂ËóèÊ∏∏ÊàèÂàóË°®
      renderFavorites() {
        const favoritesGrid = document.getElementById('favoritesGrid');
        const favoritesWithGames = document.getElementById('favoritesWithGames');
        const emptyFavorites = document.getElementById('emptyFavorites');

        if (this.favoriteGameIds.size === 0) {
          favoritesWithGames.style.display = 'none';
          emptyFavorites.style.display = 'block';
          return;
        }

        favoritesWithGames.style.display = 'block';
        emptyFavorites.style.display = 'none';

        // Ê∏≤ÊüìÊî∂ËóèÁöÑÊ∏∏Êàè
        const favoriteGames = this.allGames.filter(game => this.favoriteGameIds.has(game.slug));
        favoritesGrid.innerHTML = favoriteGames.map(game => this.createGameCardHTML(game)).join('');
        
        // ÈáçÊñ∞ÂàùÂßãÂåñÊî∂ËóèÊåâÈíÆ
        this.initializeFavoriteButtons();
      }

      // ÂàõÂª∫Ê∏∏ÊàèÂç°ÁâáHTMLÔºà‰ΩøÁî®‰∏éGameCardÁªÑ‰ª∂Áõ∏ÂêåÁöÑÁªìÊûÑÔºâ
      createGameCardHTML(game) {
        const popularity = game.popularity || Math.floor(Math.random() * 1000) + 100;
        const formatPopularity = (num) => {
          if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
          if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
          return num.toString();
        };

        return `
          <div class="game-card animate-fadeInUp" data-game-id="${game.slug}">
            <div class="game-image-container">
              <img src="${game.thumbnailUrl || `/images/games/${game.category}/${game.slug}.svg`}" alt="${game.title}" class="game-image" loading="lazy" />
              <div class="game-overlay">
                <button class="play-button" onclick="window.location.href='/games/${game.slug}'">
                  <i class="fas fa-play"></i>
                  <span>Play Now</span>
                </button>
              </div>
              <div class="popularity-badge">
                ${popularity > 5000 ? 'üî•' : popularity > 1000 ? '‚≠ê' : ''} ${formatPopularity(popularity)}
              </div>
              <button class="favorite-heart-btn active" data-game-slug="${game.slug}" title="Remove from favorites">
                <i class="fas fa-heart"></i>
              </button>
            </div>
            <div class="game-info">
              <h3 class="game-title">${game.title}</h3>
              <div class="game-tags">
                <span class="category-tag ${game.category}">${game.categoryName}</span>
                <span class="difficulty-tag ${(game.difficulty || 'medium').toLowerCase()}">${game.difficulty || 'Medium'}</span>
              </div>
            </div>
          </div>
        `;
      }

      // ÂàùÂßãÂåñÊî∂ËóèÊåâÈíÆ
      initializeFavoriteButtons() {
        const favoriteButtons = document.querySelectorAll('.favorite-heart-btn');
        favoriteButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            const gameSlug = button.getAttribute('data-game-slug');
            this.removeFavorite(gameSlug);
          });
        });
      }

      // ÁßªÈô§Êî∂Ëóè
      removeFavorite(gameSlug) {
        this.favoriteGameIds.delete(gameSlug);
        localStorage.setItem('favoriteGames', JSON.stringify([...this.favoriteGameIds]));
        
        this.updateStats();
        this.renderFavorites();
        
        // Ëß¶ÂèëÊî∂ËóèÁä∂ÊÄÅÂèòÂåñ‰∫ã‰ª∂
        window.dispatchEvent(new CustomEvent('favoritesChanged', {
          detail: { gameSlug, isFavorite: false }
        }));
        
        console.log(`‚ùå Â∑≤‰ªéÊî∂Ëóè‰∏≠ÁßªÈô§: ${gameSlug}`);
      }

      // Ê∏ÖÁ©∫ÊâÄÊúâÊî∂Ëóè
      clearAllFavorites() {
        if (confirm('Á°ÆÂÆöË¶ÅÊ∏ÖÁ©∫ÊâÄÊúâÊî∂ËóèÊ∏∏ÊàèÂêóÔºüÊ≠§Êìç‰ΩúÊó†Ê≥ïÊí§ÈîÄ„ÄÇ')) {
          this.favoriteGameIds.clear();
          localStorage.setItem('favoriteGames', JSON.stringify([]));
          
          this.updateStats();
          this.renderFavorites();
          
          console.log('üóëÔ∏è Â∑≤Ê∏ÖÁ©∫ÊâÄÊúâÊî∂ËóèÊ∏∏Êàè');
        }
      }

      // ÂàùÂßãÂåñ‰∫ã‰ª∂ÁõëÂê¨Âô®
      initializeEventListeners() {
        // Ê∏ÖÁ©∫Êî∂ËóèÊåâÈíÆ
        const clearBtn = document.getElementById('clearFavoritesBtn');
        if (clearBtn) {
          clearBtn.addEventListener('click', () => this.clearAllFavorites());
        }

        // ÁõëÂê¨Êî∂ËóèÁä∂ÊÄÅÂèòÂåñ
        window.addEventListener('favoritesChanged', () => {
          this.loadFavorites();
          this.updateStats();
          this.renderFavorites();
        });
      }
    }

    // È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
    document.addEventListener('DOMContentLoaded', function() {
      window.favoritesManager = new FavoritesManager();
    });
  </script>
</BaseLayout>

<style>
  /* ‰∏ªË¶ÅÂÜÖÂÆπÂå∫Âüü */
  .main-content {
    width: 100%;
    background: #FEFCFB;
    min-height: 100vh;
  }

  .content-wrapper {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
  }

  /* È°µÈù¢Â§¥ÈÉ® - Á∫¢Ëâ≤‰∏ªÈ¢ò */
  .page-header {
    background: linear-gradient(135deg, #FEF2F2 0%, #FEE2E2 50%, #DC2626 100%);
    border-radius: 20px;
    padding: 3rem;
    margin-bottom: 3rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 4px 14px 0 rgba(220, 38, 38, 0.2);
    position: relative;
    overflow: hidden;
  }

  .page-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.2), transparent 50%);
  }

  .header-content {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    position: relative;
    z-index: 1;
  }

  .header-icon {
    flex-shrink: 0;
  }

  .section-icon {
    width: 64px;
    height: 64px;
    border-radius: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.5rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .section-icon.favorites {
    background: linear-gradient(135deg, #DC2626, #B91C1C);
  }

  .header-text {
    flex: 1;
  }

  .page-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 2.5rem;
    font-weight: 800;
    margin: 0 0 0.5rem 0;
    color: #991B1B;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    line-height: 1.2;
  }

  .page-description {
    font-size: 1.125rem;
    color: #6B7280;
    margin: 0;
    font-weight: 500;
    line-height: 1.5;
  }

  .header-actions {
    position: relative;
    z-index: 1;
  }

  .clear-favorites-btn {
    background: rgba(255, 255, 255, 0.9);
    color: #DC2626;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 12px;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .clear-favorites-btn:hover {
    background: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  /* Êî∂ËóèÁªüËÆ° */
  .favorites-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1.5rem;
    margin-bottom: 3rem;
  }

  .stat-card {
    background: white;
    padding: 1.5rem;
    border-radius: 16px;
    display: flex;
    align-items: center;
    gap: 1rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    border: 1px solid #F3F4F6;
    transition: all 0.3s ease;
  }

  .stat-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
  }

  .stat-icon {
    width: 48px;
    height: 48px;
    border-radius: 12px;
    background: linear-gradient(135deg, #DC2626, #B91C1C);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.25rem;
    flex-shrink: 0;
  }

  .stat-info {
    flex: 1;
  }

  .stat-number {
    font-size: 1.5rem;
    font-weight: 800;
    color: #1F2937;
    margin-bottom: 0.25rem;
  }

  .stat-label {
    color: #6B7280;
    font-weight: 500;
    font-size: 0.875rem;
  }

  /* Ê®°ÂùóÂ§¥ÈÉ® */
  .module-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 2rem;
    padding: 1.5rem;
    background: white;
    border-radius: 16px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    border: 1px solid #F3F4F6;
  }

  .module-icon {
    width: 48px;
    height: 48px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.25rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    flex-shrink: 0;
  }

  .favorites-icon {
    background: linear-gradient(135deg, #DC2626, #B91C1C);
  }

  .recommendations-icon {
    background: linear-gradient(135deg, #F59E0B, #D97706);
  }

  .module-title-group {
    flex: 1;
  }

  .module-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 1.5rem;
    font-weight: 700;
    color: #1F2937;
    margin: 0 0 0.25rem 0;
    line-height: 1.3;
  }

  .module-subtitle {
    color: #6B7280;
    font-size: 0.9rem;
    margin: 0;
    line-height: 1.4;
  }

  /* Á©∫Áä∂ÊÄÅ */
  .empty-state {
    text-align: center;
    padding: 4rem 2rem;
    background: white;
    border-radius: 20px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    border: 1px solid #F3F4F6;
  }

  .empty-icon {
    font-size: 4rem;
    color: #DC2626;
    margin-bottom: 1.5rem;
    opacity: 0.7;
  }

  .empty-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 1.5rem;
    font-weight: 700;
    color: #1F2937;
    margin: 0 0 1rem 0;
  }

  .empty-description {
    color: #6B7280;
    font-size: 1rem;
    line-height: 1.6;
    margin: 0 0 2rem 0;
    max-width: 500px;
    margin-left: auto;
    margin-right: auto;
  }

  .empty-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .action-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border-radius: 12px;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.3s ease;
    font-size: 0.875rem;
  }

  .action-btn.primary {
    background: linear-gradient(135deg, #DC2626, #B91C1C);
    color: white;
    box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);
  }

  .action-btn.primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(220, 38, 38, 0.4);
  }

  .action-btn.secondary {
    background: white;
    color: #6B7280;
    border: 1px solid #E5E7EB;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .action-btn.secondary:hover {
    background: #F9FAFB;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }

  /* Êî∂ËóèÂíåÊé®ËçêÂå∫Âüü */
  .favorites-section,
  .recommendations-section {
    margin-bottom: 3rem;
  }

  /* Âä®ÁîªÊïàÊûú */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fadeInUp {
    animation: fadeInUp 0.6s ease-out forwards;
  }

  /* ÂìçÂ∫îÂºèËÆæËÆ° */
  @media (max-width: 1024px) {
    .page-header {
      flex-direction: column;
      gap: 1.5rem;
      text-align: center;
    }

    .header-content {
      flex-direction: column;
      text-align: center;
    }

    .favorites-stats {
      grid-template-columns: repeat(3, 1fr);
      gap: 1rem;
    }

    .stat-card {
      padding: 1rem;
    }

    .stat-icon {
      width: 40px;
      height: 40px;
      font-size: 1rem;
    }

    .stat-number {
      font-size: 1.25rem;
    }
  }

  @media (max-width: 768px) {
    .content-wrapper {
      padding: 1rem;
    }

    .page-header {
      padding: 2rem 1.5rem;
      border-radius: 16px;
    }

    .page-title {
      font-size: 2rem;
    }

    .page-description {
      font-size: 1rem;
    }

    .favorites-stats {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .stat-card {
      padding: 1.25rem;
    }

    .empty-state {
      padding: 3rem 1.5rem;
      border-radius: 16px;
    }

    .empty-icon {
      font-size: 3rem;
    }

    .empty-title {
      font-size: 1.25rem;
    }

    .empty-description {
      font-size: 0.9rem;
    }

    .empty-actions {
      flex-direction: column;
      align-items: center;
    }

    .action-btn {
      width: 100%;
      max-width: 280px;
      justify-content: center;
    }

    .module-header {
      flex-direction: column;
      text-align: center;
      gap: 0.75rem;
      padding: 1.25rem;
    }

    .module-icon {
      width: 44px;
      height: 44px;
      font-size: 1.125rem;
    }

    .module-title {
      font-size: 1.375rem;
    }

    .module-subtitle {
      font-size: 0.875rem;
    }
  }

  @media (max-width: 640px) {
    .page-header {
      padding: 1.5rem 1rem;
    }

    .page-title {
      font-size: 1.75rem;
    }

    .section-icon {
      width: 56px;
      height: 56px;
      font-size: 1.25rem;
    }

    .clear-favorites-btn {
      padding: 0.625rem 1.25rem;
      font-size: 0.8rem;
    }

    .empty-state {
      padding: 2.5rem 1rem;
    }

    .empty-icon {
      font-size: 2.5rem;
    }
  }
</style> 
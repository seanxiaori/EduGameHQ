---
import BaseLayout from '../../layouts/BaseLayout.astro';
import GameCard from '../../components/GameCard.astro';
import type { Game } from '../../types/game';
import fs from 'fs';
import path from 'path';

// 瀵煎叆鏍峰紡鏂囦欢
import '../../styles/game-card.css';

// 璇诲彇娓告垙鏁版嵁
const gamesPath = path.join(process.cwd(), 'src', 'data', 'games.json');
const allGamesData: Game[] = JSON.parse(fs.readFileSync(gamesPath, 'utf-8'));

// SEO鏁版嵁
const seoData = {
  title: 'Your Favorite Games - EduGameHQ',
  description: 'Your personal collection of favorite educational games. Keep playing the games you love most and discover new ones!',
  keywords: ['favorite games', 'educational games collection', 'saved games', 'bookmarked games', 'learning games favorites']
};

// 鑾峰彇涓€浜涚ず渚嬫帹鑽愭父鎴忥紙涓嶅悓鍒嗙被鐨勭儹闂ㄦ父鎴忥級
const recommendedGames = allGamesData
  .filter(game => game.featured || (game.popularity && game.popularity > 500))
  .slice(0, 6);
---

<BaseLayout title={seoData.title} description={seoData.description} lang="ar">
  <!-- 寮曞叆缁熶竴娓告垙鍗＄墖鏍峰紡 -->
  
  
  <!-- 涓昏鍐呭 -->
  <main class="main-content">
    <div class="content-wrapper">
      <!-- 椤甸潰澶撮儴 -->
      <section class="page-header">
        <div class="header-content">
          <div class="header-icon">
            <div class="section-icon favorites">
              <i class="fas fa-heart"></i>
            </div>
          </div>
          <div class="header-text">
            <h1 class="page-title">Your Favorites</h1>
            <p class="page-description">
              Your personal collection of favorite educational games. Keep playing the games you love most!
            </p>
          </div>
        </div>
        
        <!-- 绠＄悊鎿嶄綔 -->
        <div class="header-actions">
          <button id="clearFavoritesBtn" class="clear-favorites-btn">
            <i class="fas fa-trash-alt"></i>
            <span>Clear All</span>
          </button>
        </div>
      </section>

      <!-- 鏀惰棌缁熻 -->
      <section class="favorites-stats">
        <div class="stat-card">
          <div class="stat-icon">
            <i class="fas fa-heart"></i>
          </div>
          <div class="stat-info">
            <div class="stat-number" id="favoritesCount">0</div>
            <div class="stat-label">Favorite Games</div>
          </div>
        </div>
        
        <div class="stat-card">
          <div class="stat-icon">
            <i class="fas fa-gamepad"></i>
          </div>
          <div class="stat-info">
            <div class="stat-number" id="categoriesCount">0</div>
            <div class="stat-label">Categories</div>
          </div>
        </div>
        
        <div class="stat-card">
          <div class="stat-icon">
            <i class="fas fa-clock"></i>
          </div>
          <div class="stat-info">
            <div class="stat-number" id="totalPlayTime">0h</div>
            <div class="stat-label">Total Play Time</div>
          </div>
        </div>
      </section>

      <!-- 鏀惰棌娓告垙鍒楄〃 -->
      <section class="favorites-section">
        <!-- 鏈夋敹钘忔父鎴忔椂鏄剧ず -->
        <div id="favoritesWithGames" class="favorites-content" style="display: none;">
          <div class="module-header">
            <div class="module-icon favorites-icon">
              <i class="fas fa-star"></i>
            </div>
            <div class="module-title-group">
              <h2 class="module-title">Your Favorite Games</h2>
              <p class="module-subtitle">Games you've marked as favorites</p>
            </div>
          </div>
          
          <!-- 浣跨敤缁熶竴GameCard缁勪欢棰勬覆鏌撴墍鏈夋父鎴忥紝JavaScript鎺у埗鏄剧ず/闅愯棌 -->
          <div class="games-grid" id="favoritesGrid">
            {allGamesData.map((game) => (
              <div class="favorite-game-card" data-game-slug={game.slug} style="display: none;">
                <GameCard 
                  game={game} 
                  showPopularity={true} 
                  showFavorite={true} 
                  showDeveloper={false}
                />
              </div>
            ))}
          </div>
        </div>

        <!-- 鏃犳敹钘忔父鎴忔椂鏄剧ず -->
        <div id="emptyFavorites" class="empty-state">
          <div class="empty-icon">
            <i class="fas fa-heart-broken"></i>
          </div>
          <div class="empty-content">
            <h3 class="empty-title">No Favorite Games Yet</h3>
            <p class="empty-description">
              Start exploring our educational games and click the 鉂わ笍 button to add games to your favorites!
            </p>
            <div class="empty-actions">
              <a href="/" class="action-btn primary">
                <i class="fas fa-home"></i>
                Browse Games
              </a>
              <a href="/trending" class="action-btn secondary">
                <i class="fas fa-fire"></i>
                Trending Games
              </a>
            </div>
          </div>
        </div>
      </section>

      <!-- 鎺ㄨ崘娓告垙 -->
      <section class="recommendations-section">
        <div class="module-header">
          <div class="module-icon recommendations-icon">
            <i class="fas fa-lightbulb"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Recommended for You</h2>
            <p class="module-subtitle">Games similar to your favorites</p>
          </div>
        </div>
        
        <div class="games-grid">
          {recommendedGames.map((game) => (
            <GameCard game={game} showPlayHistory={true} showPopularity={true} showFavorite={true} />
          ))}
        </div>
      </section>
    </div>
  </main>

  <!-- 绠€鍖栫殑鏀惰棌绠＄悊JavaScript -->
  <script is:inline>
    // 鏋佺畝鐨勬敹钘忕鐞嗙被 - 鍙礋璐ｆ樉绀?闅愯棌棰勬覆鏌撶殑GameCard
    class SimpleFavoritesManager {
      constructor() {
        this.favoriteGameIds = new Set();
        this.init();
      }

      // 鍒濆鍖?
      init() {
        this.loadFavorites();
        this.updateDisplay();
        this.initializeEventListeners();
        console.log('鉁?鏀惰棌绠＄悊鍣ㄥ垵濮嬪寲瀹屾垚');
      }

      // 浠巐ocalStorage鍔犺浇鏀惰棌鍒楄〃
      loadFavorites() {
        try {
          const favorites = JSON.parse(localStorage.getItem('favoriteGames') || '[]');
          this.favoriteGameIds = new Set(favorites);
        } catch (error) {
          console.error('鍔犺浇鏀惰棌鍒楄〃澶辫触:', error);
          this.favoriteGameIds = new Set();
        }
      }

      // 鏇存柊鏄剧ず鐘舵€?
      updateDisplay() {
        const favoritesWithGames = document.getElementById('favoritesWithGames');
        const emptyFavorites = document.getElementById('emptyFavorites');
        const favoriteCards = document.querySelectorAll('.favorite-game-card');

        // 闅愯棌鎵€鏈夋父鎴忓崱鐗?
        favoriteCards.forEach(card => {
          card.style.display = 'none';
        });

        // 鏄剧ず鏀惰棌鐨勬父鎴忓崱鐗?
        let visibleCount = 0;
        this.favoriteGameIds.forEach(gameSlug => {
          const card = document.querySelector(`[data-game-slug="${gameSlug}"]`);
          if (card) {
            card.style.display = 'block';
            visibleCount++;
          }
        });

        // 鏍规嵁鏄惁鏈夋敹钘忔父鎴忔樉绀轰笉鍚屽唴瀹?
        if (visibleCount > 0) {
          favoritesWithGames.style.display = 'block';
          emptyFavorites.style.display = 'none';
        } else {
          favoritesWithGames.style.display = 'none';
          emptyFavorites.style.display = 'block';
        }

        // 鏇存柊缁熻淇℃伅
        this.updateStats();
      }

      // 鏇存柊缁熻淇℃伅
      updateStats() {
        const favoritesCount = this.favoriteGameIds.size;
        
        // 璁＄畻鏀惰棌娓告垙鐨勫垎绫绘暟閲?
        const categories = new Set();
        this.favoriteGameIds.forEach(gameSlug => {
          const card = document.querySelector(`[data-game-slug="${gameSlug}"]`);
          if (card) {
            // 浠嶨ameCard涓彁鍙栧垎绫讳俊鎭紙閫氳繃鏌ユ壘category-tag锛?
            const categoryTag = card.querySelector('.category-tag');
            if (categoryTag) {
              categories.add(categoryTag.textContent.trim());
            }
          }
        });

        // 鏇存柊缁熻鏄剧ず
        document.getElementById('favoritesCount').textContent = favoritesCount;
        document.getElementById('categoriesCount').textContent = categories.size;
        document.getElementById('totalPlayTime').textContent = Math.floor(favoritesCount * 0.5) + 'h';
      }

      // 娓呯┖鎵€鏈夋敹钘?
      clearAllFavorites() {
        console.log('馃棏锔?clearAllFavorites鍑芥暟琚皟鐢?);
        
        // 鍒涘缓鑷畾涔夌‘璁ゅ璇濇
        this.showCustomConfirm(
          'Clear All Favorites?',
          'Are you sure you want to remove all games from your favorites? This action cannot be undone.',
          () => {
            this.favoriteGameIds.clear();
            localStorage.setItem('favoriteGames', JSON.stringify([]));
            
            this.updateDisplay();
            
            // 瑙﹀彂鍏ㄥ眬鏀惰棌鍙樺寲浜嬩欢
            window.dispatchEvent(new CustomEvent('favoritesChanged'));
            
            console.log('馃棏锔?宸叉竻绌烘墍鏈夋敹钘忔父鎴?);
            
            // 鏄剧ず鎴愬姛鎻愮ず
            this.showSuccessMessage('All favorite games have been removed successfully!');
            
            // 寤惰繜鍒锋柊椤甸潰
            setTimeout(() => {
              location.reload();
            }, 1500);
          }
        );
      }

      // 鏄剧ず鑷畾涔夌‘璁ゅ璇濇
      showCustomConfirm(title, message, onConfirm) {
        console.log('馃摑 showCustomConfirm鍑芥暟琚皟鐢?);
        console.log('鍙傛暟:', { title, message, onConfirm });
        
        // 绉婚櫎宸插瓨鍦ㄧ殑瀵硅瘽妗?
        const existingOverlay = document.querySelector('.custom-confirm-overlay');
        if (existingOverlay) {
          existingOverlay.remove();
        }
        
        // 鍒涘缓閬僵灞?
        const overlay = document.createElement('div');
        overlay.className = 'custom-confirm-overlay';
        overlay.style.cssText = `
          position: fixed !important;
          top: 0 !important;
          left: 0 !important;
          right: 0 !important;
          bottom: 0 !important;
          background: rgba(0, 0, 0, 0.5) !important;
          display: flex !important;
          align-items: center !important;
          justify-content: center !important;
          z-index: 10000 !important;
          opacity: 0 !important;
          visibility: hidden !important;
          transition: all 0.3s ease !important;
          backdrop-filter: blur(4px) !important;
        `;
        
        // 鍒涘缓瀵硅瘽妗?
        const dialog = document.createElement('div');
        dialog.className = 'custom-confirm-dialog';
        dialog.style.cssText = `
          background: white !important;
          border-radius: 20px !important;
          padding: 0 !important;
          max-width: 480px !important;
          width: 90% !important;
          box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25) !important;
          transform: scale(0.9) translateY(-20px) !important;
          transition: all 0.3s ease !important;
          overflow: hidden !important;
          border: 1px solid rgba(0, 0, 0, 0.1) !important;
        `;
        
        dialog.innerHTML = `
          <div class="confirm-header" style="padding: 2rem 2rem 1rem !important; text-align: center !important; background: linear-gradient(135deg, #FEF2F2 0%, #FEE2E2 100%) !important; border-bottom: 1px solid rgba(0, 0, 0, 0.05) !important;">
            <i class="fas fa-heart-broken confirm-icon" style="font-size: 3rem !important; color: #DC2626 !important; margin-bottom: 1rem !important; display: block !important; animation: pulse 2s infinite !important;"></i>
            <h3 class="confirm-title" style="font-family: 'Space Grotesk', sans-serif !important; font-size: 1.5rem !important; font-weight: 700 !important; color: #1F2937 !important; margin: 0 !important; line-height: 1.3 !important;">${title}</h3>
          </div>
          <div class="confirm-body" style="padding: 1.5rem 2rem !important; text-align: center !important;">
            <p class="confirm-message" style="color: #6B7280 !important; font-size: 1rem !important; line-height: 1.6 !important; margin: 0 !important;">${message}</p>
          </div>
          <div class="confirm-actions" style="padding: 1rem 2rem 2rem !important; display: flex !important; gap: 1rem !important; justify-content: center !important;">
            <button class="confirm-btn cancel-btn" id="confirmCancel" style="display: flex !important; align-items: center !important; gap: 0.5rem !important; padding: 0.875rem 1.5rem !important; border: 2px solid #E5E7EB !important; border-radius: 12px !important; font-weight: 600 !important; font-size: 0.95rem !important; cursor: pointer !important; transition: all 0.3s ease !important; min-width: 120px !important; justify-content: center !important; background: #F3F4F6 !important; color: #6B7280 !important;">
              <i class="fas fa-times"></i>
              Cancel
            </button>
            <button class="confirm-btn confirm-btn-primary" id="confirmYes" style="display: flex !important; align-items: center !important; gap: 0.5rem !important; padding: 0.875rem 1.5rem !important; border: none !important; border-radius: 12px !important; font-weight: 600 !important; font-size: 0.95rem !important; cursor: pointer !important; transition: all 0.3s ease !important; min-width: 120px !important; justify-content: center !important; background: linear-gradient(135deg, #DC2626 0%, #B91C1C 100%) !important; color: white !important; box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3) !important;">
              <i class="fas fa-heart-broken"></i>
              Clear All
            </button>
          </div>
        `;
        
        overlay.appendChild(dialog);
        document.body.appendChild(overlay);
        
        console.log('鉁?瀵硅瘽妗嗗凡娣诲姞鍒癉OM');
        
        // 娣诲姞鍔ㄧ敾
        setTimeout(() => {
          overlay.style.opacity = '1';
          overlay.style.visibility = 'visible';
          dialog.style.transform = 'scale(1) translateY(0)';
          console.log('鉁?瀵硅瘽妗嗗姩鐢诲凡瑙﹀彂');
        }, 10);
        
        // 缁戝畾浜嬩欢
        const cancelBtn = dialog.querySelector('#confirmCancel');
        const yesBtn = dialog.querySelector('#confirmYes');
        
        const closeDialog = () => {
          console.log('馃敀 鍏抽棴瀵硅瘽妗?);
          overlay.style.opacity = '0';
          overlay.style.visibility = 'hidden';
          setTimeout(() => {
            if (document.body.contains(overlay)) {
              document.body.removeChild(overlay);
            }
          }, 300);
        };
        
        cancelBtn.addEventListener('click', closeDialog);
        yesBtn.addEventListener('click', () => {
          console.log('鉁?鐢ㄦ埛纭娓呴櫎鏀惰棌');
          closeDialog();
          onConfirm();
        });
        
        // 鐐瑰嚮閬僵灞傚叧闂?
        overlay.addEventListener('click', (e) => {
          if (e.target === overlay) {
            closeDialog();
          }
        });
        
        // ESC閿叧闂?
        const handleEsc = (e) => {
          if (e.key === 'Escape') {
            closeDialog();
            document.removeEventListener('keydown', handleEsc);
          }
        };
        document.addEventListener('keydown', handleEsc);
      }

      // 鏄剧ず鎴愬姛鎻愮ず
      showSuccessMessage(message) {
        console.log('馃帀 鏄剧ず鎴愬姛鎻愮ず:', message);
        
        // 绉婚櫎宸插瓨鍦ㄧ殑鎻愮ず
        const existingToast = document.querySelector('.success-toast');
        if (existingToast) {
          existingToast.remove();
        }
        
        const toast = document.createElement('div');
        toast.className = 'success-toast';
        toast.style.cssText = `
          position: fixed !important;
          top: 2rem !important;
          right: 2rem !important;
          background: linear-gradient(135deg, #DC2626 0%, #B91C1C 100%) !important;
          color: white !important;
          padding: 1rem 1.5rem !important;
          border-radius: 12px !important;
          box-shadow: 0 10px 25px rgba(220, 38, 38, 0.3) !important;
          z-index: 10001 !important;
          display: flex !important;
          align-items: center !important;
          gap: 0.75rem !important;
          font-weight: 600 !important;
          font-size: 0.95rem !important;
          transform: translateX(100%) !important;
          opacity: 0 !important;
          transition: all 0.3s ease !important;
          max-width: 350px !important;
        `;
        
        toast.innerHTML = `
          <i class="fas fa-heart-broken" style="font-size: 1.25rem !important; flex-shrink: 0 !important;"></i>
          <span>${message}</span>
        `;
        
        document.body.appendChild(toast);
        console.log('鉁?鎴愬姛鎻愮ず宸叉坊鍔犲埌DOM');
        
        // 娣诲姞鍔ㄧ敾
        setTimeout(() => {
          toast.style.transform = 'translateX(0)';
          toast.style.opacity = '1';
          console.log('鉁?鎴愬姛鎻愮ず鍔ㄧ敾宸茶Е鍙?);
        }, 10);
        
        // 鑷姩绉婚櫎
        setTimeout(() => {
          toast.style.transform = 'translateX(100%)';
          toast.style.opacity = '0';
          setTimeout(() => {
            if (document.body.contains(toast)) {
              document.body.removeChild(toast);
              console.log('鉁?鎴愬姛鎻愮ず宸茬Щ闄?);
            }
          }, 300);
        }, 3000);
      }

      // 鍒濆鍖栦簨浠剁洃鍚櫒
      initializeEventListeners() {
        // 娓呯┖鏀惰棌鎸夐挳
        const clearBtn = document.getElementById('clearFavoritesBtn');
        if (clearBtn) {
          clearBtn.addEventListener('click', () => this.clearAllFavorites());
        }

        // 鐩戝惉鏀惰棌鐘舵€佸彉鍖栵紙鏉ヨ嚜GameCard缁勪欢锛?
        window.addEventListener('favoritesChanged', () => {
          this.loadFavorites();
          this.updateDisplay();
        });
      }
    }

    // 椤甸潰鍔犺浇瀹屾垚鍚庡垵濮嬪寲
    document.addEventListener('DOMContentLoaded', function() {
      window.simpleFavoritesManager = new SimpleFavoritesManager();
    });
  </script>
</BaseLayout>

<style>
  /* 涓昏鍐呭鍖哄煙 */
  .main-content {
    width: 100%;
    background: #FEFCFB;
    min-height: 100vh;
  }

  .content-wrapper {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
  }

  /* 椤甸潰澶撮儴 - 绾㈣壊涓婚 */
  .page-header {
    background: linear-gradient(135deg, #FEF2F2 0%, #FEE2E2 50%, #DC2626 100%);
    border-radius: 20px;
    padding: 3rem;
    margin-bottom: 3rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    box-shadow: 0 4px 14px 0 rgba(220, 38, 38, 0.2);
    position: relative;
    overflow: hidden;
  }

  .page-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.2), transparent 50%);
  }

  .header-content {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    position: relative;
    z-index: 1;
  }

  .header-icon {
    flex-shrink: 0;
  }

  .section-icon {
    width: 64px;
    height: 64px;
    border-radius: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.5rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .section-icon.favorites {
    background: linear-gradient(135deg, #DC2626, #B91C1C);
  }

  .header-text {
    flex: 1;
  }

  .page-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 2.5rem;
    font-weight: 800;
    margin: 0 0 0.5rem 0;
    color: #991B1B;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    line-height: 1.2;
  }

  .page-description {
    font-size: 1.125rem;
    color: #7F1D1D;
    margin: 0;
    font-weight: 500;
    line-height: 1.6;
  }

  .header-actions {
    position: relative;
    z-index: 1;
  }

  .clear-favorites-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: rgba(255, 255, 255, 0.9);
    color: #DC2626;
    border: 2px solid rgba(220, 38, 38, 0.2);
    padding: 0.75rem 1.5rem;
    border-radius: 12px;
    font-weight: 600;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .clear-favorites-btn:hover {
    background: #DC2626;
    color: white;
    border-color: #DC2626;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);
  }

  /* 鏀惰棌缁熻 */
  .favorites-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-bottom: 3rem;
  }

  .stat-card {
    background: white;
    border-radius: 16px;
    padding: 2rem;
    display: flex;
    align-items: center;
    gap: 1.5rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    border: 1px solid #F3F4F6;
    transition: all 0.3s ease;
  }

  .stat-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 24px rgba(220, 38, 38, 0.15);
    border-color: rgba(220, 38, 38, 0.25);
  }

  .stat-icon {
    width: 56px;
    height: 56px;
    border-radius: 12px;
    background: linear-gradient(135deg, #DC2626, #B91C1C);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.25rem;
    box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);
    flex-shrink: 0;
  }

  .stat-info {
    flex: 1;
  }

  .stat-number {
    font-size: 2rem;
    font-weight: 800;
    color: #1F2937;
    line-height: 1;
    font-family: 'Space Grotesk', sans-serif;
  }

  .stat-label {
    font-size: 0.9rem;
    color: #6B7280;
    font-weight: 600;
    margin-top: 0.25rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  /* 鏀惰棌娓告垙鍖哄煙 */
  .favorites-section {
    margin-bottom: 3rem;
  }

  .favorites-content {
    background: white;
    border-radius: 20px;
    padding: 2rem;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
    border: 1px solid #E5E7EB;
  }

  /* 妯″潡澶撮儴 */
  .module-header {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    margin-bottom: 2rem;
    padding-bottom: 1.5rem;
    border-bottom: 2px solid #F3F4F6;
  }

  .module-icon {
    width: 56px;
    height: 56px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.25rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    flex-shrink: 0;
  }

  .favorites-icon {
    background: linear-gradient(135deg, #DC2626, #B91C1C);
  }

  .recommendations-icon {
    background: linear-gradient(135deg, #F59E0B, #D97706);
  }

  .module-title-group {
    flex: 1;
  }

  .module-title {
    font-size: 1.75rem;
    font-weight: 700;
    color: #1F2937;
    margin: 0 0 0.25rem 0;
    font-family: 'Space Grotesk', sans-serif;
  }

  .module-subtitle {
    font-size: 1rem;
    color: #6B7280;
    margin: 0;
    font-weight: 500;
  }

  /* 娓告垙缃戞牸 */
  .games-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 1.5rem;
  }

  /* 绠€鍖杅avorite-game-card鏍峰紡锛屽洜涓哄唴閮ㄤ娇鐢℅ameCard缁勪欢 */
  .favorite-game-card {
    /* GameCard缁勪欢鑷甫鏍峰紡锛岃繖閲屼笉闇€瑕侀澶栨牱寮?*/
  }

  /* 绌虹姸鎬?*/
  .empty-state {
    background: white;
    border-radius: 20px;
    padding: 4rem 2rem;
    text-align: center;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
    border: 1px solid #E5E7EB;
  }

  .empty-icon {
    width: 96px;
    height: 96px;
    margin: 0 auto 2rem;
    border-radius: 50%;
    background: linear-gradient(135deg, #FEE2E2, #FECACA);
    display: flex;
    align-items: center;
    justify-content: center;
    color: #DC2626;
    font-size: 2.5rem;
    box-shadow: 0 8px 24px rgba(220, 38, 38, 0.15);
  }

  .empty-title {
    font-size: 1.75rem;
    font-weight: 700;
    color: #1F2937;
    margin: 0 0 1rem 0;
    font-family: 'Space Grotesk', sans-serif;
  }

  .empty-description {
    font-size: 1.125rem;
    color: #6B7280;
    line-height: 1.7;
    margin: 0 0 2rem 0;
    max-width: 480px;
    margin-left: auto;
    margin-right: auto;
  }

  .empty-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.875rem 1.75rem;
    border-radius: 12px;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.3s ease;
    font-size: 1rem;
  }

  .action-btn.primary {
    background: linear-gradient(135deg, #DC2626, #B91C1C);
    color: white;
    box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);
  }

  .action-btn.primary:hover {
    background: linear-gradient(135deg, #B91C1C, #991B1B);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(220, 38, 38, 0.4);
  }

  .action-btn.secondary {
    background: white;
    color: #DC2626;
    border: 2px solid #DC2626;
  }

  .action-btn.secondary:hover {
    background: #DC2626;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);
  }

  /* 鎺ㄨ崘娓告垙鍖哄煙 */
  .recommendations-section {
    background: white;
    border-radius: 20px;
    padding: 2rem;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
    border: 1px solid #E5E7EB;
  }

  /* 鍝嶅簲寮忚璁?*/
  @media (max-width: 1024px) {
    .content-wrapper {
      padding: 1.5rem;
    }
    
    .page-header {
      padding: 2rem;
      flex-direction: column;
      gap: 1.5rem;
      text-align: center;
    }
    
    .header-content {
      flex-direction: column;
      gap: 1rem;
    }
  }

  @media (max-width: 768px) {
    .content-wrapper {
      padding: 1rem;
    }
    
    .page-header {
      padding: 1.5rem;
    }
    
    .page-title {
      font-size: 2rem;
    }
    
    .favorites-stats {
      grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));
      gap: 1rem;
    }
    
    .stat-card {
      padding: 1.5rem;
    }
    
    .stat-icon {
      width: 48px;
      height: 48px;
      font-size: 1rem;
    }
    
    .stat-number {
      font-size: 1.5rem;
    }
    
    .games-grid {
      grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
      gap: 1rem;
    }
    
    .favorites-content, .recommendations-section {
      padding: 1.5rem;
    }
    
    .empty-state {
      padding: 3rem 1.5rem;
    }
    
    .empty-actions {
      flex-direction: column;
      align-items: center;
    }
    
    .action-btn {
      width: 100%;
      max-width: 240px;
      justify-content: center;
    }
  }

  @media (max-width: 480px) {
    .games-grid {
      grid-template-columns: 1fr;
    }
    
    .favorites-stats {
      grid-template-columns: 1fr;
    }
  }
</style> 


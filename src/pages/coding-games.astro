---
import BaseLayout from '../layouts/BaseLayout.astro';
import type { Game, GameData } from '../types/game';
import fs from 'fs';
import path from 'path';

const seoData = {
  title: "Coding Games for Kids | Learn Programming Through Play",
  description: "Learn programming fundamentals with fun coding games for kids aged 8-18. Master JavaScript, Python, and more through interactive challenges.",
  keywords: ["coding games", "programming games", "learn coding", "kids programming", "JavaScript games", "Python games", "coding for beginners"],
  ogImage: "/images/coding-games-og.jpg"
};

// ‰ªéJSONÊñá‰ª∂ËØªÂèñÊ∏∏ÊàèÊï∞ÊçÆ
const gamesDataPath = path.join(process.cwd(), 'src/data/games/games.json');
let allGamesData: GameData = {};

try {
  const fileContent = fs.readFileSync(gamesDataPath, 'utf-8');
  allGamesData = JSON.parse(fileContent) as GameData;
} catch (error) {
  console.warn('Unable to read games data file');
}

// Á≠õÈÄâÁºñÁ®ãÊ∏∏Êàè
const codingGames = Object.entries(allGamesData)
  .filter(([id, game]: [string, Game]) => game.category === 'coding')
  .map(([id, game]: [string, Game]) => ({
    id: id,
    title: game.title,
    description: game.description,
    image: game.screenshots && game.screenshots.length > 0 
      ? `/images/games/details/${game.screenshots[0]}` 
      : `/images/games/${id}.svg`,
    url: `/games/${id}`,
    category: game.category,
    categoryName: game.categoryName,
    ageRange: game.ageRange,
    difficulty: game.difficulty || 'medium',
    skills: game.skills || [],
    isFeatured: Math.random() > 0.7
  }));

// ÊåâÈöæÂ∫¶ÂàÜÁªÑÊ∏∏Êàè
const featuredGames = codingGames.filter(game => game.isFeatured).slice(0, 4);
const easyGames = codingGames.filter(game => game.difficulty === 'easy');
const mediumGames = codingGames.filter(game => game.difficulty === 'medium');
const hardGames = codingGames.filter(game => game.difficulty === 'hard');

// Â¶ÇÊûúÁâπËâ≤Ê∏∏Êàè‰∏çË∂≥4‰∏™Ôºå‰ªéÂÖ∂‰ªñÊ∏∏Êàè‰∏≠Ë°•ÂÖÖ
if (featuredGames.length < 4) {
  const remainingGames = codingGames.filter(game => !game.isFeatured);
  featuredGames.push(...remainingGames.slice(0, 4 - featuredGames.length));
}
---

<BaseLayout title={seoData.title} description={seoData.description}>
  <!-- ÂºïÂÖ•Áªü‰∏ÄÁöÑÊ∏∏ÊàèÂç°ÁâáÊ†∑Âºè -->
  <link rel="stylesheet" href="/src/styles/game-card.css">

  <main class="main-content">
    <div class="content-wrapper">
      
      <!-- 1. È°µÈù¢È°∂ÈÉ®Âå∫Âüü -->
      <section class="page-header">
        <div class="header-content">
          <div class="category-icon-container">
            <div class="category-icon coding">
              <div class="icon-background">
                üíª
              </div>
            </div>
          </div>
          
          <div class="header-text">
            <h1 class="page-title">Coding Games</h1>
            <p class="page-description">
              Learn programming fundamentals through interactive games and challenges. Master coding concepts, algorithms, and problem-solving skills while having fun. Perfect for beginners and young coders to start their programming journey.
            </p>
          </div>
        </div>
      </section>

      <!-- 2. ÁâπËâ≤Ê∏∏ÊàèÊ®°Âùó -->
      <section class="games-module">
        <div class="module-header">
          <div class="module-icon featured">
            <i class="fas fa-star"></i>
          </div>
          <div class="module-text">
            <h2 class="module-title">Featured Coding Games</h2>
            <p class="module-subtitle">Hand-picked programming games to start your coding adventure</p>
          </div>
        </div>
        
        <div class="games-grid featured-grid">
          {featuredGames.map((game, index) => {
            const popularity = Math.floor(Math.random() * 15000) + 500;
            const formatPopularity = (num) => {
              if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
              if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
              return num.toString();
            };
            
            return (
              <a href={game.url} class={`game-card coding-theme animate-fadeInUp`} style={`animation-delay: ${index * 0.1}s`}>
                <div class="game-image-container">
                  <img src={game.image} alt={game.title} class="game-image" />
                  <div class="game-overlay">
                    <div class="popularity-badge">
                      {popularity > 5000 ? 'üî•' : popularity > 1000 ? '‚≠ê' : ''} {formatPopularity(popularity)}
                    </div>
                    <div class="play-button">
                      <i class="fas fa-play"></i>
                    </div>
                  </div>
                </div>
                <div class="game-info">
                  <h3 class="game-title">{game.title}</h3>
                  <div class="game-tags">
                    <span class="category-tag coding">Coding</span>
                    <span class="feature-tag featured">FEATURED</span>
                  </div>
                </div>
              </a>
            );
          })}
        </div>
      </section>

      <!-- 3. ÂÆπÊòìÈöæÂ∫¶Ê∏∏ÊàèÊ®°Âùó -->
      <section class="games-module">
        <div class="module-header">
          <div class="module-icon easy">
            <i class="fas fa-smile"></i>
          </div>
          <div class="module-text">
            <h2 class="module-title">Beginner Friendly</h2>
            <p class="module-subtitle">Perfect for coding newcomers and young learners</p>
          </div>
        </div>
        
        <div class="games-grid">
          {easyGames.map((game, index) => {
            const popularity = Math.floor(Math.random() * 8000) + 300;
            const formatPopularity = (num) => {
              if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
              return num.toString();
            };
            
            return (
              <a href={game.url} class={`game-card coding-theme animate-fadeInUp`} style={`animation-delay: ${index * 0.1}s`}>
                <div class="game-image-container">
                  <img src={game.image} alt={game.title} class="game-image" />
                  <div class="game-overlay">
                    <div class="popularity-badge">
                      {popularity > 5000 ? 'üî•' : popularity > 1000 ? '‚≠ê' : ''} {formatPopularity(popularity)}
                    </div>
                    <div class="play-button">
                      <i class="fas fa-play"></i>
                    </div>
                  </div>
                </div>
                <div class="game-info">
                  <h3 class="game-title">{game.title}</h3>
                  <div class="game-tags">
                    <span class="category-tag coding">Coding</span>
                    <span class="difficulty-tag easy">Easy</span>
                  </div>
                </div>
              </a>
            );
          })}
        </div>
      </section>

      <!-- 4. ‰∏≠Á≠âÈöæÂ∫¶Ê∏∏ÊàèÊ®°Âùó -->
      <section class="games-module">
        <div class="module-header">
          <div class="module-icon medium">
            <i class="fas fa-meh"></i>
          </div>
          <div class="module-text">
            <h2 class="module-title">Intermediate Challenges</h2>
            <p class="module-subtitle">Build on your coding foundation with more complex problems</p>
          </div>
        </div>
        
        <div class="games-grid">
          {mediumGames.map((game, index) => {
            const popularity = Math.floor(Math.random() * 12000) + 800;
            const formatPopularity = (num) => {
              if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
              return num.toString();
            };
            
            return (
              <a href={game.url} class={`game-card coding-theme animate-fadeInUp`} style={`animation-delay: ${index * 0.1}s`}>
                <div class="game-image-container">
                  <img src={game.image} alt={game.title} class="game-image" />
                  <div class="game-overlay">
                    <div class="popularity-badge">
                      {popularity > 5000 ? 'üî•' : popularity > 1000 ? '‚≠ê' : ''} {formatPopularity(popularity)}
                    </div>
                    <div class="play-button">
                      <i class="fas fa-play"></i>
                    </div>
                  </div>
                </div>
                <div class="game-info">
                  <h3 class="game-title">{game.title}</h3>
                  <div class="game-tags">
                    <span class="category-tag coding">Coding</span>
                    <span class="difficulty-tag medium">Medium</span>
                  </div>
                </div>
              </a>
            );
          })}
        </div>
      </section>

      <!-- 5. Âõ∞ÈöæÊ∏∏ÊàèÊ®°Âùó -->
      <section class="games-module">
        <div class="module-header">
          <div class="module-icon hard">
            <i class="fas fa-frown"></i>
          </div>
          <div class="module-text">
            <h2 class="module-title">Advanced Programming</h2>
            <p class="module-subtitle">Master complex algorithms and advanced coding concepts</p>
          </div>
        </div>
        
        <div class="games-grid">
          {hardGames.map((game, index) => {
            const popularity = Math.floor(Math.random() * 20000) + 1000;
            const formatPopularity = (num) => {
              if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
              return num.toString();
            };
            
            return (
              <a href={game.url} class={`game-card coding-theme animate-fadeInUp`} style={`animation-delay: ${index * 0.1}s`}>
                <div class="game-image-container">
                  <img src={game.image} alt={game.title} class="game-image" />
                  <div class="game-overlay">
                    <div class="popularity-badge">
                      {popularity > 5000 ? 'üî•' : popularity > 1000 ? '‚≠ê' : ''} {formatPopularity(popularity)}
                    </div>
                    <div class="play-button">
                      <i class="fas fa-play"></i>
                    </div>
                  </div>
                </div>
                <div class="game-info">
                  <h3 class="game-title">{game.title}</h3>
                  <div class="game-tags">
                    <span class="category-tag coding">Coding</span>
                    <span class="difficulty-tag hard">Hard</span>
                  </div>
                </div>
              </a>
            );
          })}
        </div>
      </section>

      <!-- 6. Â≠¶‰π†Âª∫ËÆÆÊ®°Âùó -->
      <section class="learning-tips-module">
        <div class="module-header">
          <div class="module-icon tips">
            <i class="fas fa-lightbulb"></i>
          </div>
          <div class="module-text">
            <h2 class="module-title">Coding Learning Tips</h2>
            <p class="module-subtitle">Expert advice to accelerate your programming journey</p>
          </div>
        </div>
        
        <div class="tips-grid">
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-clock"></i>
            </div>
            <div class="tip-content">
              <h3 class="tip-title">Practice Daily</h3>
              <p class="tip-text">Spend 20-30 minutes daily coding to build muscle memory and reinforce concepts</p>
            </div>
          </div>
          
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-chart-line"></i>
            </div>
            <div class="tip-content">
              <h3 class="tip-title">Start Simple</h3>
              <p class="tip-text">Begin with visual programming languages like Scratch before moving to text-based coding</p>
            </div>
          </div>
          
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-heart"></i>
            </div>
            <div class="tip-content">
              <h3 class="tip-title">Embrace Debugging</h3>
              <p class="tip-text">Bugs are learning opportunities - they teach you how programs really work</p>
            </div>
          </div>
          
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-question-circle"></i>
            </div>
            <div class="tip-content">
              <h3 class="tip-title">Break Down Problems</h3>
              <p class="tip-text">Divide complex problems into smaller, manageable pieces to solve step by step</p>
            </div>
          </div>
        </div>
      </section>

      <!-- 7. Ê†∏ÂøÉÊäÄËÉΩÊ®°Âùó -->
      <section class="core-skills-module">
        <div class="module-header">
          <div class="module-icon skills">
            <i class="fas fa-brain"></i>
          </div>
          <div class="module-text">
            <h2 class="module-title">Core Programming Skills</h2>
            <p class="module-subtitle">Essential abilities developed through coding games</p>
          </div>
        </div>
        
        <div class="skills-grid">
          <div class="skill-item">
            <div class="skill-icon">
              <i class="fas fa-cogs"></i>
            </div>
            <div class="skill-content">
              <h3 class="skill-title">Logical Thinking</h3>
              <p class="skill-description">Develop systematic problem-solving approaches</p>
            </div>
          </div>
          
          <div class="skill-item">
            <div class="skill-icon">
              <i class="fas fa-sitemap"></i>
            </div>
            <div class="skill-content">
              <h3 class="skill-title">Algorithm Design</h3>
              <p class="skill-description">Create efficient step-by-step solutions</p>
            </div>
          </div>
          
          <div class="skill-item">
            <div class="skill-icon">
              <i class="fas fa-bug"></i>
            </div>
            <div class="skill-content">
              <h3 class="skill-title">Debugging Skills</h3>
              <p class="skill-description">Find and fix errors in code effectively</p>
            </div>
          </div>
          
          <div class="skill-item">
            <div class="skill-icon">
              <i class="fas fa-code"></i>
            </div>
            <div class="skill-content">
              <h3 class="skill-title">Syntax Mastery</h3>
              <p class="skill-description">Learn programming language structures</p>
            </div>
          </div>
          
          <div class="skill-item">
            <div class="skill-icon">
              <i class="fas fa-lightbulb"></i>
            </div>
            <div class="skill-content">
              <h3 class="skill-title">Creative Problem Solving</h3>
              <p class="skill-description">Think outside the box for innovative solutions</p>
            </div>
          </div>
          
          <div class="skill-item">
            <div class="skill-icon">
              <i class="fas fa-users"></i>
            </div>
            <div class="skill-content">
              <h3 class="skill-title">Computational Thinking</h3>
              <p class="skill-description">Break down complex problems systematically</p>
            </div>
          </div>
        </div>
      </section>

    </div>
  </main>

  <style>
    /* ÁºñÁ®ã‰∏ªÈ¢òËâ≤ÈÖçÁΩÆ */
    :root {
      --coding-primary: #2563EB;
      --coding-secondary: #1D4ED8;
      --coding-light: rgba(37, 99, 235, 0.1);
      --coding-gradient: linear-gradient(135deg, #2563EB 0%, #1D4ED8 100%);
    }

    /* È°µÈù¢È°∂ÈÉ®Âå∫ÂüüÊ†∑Âºè */
    .page-header {
      background: linear-gradient(135deg, #FFFBF5 0%, #FFF7ED 50%, rgba(37, 99, 235, 0.08) 100%);
      border-radius: 20px;
      padding: 2rem;
      margin-bottom: 2.5rem;
      border: 1px solid rgba(37, 99, 235, 0.15);
      box-shadow: 
        0 8px 32px rgba(37, 99, 235, 0.08),
        0 2px 8px rgba(0, 0, 0, 0.04);
      position: relative;
      overflow: hidden;
    }

    .page-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 1px;
      background: linear-gradient(90deg, transparent 0%, rgba(37, 99, 235, 0.3) 50%, transparent 100%);
    }

    .header-content {
      display: flex;
      align-items: flex-start;
      gap: 2rem;
    }

    .category-icon-container {
      flex-shrink: 0;
    }

    .category-icon {
      width: 72px;
      height: 72px;
      border-radius: 20px;
      background: var(--coding-gradient);
      display: flex;
      align-items: center;
      justify-content: center;
      box-shadow: 
        0 8px 24px rgba(37, 99, 235, 0.25),
        0 4px 12px rgba(37, 99, 235, 0.15),
        inset 0 1px 0 rgba(255, 255, 255, 0.2);
      transition: all 0.3s ease;
      position: relative;
    }

    .category-icon:hover {
      transform: translateY(-2px) scale(1.02);
      box-shadow: 
        0 12px 32px rgba(37, 99, 235, 0.3),
        0 6px 16px rgba(37, 99, 235, 0.2),
        inset 0 1px 0 rgba(255, 255, 255, 0.2);
    }

    .icon-background {
      font-size: 1.75rem;
      filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
    }

    .header-text {
      flex: 1;
    }

    .page-title {
      font-size: 2.5rem;
      font-weight: 800;
      font-family: 'Space Grotesk', sans-serif;
      background: var(--coding-gradient);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin-bottom: 0.75rem;
      line-height: 1.2;
    }

    .page-description {
      font-size: 1.125rem;
      color: #64748B;
      line-height: 1.6;
      margin: 0;
    }

    /* Ê∏∏ÊàèÊ®°ÂùóÊ†∑Âºè */
    .games-module {
      margin-bottom: 3rem;
    }

    .module-header {
      display: flex;
      align-items: flex-start;
      gap: 1rem;
      margin-bottom: 1.5rem;
      padding: 1.5rem;
      background: white;
      border-radius: 16px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
      border: 1px solid #F3F4F6;
    }

    .module-icon {
      width: 48px;
      height: 48px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.25rem;
      color: white;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      flex-shrink: 0;
    }

    .module-icon.featured { background: linear-gradient(135deg, #F59E0B, #D97706); }
    .module-icon.easy { background: linear-gradient(135deg, #10B981, #059669); }
    .module-icon.medium { background: linear-gradient(135deg, #F59E0B, #D97706); }
    .module-icon.hard { background: linear-gradient(135deg, #EF4444, #DC2626); }
    .module-icon.tips { background: linear-gradient(135deg, #8B5CF6, #7C3AED); }
    .module-icon.skills { background: linear-gradient(135deg, #EC4899, #DB2777); }

    .module-text {
      flex: 1;
    }

    .module-title {
      font-size: 1.5rem;
      font-weight: 700;
      font-family: 'Space Grotesk', sans-serif;
      color: #1F2937;
      margin-bottom: 0.25rem;
    }

    .module-subtitle {
      font-size: 0.9rem;
      color: #6B7280;
      margin: 0;
    }

    /* Ê∏∏ÊàèÁΩëÊ†ºÊ†∑Âºè */
    .games-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 1.5rem;
    }

    .featured-grid {
      grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
    }

    /* Â≠¶‰π†Âª∫ËÆÆÊ®°ÂùóÊ†∑Âºè */
    .learning-tips-module {
      margin-bottom: 3rem;
    }

    .tips-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }

    .tip-item {
      background: white;
      border-radius: 12px;
      padding: 1.25rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
      border: 1px solid #F3F4F6;
      transition: all 0.3s ease;
      display: flex;
      gap: 0.875rem;
      align-items: flex-start;
    }

    .tip-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
      border-color: rgba(139, 92, 246, 0.2);
    }

    .tip-icon {
      width: 32px;
      height: 32px;
      border-radius: 8px;
      background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 0.875rem;
      flex-shrink: 0;
    }

    .tip-content {
      flex: 1;
    }

    .tip-title {
      font-size: 0.9rem;
      font-weight: 600;
      font-family: 'Space Grotesk', sans-serif;
      color: #1F2937;
      margin-bottom: 0.25rem;
    }

    .tip-text {
      font-size: 0.8rem;
      color: #6B7280;
      line-height: 1.4;
      margin: 0;
    }

    /* Ê†∏ÂøÉÊäÄËÉΩÊ®°ÂùóÊ†∑Âºè */
    .core-skills-module {
      margin-bottom: 3rem;
    }

    .skills-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 1rem;
    }

    .skill-item {
      background: white;
      border-radius: 12px;
      padding: 1.25rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
      border: 1px solid #F3F4F6;
      transition: all 0.3s ease;
      text-align: left;
      display: flex;
      gap: 0.875rem;
      align-items: flex-start;
    }

    .skill-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
      border-color: rgba(236, 72, 153, 0.2);
    }

    .skill-icon {
      width: 32px;
      height: 32px;
      border-radius: 8px;
      background: linear-gradient(135deg, #EC4899 0%, #DB2777 100%);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 0.875rem;
      box-shadow: 0 2px 6px rgba(236, 72, 153, 0.3);
      flex-shrink: 0;
    }

    .skill-content {
      flex: 1;
    }

    .skill-title {
      font-size: 0.9rem;
      font-weight: 600;
      font-family: 'Space Grotesk', sans-serif;
      color: #1F2937;
      margin-bottom: 0.25rem;
    }

    .skill-description {
      font-size: 0.8rem;
      color: #6B7280;
      line-height: 1.4;
      margin: 0;
    }

    /* ÂìçÂ∫îÂºèËÆæËÆ° */
    @media (max-width: 1024px) {
      .tips-grid {
        grid-template-columns: 1fr;
      }
      
      .skills-grid {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    @media (max-width: 768px) {
      .header-content {
        flex-direction: column;
        text-align: center;
        gap: 1.5rem;
      }
      
      .page-title {
        font-size: 2rem;
      }
      
      .module-header {
        flex-direction: column;
        text-align: center;
        gap: 1rem;
      }
      
      .skills-grid {
        grid-template-columns: 1fr;
      }
      
      .tip-icon, .skill-icon {
        width: 28px;
        height: 28px;
        font-size: 0.75rem;
      }
      
      .tip-title, .skill-title {
        font-size: 0.875rem;
      }
      
      .tip-text, .skill-description {
        font-size: 0.75rem;
      }
    }

    /* Âä®ÁîªÊïàÊûú */
    .animate-fadeInUp {
      animation: fadeInUp 0.6s ease-out forwards;
      opacity: 0;
      transform: translateY(30px);
    }

    @keyframes fadeInUp {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    /* Ê∏∏ÊàèÂç°ÁâáÁºñÁ®ã‰∏ªÈ¢ò */
    .game-card.coding-theme .category-tag.coding {
      background: var(--coding-gradient);
    }

    .game-card.coding-theme:hover {
      border-color: var(--coding-primary);
      box-shadow: 0 8px 32px rgba(37, 99, 235, 0.15);
    }
  </style>
</BaseLayout>


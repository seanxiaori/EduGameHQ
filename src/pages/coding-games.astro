---
import BaseLayout from '../layouts/BaseLayout.astro';
import type { Game, GameData } from '../types/game';
import fs from 'fs';
import path from 'path';

const seoData = {
  title: "Coding Games for Kids | Free Programming & Computer Science Games | EduGameHQ",
  description: "Play 30+ free coding games for kids aged 8-18. Learn programming concepts, algorithms, and computational thinking through fun interactive games.",
  keywords: ["coding games", "programming games", "computer science games", "coding for kids", "learn programming", "educational coding games", "free coding games"],
  ogImage: "/images/coding-games-og.jpg"
};

// ‰ªéJSONÊñá‰ª∂ËØªÂèñÊ∏∏ÊàèÊï∞ÊçÆ - ‰øÆÂ§çË∑ØÂæÑ
const gamesDataPath = path.join(process.cwd(), 'src/data/games.json');
let allGamesData: Game[] = [];

try {
  const fileContent = fs.readFileSync(gamesDataPath, 'utf-8');
  allGamesData = JSON.parse(fileContent) as Game[];
} catch (error) {
  console.warn('Unable to read games data file:', error);
}

// Á≠õÈÄâÁºñÁ®ãÊ∏∏Êàè
const codingGames = allGamesData
  .filter(game => game.category === 'coding')
  .map(game => ({
    id: game.slug,
    title: game.title,
    description: game.description,
    image: game.thumbnailUrl || `/images/games/${game.category}/${game.slug}.svg`,
    url: `/games/${game.slug}`,
    category: game.category,
    categoryName: game.categoryName,
    ageRange: game.ageRange,
    difficulty: game.difficulty || 'Medium',
    skills: game.tags || [],
    isFeatured: game.featured || Math.random() > 0.7
  }));

// ÊåâÈöæÂ∫¶ÂàÜÁªÑÊ∏∏Êàè
const featuredGames = codingGames.filter(game => game.isFeatured).slice(0, 4);
const easyGames = codingGames.filter(game => game.difficulty === 'Easy');
const mediumGames = codingGames.filter(game => game.difficulty === 'Medium');
const hardGames = codingGames.filter(game => game.difficulty === 'Hard');

// Â¶ÇÊûúÁâπËâ≤Ê∏∏Êàè‰∏çË∂≥4‰∏™Ôºå‰ªéÂÖ∂‰ªñÊ∏∏Êàè‰∏≠Ë°•ÂÖÖ
if (featuredGames.length < 4) {
  const remainingGames = codingGames.filter(game => !game.isFeatured);
  featuredGames.push(...remainingGames.slice(0, 4 - featuredGames.length));
}
---

<BaseLayout title={seoData.title} description={seoData.description}>
  <!-- ÂºïÂÖ•Áªü‰∏ÄÁöÑÊ∏∏ÊàèÂç°ÁâáÊ†∑Âºè -->
  <link rel="stylesheet" href="/src/styles/game-card.css">

  <main class="main-content">
    <div class="content-wrapper">

      <!-- 1. È°µÈù¢È°∂ÈÉ®Âå∫Âüü -->
      <section class="page-header">
        <div class="header-content">
          <div class="header-icon">
            <div class="section-icon coding">
            <i class="fas fa-code"></i>
            </div>
          </div>
          <div class="header-text">
          <h1 class="page-title">Coding Games</h1>
          <p class="page-description">
              Learn programming fundamentals through gamification. From basic logic to advanced coding concepts, start your journey into computer science today with interactive coding challenges and programming puzzles designed for all skill levels.
            </p>
          </div>
        </div>
      </section>

      <!-- 2. ÁâπËâ≤Ê∏∏ÊàèÊ®°Âùó -->
      <section class="game-module featured-module">
        <div class="module-header">
          <div class="module-icon featured-icon">
            <i class="fas fa-star"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Featured Coding Games</h2>
            <p class="module-subtitle">Hand-picked programming games to start your coding adventure</p>
          </div>
        </div>
        
        <div class="games-grid">
          {featuredGames.map((game, index) => {
            const popularity = Math.floor(Math.random() * 15000) + 500;
            const formatPopularity = (num) => {
              if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
              if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
              return num.toString();
            };
            
            const playHistory = ['Today', 'Yesterday', 'A few days ago', null];
            const randomHistory = playHistory[Math.floor(Math.random() * playHistory.length)];
            
            return (
              <div class="game-card coding-theme featured animate-fadeInUp" style={`animation-delay: ${index * 0.1}s`} data-game-id={game.id}>
                <div class="game-image-container">
                  <img src={game.image} alt={game.title} class="game-image" />
                  <div class="game-overlay">
                    {randomHistory && (
                      <div class={`played-badge ${
                        randomHistory === 'Today' ? 'today' : 
                        randomHistory === 'Yesterday' ? 'yesterday' : 
                        'few-days-ago'
                      }`}>
                        {randomHistory}
                      </div>
                    )}
                    <div class="popularity-badge">
                      üî• {formatPopularity(popularity)}
                    </div>
                    <button class="play-button" onclick={`window.location.href='${game.url}'`}>
                      <i class="fas fa-play"></i>
                      <span>Play Now</span>
                    </button>
                </div>
              </div>
              <div class="game-info">
                <h3 class="game-title">{game.title}</h3>
                  <div class="game-tags">
                    <span class="category-tag coding">Coding</span>
                    <span class="feature-tag featured">FEATURED</span>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </section>

      <!-- 3. ÂÆπÊòìÈöæÂ∫¶Ê∏∏ÊàèÊ®°Âùó -->
      {easyGames.length > 0 && (
        <section class="game-module difficulty-module easy-module">
          <div class="module-header">
            <div class="module-icon easy-icon">
              <i class="fas fa-smile"></i>
            </div>
            <div class="module-title-group">
              <h2 class="module-title">Beginner Friendly</h2>
              <p class="module-subtitle">Perfect for coding newcomers and young learners</p>
            </div>
          </div>
          
            <div class="games-grid">
            {easyGames.map((game, index) => {
              const popularity = Math.floor(Math.random() * 8000) + 300;
              const formatPopularity = (num) => {
                if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
                if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
                return num.toString();
              };
              
              return (
                <div class="game-card coding-theme animate-fadeInUp" style={`animation-delay: ${index * 0.1}s`} data-game-id={game.id}>
                  <div class="game-image-container">
                    <img src={game.image} alt={game.title} class="game-image" />
                    <div class="game-overlay">
                      <div class="popularity-badge">
                        ‚≠ê {formatPopularity(popularity)}
                      </div>
                      <button class="play-button" onclick={`window.location.href='${game.url}'`}>
                        <i class="fas fa-play"></i>
                        <span>Play Now</span>
                      </button>
                    </div>
                  </div>
                  <div class="game-info">
                    <h3 class="game-title">{game.title}</h3>
                      <div class="game-tags">
                      <span class="category-tag coding">Coding</span>
                      <span class="difficulty-tag easy">EASY</span>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </section>
      )}

      <!-- 4. ‰∏≠Á≠âÈöæÂ∫¶Ê∏∏ÊàèÊ®°Âùó -->
      {mediumGames.length > 0 && (
        <section class="game-module difficulty-module medium-module">
          <div class="module-header">
            <div class="module-icon medium-icon">
              <i class="fas fa-meh"></i>
            </div>
            <div class="module-title-group">
              <h2 class="module-title">Intermediate Challenges</h2>
              <p class="module-subtitle">Build on your coding foundation with more complex problems</p>
            </div>
          </div>
          
          <div class="games-grid">
            {mediumGames.map((game, index) => {
              const popularity = Math.floor(Math.random() * 12000) + 800;
              const formatPopularity = (num) => {
                if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
                if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
                return num.toString();
              };
              
              return (
                <div class="game-card coding-theme animate-fadeInUp" style={`animation-delay: ${index * 0.1}s`} data-game-id={game.id}>
                  <div class="game-image-container">
                    <img src={game.image} alt={game.title} class="game-image" />
                    <div class="game-overlay">
                      <div class="popularity-badge">
                        ‚≠ê {formatPopularity(popularity)}
                      </div>
                      <button class="play-button" onclick={`window.location.href='${game.url}'`}>
                        <i class="fas fa-play"></i>
                        <span>Play Now</span>
                      </button>
                    </div>
                  </div>
                  <div class="game-info">
                    <h3 class="game-title">{game.title}</h3>
                    <div class="game-tags">
                      <span class="category-tag coding">Coding</span>
                      <span class="difficulty-tag medium">MEDIUM</span>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </section>
      )}

      <!-- 5. Âõ∞ÈöæÊ∏∏ÊàèÊ®°Âùó -->
      {hardGames.length > 0 && (
        <section class="game-module difficulty-module hard-module">
          <div class="module-header">
            <div class="module-icon hard-icon">
              <i class="fas fa-frown"></i>
            </div>
            <div class="module-title-group">
              <h2 class="module-title">Advanced Programming</h2>
              <p class="module-subtitle">Master complex algorithms and advanced coding concepts</p>
            </div>
          </div>
          
          <div class="games-grid">
            {hardGames.map((game, index) => {
              const popularity = Math.floor(Math.random() * 20000) + 1000;
              const formatPopularity = (num) => {
                if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
                if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
                return num.toString();
              };
              
              return (
                <div class="game-card coding-theme animate-fadeInUp" style={`animation-delay: ${index * 0.1}s`} data-game-id={game.id}>
                  <div class="game-image-container">
                    <img src={game.image} alt={game.title} class="game-image" />
                    <div class="game-overlay">
                      <div class="popularity-badge">
                        üî• {formatPopularity(popularity)}
                      </div>
                      <button class="play-button" onclick={`window.location.href='${game.url}'`}>
                        <i class="fas fa-play"></i>
                        <span>Play Now</span>
                      </button>
                    </div>
                  </div>
                  <div class="game-info">
                    <h3 class="game-title">{game.title}</h3>
                    <div class="game-tags">
                      <span class="category-tag coding">Coding</span>
                      <span class="difficulty-tag hard">HARD</span>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </section>
      )}

      <!-- 6. Â≠¶‰π†Âª∫ËÆÆÊ®°Âùó -->
      <section class="info-module tips-module">
        <div class="module-header">
          <div class="module-icon tips-icon">
            <i class="fas fa-lightbulb"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Coding Learning Tips</h2>
            <p class="module-subtitle">Expert advice to improve your programming skills</p>
          </div>
        </div>
        
        <div class="tips-grid">
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-clock"></i>
            </div>
            <div class="tip-content">
              <h4 class="tip-title">Practice Daily</h4>
              <p class="tip-text">Spend 15-20 minutes daily practicing coding concepts through games</p>
            </div>
          </div>
          
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-chart-line"></i>
            </div>
            <div class="tip-content">
              <h4 class="tip-title">Start Simple</h4>
              <p class="tip-text">Begin with basic concepts and gradually move to more complex programming challenges</p>
            </div>
          </div>
          
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-bug"></i>
            </div>
            <div class="tip-content">
              <h4 class="tip-title">Embrace Debugging</h4>
              <p class="tip-text">Learn to debug code - it's an essential skill for every programmer</p>
            </div>
          </div>
          
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-puzzle-piece"></i>
            </div>
            <div class="tip-content">
              <h4 class="tip-title">Break Down Problems</h4>
              <p class="tip-text">Divide complex problems into smaller, manageable pieces</p>
            </div>
          </div>
        </div>
      </section>

      <!-- 7. Ê†∏ÂøÉÊäÄËÉΩÊ®°Âùó -->
      <section class="info-module skills-module">
        <div class="module-header">
          <div class="module-icon skills-icon">
            <i class="fas fa-brain"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Core Skills You'll Develop</h2>
            <p class="module-subtitle">Essential programming abilities gained through gameplay</p>
          </div>
        </div>

        <div class="skills-grid">
          <div class="skill-item">
            <div class="skill-icon">
              <i class="fas fa-cogs"></i>
            </div>
            <div class="skill-content">
              <h4 class="skill-title">Logical Thinking</h4>
              <p class="skill-description">Develop step-by-step problem-solving approaches</p>
            </div>
          </div>

          <div class="skill-item">
            <div class="skill-icon">
              <i class="fas fa-sitemap"></i>
            </div>
            <div class="skill-content">
              <h4 class="skill-title">Algorithm Design</h4>
              <p class="skill-description">Learn to create efficient solutions to problems</p>
            </div>
          </div>

          <div class="skill-item">
            <div class="skill-icon">
              <i class="fas fa-bug"></i>
            </div>
            <div class="skill-content">
              <h4 class="skill-title">Debugging Skills</h4>
              <p class="skill-description">Master the art of finding and fixing code errors</p>
            </div>
          </div>

          <div class="skill-item">
            <div class="skill-icon">
              <i class="fas fa-code"></i>
            </div>
            <div class="skill-content">
              <h4 class="skill-title">Syntax Mastery</h4>
              <p class="skill-description">Learn programming language rules and structures</p>
            </div>
          </div>

          <div class="skill-item">
            <div class="skill-icon">
              <i class="fas fa-lightbulb"></i>
            </div>
            <div class="skill-content">
              <h4 class="skill-title">Creative Problem Solving</h4>
              <p class="skill-description">Think outside the box to find innovative solutions</p>
            </div>
          </div>
          
          <div class="skill-item">
            <div class="skill-icon">
              <i class="fas fa-calculator"></i>
            </div>
            <div class="skill-content">
              <h4 class="skill-title">Computational Thinking</h4>
              <p class="skill-description">Break down complex problems into manageable parts</p>
            </div>
          </div>
        </div>
      </section>

    </div>
  </main>

<style>
  /* ‰∏ªË¶ÅÂÜÖÂÆπÂå∫Âüü */
  .main-content {
    width: 100%;
    background: linear-gradient(135deg, #EFF6FF 0%, #DBEAFE 50%, #BFDBFE 100%);
    min-height: 100vh;
  }

  .content-wrapper {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
  }

    /* 1. È°µÈù¢Â§¥ÈÉ®Âå∫Âüü */
  .page-header {
      background: linear-gradient(135deg, #FFFBF5 0%, #FFF7ED 50%, rgba(37, 99, 235, 0.08) 100%);
    border-radius: 20px;
      padding: 2rem;
      margin-bottom: 2.5rem;
      border: 1px solid rgba(37, 99, 235, 0.15);
      box-shadow: 
        0 8px 32px rgba(37, 99, 235, 0.08),
        0 2px 8px rgba(0, 0, 0, 0.04);
    position: relative;
    overflow: hidden;
  }

  .page-header::before {
      content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
      height: 1px;
      background: linear-gradient(90deg, transparent 0%, rgba(37, 99, 235, 0.3) 50%, transparent 100%);
  }

  .header-content {
      display: flex;
      align-items: center;
      gap: 2rem;
  }

  .header-icon {
      flex-shrink: 0;
  }

    .section-icon {
      width: 72px;
      height: 72px;
    border-radius: 20px;
      background: linear-gradient(135deg, #2563EB 0%, #1D4ED8 50%, #1E40AF 100%);
    display: flex;
    align-items: center;
    justify-content: center;
      box-shadow: 
        0 8px 24px rgba(37, 99, 235, 0.25),
        0 4px 12px rgba(37, 99, 235, 0.15),
        inset 0 1px 0 rgba(255, 255, 255, 0.2);
      transition: all 0.3s ease;
      position: relative;
    }

    .section-icon:hover {
      transform: translateY(-2px) scale(1.02);
      box-shadow: 
        0 12px 32px rgba(37, 99, 235, 0.3),
        0 6px 16px rgba(37, 99, 235, 0.2),
        inset 0 1px 0 rgba(255, 255, 255, 0.2);
  }

    .header-text {
      flex: 1;
  }

  .page-title {
      font-size: 2.5rem;
      font-weight: 800;
    font-family: 'Space Grotesk', sans-serif;
      background: linear-gradient(135deg, #2563EB 0%, #1D4ED8 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin-bottom: 0.75rem;
      line-height: 1.2;
  }

  .page-description {
      font-size: 1.125rem;
      color: #64748B;
    line-height: 1.6;
      margin: 0;
  }

    /* 2-5. Ê∏∏ÊàèÊ®°ÂùóÊ†∑Âºè */
    .game-module {
      margin-bottom: 3rem;
  }

    .module-header {
    display: flex;
      align-items: flex-start;
    gap: 1rem;
      margin-bottom: 1.5rem;
      padding: 1.5rem;
      background: white;
      border-radius: 16px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
      border: 1px solid #F3F4F6;
  }

    .module-icon {
      width: 48px;
      height: 48px;
      border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
      font-size: 1.25rem;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      flex-shrink: 0;
      margin-top: 2px;
  }

    .featured-icon { background: linear-gradient(135deg, #F59E0B 0%, #D97706 100%); }
    .easy-icon { background: linear-gradient(135deg, #10B981 0%, #059669 100%); }
    .medium-icon { background: linear-gradient(135deg, #F59E0B 0%, #D97706 100%); }
    .hard-icon { background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%); }
    .tips-icon { background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%); }
    .skills-icon { background: linear-gradient(135deg, #EC4899 0%, #DB2777 100%); }

    .module-title-group {
      flex: 1;
  }

    .module-title {
      font-family: 'Space Grotesk', sans-serif;
      font-size: 1.5rem;
      font-weight: 700;
      color: #1F2937;
      margin: 0 0 0.25rem 0;
      line-height: 1.3;
    }

    .module-subtitle {
      color: #6B7280;
      font-size: 0.9rem;
      margin: 0;
      line-height: 1.4;
  }

    /* Ê∏∏ÊàèÁΩëÊ†ºÊ†∑Âºè */
  .games-grid {
    display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 1.5rem;
    }

    /* 6. Â≠¶‰π†Âª∫ËÆÆÊ®°ÂùóÊ†∑Âºè */
    .info-module {
    margin-bottom: 3rem;
  }

    .tips-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
  }

    .tip-item {
      background: white;
    border-radius: 12px;
      padding: 1.25rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
      border: 1px solid #F3F4F6;
      transition: all 0.3s ease;
      display: flex;
      gap: 0.875rem;
      align-items: flex-start;
    }

    .tip-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
      border-color: rgba(139, 92, 246, 0.2);
  }

    .tip-icon {
      width: 32px;
      height: 32px;
      border-radius: 8px;
      background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%);
    display: flex;
    align-items: center;
    justify-content: center;
      color: white;
      font-size: 0.875rem;
      flex-shrink: 0;
      margin-top: 1px;
  }

    .tip-content {
      flex: 1;
  }

    .tip-title {
      font-family: 'Space Grotesk', sans-serif;
      font-size: 0.9rem;
    font-weight: 600;
    color: #1F2937;
      margin: 0 0 0.25rem 0;
      line-height: 1.3;
  }

    .tip-text {
    color: #6B7280;
      line-height: 1.4;
      margin: 0;
      font-size: 0.8rem;
    }

    /* 7. Ê†∏ÂøÉÊäÄËÉΩÊ®°ÂùóÊ†∑Âºè */
    .skills-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
      gap: 1rem;
  }

    .skill-item {
    background: white;
      border-radius: 12px;
      padding: 1.25rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
      border: 1px solid #F3F4F6;
    transition: all 0.3s ease;
      text-align: left;
      display: flex;
      gap: 0.875rem;
      align-items: flex-start;
    }

    .skill-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
      border-color: rgba(236, 72, 153, 0.2);
  }

    .skill-icon {
      width: 32px;
      height: 32px;
      border-radius: 8px;
      background: linear-gradient(135deg, #EC4899 0%, #DB2777 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
      font-size: 0.875rem;
      flex-shrink: 0;
      margin-top: 1px;
      box-shadow: 0 2px 6px rgba(236, 72, 153, 0.3);
  }

    .skill-content {
      flex: 1;
    }

    .skill-title {
      font-family: 'Space Grotesk', sans-serif;
      font-size: 0.9rem;
      font-weight: 600;
    color: #1F2937;
      margin: 0 0 0.25rem 0;
      line-height: 1.3;
  }

    .skill-description {
    color: #6B7280;
      line-height: 1.4;
      margin: 0;
      font-size: 0.8rem;
  }

    /* Âä®ÁîªÊïàÊûú */
  @keyframes fadeInUp {
    from {
      opacity: 0;
        transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fadeInUp {
      animation: fadeInUp 0.6s ease-out;
  }

  /* ÂìçÂ∫îÂºèËÆæËÆ° */
  @media (max-width: 1024px) {
      .content-wrapper {
        padding: 1.5rem;
      }
      
    .games-grid {
        grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
        gap: 1.25rem;
      }
      
      .skills-grid {
        grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 768px) {
    .content-wrapper {
      padding: 1rem;
    }

      .header-content {
        flex-direction: column;
        align-items: center;
        text-align: center;
        gap: 1.5rem;
    }

    .page-title {
      font-size: 2rem;
    }

      .page-description {
        font-size: 1rem;
      }
      
      .module-header {
      flex-direction: column;
        align-items: center;
        text-align: center;
        gap: 1rem;
        padding: 1.25rem;
      }
      
      .games-grid {
        grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }

      .tips-grid {
        grid-template-columns: 1fr;
      }
      
      .skills-grid {
        grid-template-columns: 1fr;
      }
      
      .tip-icon, .skill-icon {
        width: 28px;
        height: 28px;
        font-size: 0.75rem;
      }
      
      .tip-title, .skill-title {
        font-size: 0.875rem;
      }
      
      .tip-text, .skill-description {
        font-size: 0.75rem;
      }
    }

    @media (max-width: 640px) {
    .games-grid {
      grid-template-columns: 1fr;
    }

      .section-icon {
        width: 60px;
        height: 60px;
    }

      .page-title {
        font-size: 1.75rem;
    }
  }
</style> 
</BaseLayout>


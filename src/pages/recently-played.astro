---
import BaseLayout from '../layouts/BaseLayout.astro';
import GameCard from '../components/GameCard.astro';
import type { Game } from '../types/game';
import fs from 'fs';
import path from 'path';

const seoData = {
  title: "Recently Played Games | Your Game History | EduGameHQ",
  description: "View your recently played educational games and continue your learning journey. Track your progress across math, science, coding, and language games.",
  keywords: ["recently played games", "game history", "continue playing", "track progress", "learning history", "educational games history"],
  ogImage: "/images/recently-played-og.jpg"
};

// 从JSON文件读取游戏数据
const gamesDataPath = path.join(process.cwd(), 'src/data/games.json');
let allGamesData: Game[] = [];

try {
  const fileContent = fs.readFileSync(gamesDataPath, 'utf-8');
  allGamesData = JSON.parse(fileContent) as Game[];
} catch (error) {
  console.warn('Unable to read games data file:', error);
}

// 获取最近玩过的游戏（模拟数据 - 随机选择）
const recentlyPlayedGames = allGamesData
  .filter(() => Math.random() > 0.7) // 随机选择30%的游戏作为"最近玩过"
  .slice(0, 12);
---

<BaseLayout title={seoData.title} description={seoData.description}>
  <!-- 引入统一游戏卡片样式 -->
  <link rel="stylesheet" href="/src/styles/game-card.css">
  
  <main class="main-content">
    <div class="content-wrapper">

      <!-- 1. 页面顶部区域 -->
      <section class="page-header">
        <div class="header-content">
          <div class="header-icon">
            <div class="section-icon recent">
              <i class="fas fa-history"></i>
            </div>
          </div>
          <div class="header-text">
            <h1 class="page-title">Recently Played</h1>
            <p class="page-description">
              Continue your learning journey! Pick up where you left off with your recently played educational games.
            </p>
          </div>
        </div>
        
        <div class="header-actions">
          <button id="clearHistoryBtn" class="clear-history-btn">
            <i class="fas fa-trash-alt"></i>
            <span>Clear History</span>
          </button>
        </div>
      </section>

      <!-- 2. 最近游戏列表 -->
      {recentlyPlayedGames.length > 0 && (
        <section class="game-module recent-module">
        <div class="module-header">
          <div class="module-icon recent-icon">
            <i class="fas fa-gamepad"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Your Recent Games</h2>
            <p class="module-subtitle">Continue where you left off</p>
          </div>
        </div>
        
        <div class="games-grid">
            {recentlyPlayedGames.map((game) => (
              <GameCard game={game} showPlayHistory={true} showPopularity={true} showFavorite={true} />
            ))}
        </div>
      </section>
      )}

      <!-- 3. 学习建议模块 -->
      <section class="info-module tips-module">
        <div class="module-header">
          <div class="module-icon tips-icon">
            <i class="fas fa-lightbulb"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Learning Tips</h2>
            <p class="module-subtitle">Maximize your educational gaming experience</p>
          </div>
        </div>
        
        <div class="tips-grid">
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-lightbulb"></i>
            </div>
            <div class="tip-content">
              <h4 class="tip-title">Keep Learning!</h4>
              <p class="tip-text">Regular practice helps reinforce learning. Try to play educational games for 15-20 minutes daily for best results.</p>
            </div>
          </div>
          
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-bullseye"></i>
            </div>
            <div class="tip-content">
              <h4 class="tip-title">Set Goals</h4>
              <p class="tip-text">Challenge yourself to complete one game per day or master a specific skill through repeated practice.</p>
            </div>
          </div>
          
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-chart-line"></i>
            </div>
            <div class="tip-content">
              <h4 class="tip-title">Track Progress</h4>
              <p class="tip-text">Your game history helps you see your learning journey and identify areas where you've improved.</p>
            </div>
          </div>
          
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-redo"></i>
            </div>
            <div class="tip-content">
              <h4 class="tip-title">Keep Practicing</h4>
              <p class="tip-text">Return to games you've played before to reinforce learning and improve your skills over time.</p>
            </div>
          </div>
        </div>
      </section>

    </div>
  </main>

  <!-- 简化的游戏历史管理JavaScript -->
  <script is:inline>
    // 简化的游戏历史管理
    class RecentGamesManager {
      constructor() {
        this.init();
      }

      // 初始化
      init() {
        this.initializeClearButton();
        this.updateRecentlyPlayedDisplay();
        console.log('✅ 最近游戏管理器初始化完成');
      }

      // 初始化清除按钮
      initializeClearButton() {
        console.log('🔧 正在初始化清除按钮...');
        const clearBtn = document.getElementById('clearHistoryBtn');
        console.log('清除按钮元素:', clearBtn);
        
        if (clearBtn) {
          console.log('✅ 找到清除按钮，正在绑定事件...');
          clearBtn.addEventListener('click', (e) => {
            console.log('🖱️ 清除按钮被点击了！');
            e.preventDefault();
            e.stopPropagation();
            this.clearHistory();
          });
          console.log('✅ 清除按钮事件绑定完成');
        } else {
          console.error('❌ 未找到清除按钮元素 (ID: clearHistoryBtn)');
        }
      }

      // 更新最近游戏显示
      updateRecentlyPlayedDisplay() {
        const history = JSON.parse(localStorage.getItem('gameHistory') || '{}');
        if (Object.keys(history).length === 0) {
          console.log('没有游戏历史记录');
          return;
        }
        
        // 这里可以根据实际历史记录更新显示
        console.log(`发现 ${Object.keys(history).length} 个游戏历史记录`);
      }

      // 清除游戏历史
      clearHistory() {
        console.log('🗑️ clearHistory函数被调用');
        console.log('当前this对象:', this);
        
        // 创建自定义确认对话框
        this.showCustomConfirm(
          'Clear Game History?',
          'Are you sure you want to clear your game history? This action cannot be undone.',
          () => {
            localStorage.removeItem('gameHistory');
            localStorage.removeItem('gamePopularity');
            console.log('🗑️ Game history cleared');
            
            // 显示成功提示
            this.showSuccessMessage('Game history has been cleared successfully!');
            
            // 延迟刷新页面
            setTimeout(() => {
              location.reload();
            }, 1500);
          }
        );
      }

      // 显示自定义确认对话框
      showCustomConfirm(title, message, onConfirm) {
        console.log('📝 showCustomConfirm函数被调用');
        console.log('参数:', { title, message, onConfirm });
        
        // 移除已存在的对话框
        const existingOverlay = document.querySelector('.custom-confirm-overlay');
        if (existingOverlay) {
          existingOverlay.remove();
        }
        
        // 创建遮罩层
        const overlay = document.createElement('div');
        overlay.className = 'custom-confirm-overlay';
        overlay.style.cssText = `
          position: fixed !important;
          top: 0 !important;
          left: 0 !important;
          right: 0 !important;
          bottom: 0 !important;
          background: rgba(0, 0, 0, 0.5) !important;
          display: flex !important;
          align-items: center !important;
          justify-content: center !important;
          z-index: 10000 !important;
          opacity: 0 !important;
          visibility: hidden !important;
          transition: all 0.3s ease !important;
          backdrop-filter: blur(4px) !important;
        `;
        
        // 创建对话框
        const dialog = document.createElement('div');
        dialog.className = 'custom-confirm-dialog';
        dialog.style.cssText = `
          background: white !important;
          border-radius: 20px !important;
          padding: 0 !important;
          max-width: 480px !important;
          width: 90% !important;
          box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25) !important;
          transform: scale(0.9) translateY(-20px) !important;
          transition: all 0.3s ease !important;
          overflow: hidden !important;
          border: 1px solid rgba(0, 0, 0, 0.1) !important;
        `;
        
        dialog.innerHTML = `
          <div class="confirm-header" style="padding: 2rem 2rem 1rem !important; text-align: center !important; background: linear-gradient(135deg, #FEF3C7 0%, #FDE68A 100%) !important; border-bottom: 1px solid rgba(0, 0, 0, 0.05) !important;">
            <i class="fas fa-exclamation-triangle confirm-icon" style="font-size: 3rem !important; color: #F59E0B !important; margin-bottom: 1rem !important; display: block !important; animation: pulse 2s infinite !important;"></i>
            <h3 class="confirm-title" style="font-family: 'Space Grotesk', sans-serif !important; font-size: 1.5rem !important; font-weight: 700 !important; color: #1F2937 !important; margin: 0 !important; line-height: 1.3 !important;">${title}</h3>
          </div>
          <div class="confirm-body" style="padding: 1.5rem 2rem !important; text-align: center !important;">
            <p class="confirm-message" style="color: #6B7280 !important; font-size: 1rem !important; line-height: 1.6 !important; margin: 0 !important;">${message}</p>
          </div>
          <div class="confirm-actions" style="padding: 1rem 2rem 2rem !important; display: flex !important; gap: 1rem !important; justify-content: center !important;">
            <button class="confirm-btn cancel-btn" id="confirmCancel" style="display: flex !important; align-items: center !important; gap: 0.5rem !important; padding: 0.875rem 1.5rem !important; border: 2px solid #E5E7EB !important; border-radius: 12px !important; font-weight: 600 !important; font-size: 0.95rem !important; cursor: pointer !important; transition: all 0.3s ease !important; min-width: 120px !important; justify-content: center !important; background: #F3F4F6 !important; color: #6B7280 !important;">
              <i class="fas fa-times"></i>
              Cancel
            </button>
            <button class="confirm-btn confirm-btn-primary" id="confirmYes" style="display: flex !important; align-items: center !important; gap: 0.5rem !important; padding: 0.875rem 1.5rem !important; border: none !important; border-radius: 12px !important; font-weight: 600 !important; font-size: 0.95rem !important; cursor: pointer !important; transition: all 0.3s ease !important; min-width: 120px !important; justify-content: center !important; background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%) !important; color: white !important; box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3) !important;">
              <i class="fas fa-check"></i>
              Clear History
            </button>
          </div>
        `;
        
        overlay.appendChild(dialog);
        document.body.appendChild(overlay);
        
        console.log('✅ 对话框已添加到DOM');
        
        // 添加动画
        setTimeout(() => {
          overlay.style.opacity = '1';
          overlay.style.visibility = 'visible';
          dialog.style.transform = 'scale(1) translateY(0)';
          console.log('✅ 对话框动画已触发');
        }, 10);
        
        // 绑定事件
        const cancelBtn = dialog.querySelector('#confirmCancel');
        const yesBtn = dialog.querySelector('#confirmYes');
        
        const closeDialog = () => {
          console.log('🔒 关闭对话框');
          overlay.style.opacity = '0';
          overlay.style.visibility = 'hidden';
          setTimeout(() => {
            if (document.body.contains(overlay)) {
              document.body.removeChild(overlay);
            }
          }, 300);
        };
        
        cancelBtn.addEventListener('click', closeDialog);
        yesBtn.addEventListener('click', () => {
          console.log('✅ 用户确认清除历史');
          closeDialog();
          onConfirm();
        });
        
        // 点击遮罩层关闭
        overlay.addEventListener('click', (e) => {
          if (e.target === overlay) {
            closeDialog();
          }
        });
        
        // ESC键关闭
        const handleEsc = (e) => {
          if (e.key === 'Escape') {
            closeDialog();
            document.removeEventListener('keydown', handleEsc);
          }
        };
        document.addEventListener('keydown', handleEsc);
      }

      // 显示成功提示
      showSuccessMessage(message) {
        console.log('🎉 显示成功提示:', message);
        
        // 移除已存在的提示
        const existingToast = document.querySelector('.success-toast');
        if (existingToast) {
          existingToast.remove();
        }
        
        const toast = document.createElement('div');
        toast.className = 'success-toast';
        toast.style.cssText = `
          position: fixed !important;
          top: 2rem !important;
          right: 2rem !important;
          background: linear-gradient(135deg, #10B981 0%, #059669 100%) !important;
          color: white !important;
          padding: 1rem 1.5rem !important;
          border-radius: 12px !important;
          box-shadow: 0 10px 25px rgba(16, 185, 129, 0.3) !important;
          z-index: 10001 !important;
          display: flex !important;
          align-items: center !important;
          gap: 0.75rem !important;
          font-weight: 600 !important;
          font-size: 0.95rem !important;
          transform: translateX(100%) !important;
          opacity: 0 !important;
          transition: all 0.3s ease !important;
          max-width: 350px !important;
        `;
        
        toast.innerHTML = `
          <i class="fas fa-check-circle" style="font-size: 1.25rem !important; flex-shrink: 0 !important;"></i>
          <span>${message}</span>
        `;
        
        document.body.appendChild(toast);
        console.log('✅ 成功提示已添加到DOM');
        
        // 添加动画
        setTimeout(() => {
          toast.style.transform = 'translateX(0)';
          toast.style.opacity = '1';
          console.log('✅ 成功提示动画已触发');
        }, 10);
        
        // 自动移除
        setTimeout(() => {
          toast.style.transform = 'translateX(100%)';
          toast.style.opacity = '0';
          setTimeout(() => {
            if (document.body.contains(toast)) {
              document.body.removeChild(toast);
              console.log('✅ 成功提示已移除');
            }
          }, 300);
        }, 3000);
      }
    }

    // 页面加载完成后初始化
    document.addEventListener('DOMContentLoaded', function() {
      window.recentGamesManager = new RecentGamesManager();
    });
  </script>
</BaseLayout>

  <style>
  /* 主要内容区域 */
    .main-content {
    width: 100%;
    background: linear-gradient(135deg, #F0F9FF 0%, #E0F2FE 50%, rgba(14, 165, 233, 0.05) 100%);
      min-height: 100vh;
    }

    .content-wrapper {
      max-width: 1400px;
      margin: 0 auto;
    padding: 2rem;
    }

  /* 1. 页面头部区域 */
    .page-header {
    background: linear-gradient(135deg, #E0F2FE 0%, #BAE6FD 50%, rgba(14, 165, 233, 0.08) 100%);
      border-radius: 20px;
      padding: 2rem;
      margin-bottom: 2.5rem;
      border: 1px solid rgba(14, 165, 233, 0.15);
      box-shadow: 
        0 8px 32px rgba(14, 165, 233, 0.08),
        0 2px 8px rgba(0, 0, 0, 0.04);
      position: relative;
      overflow: hidden;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .page-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 1px;
      background: linear-gradient(90deg, transparent 0%, rgba(14, 165, 233, 0.3) 50%, transparent 100%);
    }

    .header-content {
      display: flex;
      align-items: center;
      gap: 2rem;
    }

    .header-icon {
      flex-shrink: 0;
    }

    .section-icon {
      width: 72px;
      height: 72px;
      border-radius: 20px;
      background: linear-gradient(135deg, #0EA5E9 0%, #0284C7 50%, #0369A1 100%);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 1.75rem;
      box-shadow: 
        0 8px 24px rgba(14, 165, 233, 0.3),
        0 4px 12px rgba(14, 165, 233, 0.2);
      transition: all 0.3s ease;
    }

    .section-icon:hover {
      transform: translateY(-2px) scale(1.02);
      box-shadow: 
        0 12px 32px rgba(14, 165, 233, 0.4),
        0 6px 16px rgba(14, 165, 233, 0.3);
    }

    .header-text {
      flex: 1;
    }

    .page-title {
      font-size: 2.5rem;
      font-weight: 800;
      font-family: 'Space Grotesk', sans-serif;
      background: linear-gradient(135deg, #0EA5E9 0%, #0284C7 50%, #0369A1 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin: 0 0 0.5rem 0;
      line-height: 1.2;
    }

    .page-description {
      font-size: 1.125rem;
      color: #64748B;
      margin: 0;
      line-height: 1.6;
    }

    .header-actions {
      flex-shrink: 0;
    }

    .clear-history-btn {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.75rem 1.5rem;
      background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
      color: white;
      border: none;
      border-radius: 12px;
      font-weight: 600;
      font-size: 0.875rem;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
    }

    .clear-history-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(239, 68, 68, 0.4);
      background: linear-gradient(135deg, #DC2626 0%, #B91C1C 100%);
    }

  /* 通用模块样式 */
  .game-module,
  .info-module {
      margin-bottom: 3rem;
    }

    .module-header {
      display: flex;
      align-items: flex-start;
      gap: 1rem;
      margin-bottom: 1.5rem;
      padding: 1.5rem;
      background: white;
      border-radius: 16px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
      border: 1px solid #F3F4F6;
    }

    .module-icon {
      width: 48px;
      height: 48px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
    color: white;
      font-size: 1.25rem;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      flex-shrink: 0;
    margin-top: 2px;
    }

    .recent-icon {
      background: linear-gradient(135deg, #0EA5E9 0%, #0284C7 100%);
    }

    .tips-icon {
      background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%);
    }

    .module-title-group {
      flex: 1;
    }

    .module-title {
    font-family: 'Space Grotesk', sans-serif;
      font-size: 1.5rem;
      font-weight: 700;
      color: #1F2937;
      margin: 0 0 0.25rem 0;
    line-height: 1.3;
    }

    .module-subtitle {
    color: #6B7280;
      font-size: 0.9rem;
      margin: 0;
    line-height: 1.4;
    }

  /* 学习建议模块 */
  .tips-grid {
      display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    }

  .tip-item {
      background: white;
    border-radius: 12px;
    padding: 1.25rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
      border: 1px solid #F3F4F6;
      transition: all 0.3s ease;
      display: flex;
    gap: 0.875rem;
      align-items: flex-start;
    }

  .tip-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
      border-color: rgba(139, 92, 246, 0.2);
    }

    .tip-icon {
      width: 32px;
      height: 32px;
      border-radius: 8px;
      background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 0.875rem;
      flex-shrink: 0;
    margin-top: 1px;
    }

    .tip-content {
      flex: 1;
    }

    .tip-title {
    font-family: 'Space Grotesk', sans-serif;
      font-size: 0.9rem;
      font-weight: 600;
      color: #1F2937;
    margin: 0 0 0.25rem 0;
    line-height: 1.3;
    }

  .tip-text {
      color: #6B7280;
    line-height: 1.4;
      margin: 0;
    font-size: 0.8rem;
  }

  /* 动画效果 */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fadeInUp {
    animation: fadeInUp 0.6s ease-out forwards;
    }

    /* 自定义确认对话框样式 */
    .custom-confirm-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
      backdrop-filter: blur(4px);
    }

    .custom-confirm-overlay.show {
      opacity: 1;
      visibility: visible;
    }

    .custom-confirm-dialog {
      background: white;
      border-radius: 20px;
      padding: 0;
      max-width: 480px;
      width: 90%;
      box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
      transform: scale(0.9) translateY(-20px);
      transition: all 0.3s ease;
      overflow: hidden;
      border: 1px solid rgba(0, 0, 0, 0.1);
    }

    .custom-confirm-overlay.show .custom-confirm-dialog {
      transform: scale(1) translateY(0);
    }

    .confirm-header {
      padding: 2rem 2rem 1rem;
      text-align: center;
      background: linear-gradient(135deg, #FEF3C7 0%, #FDE68A 100%);
      border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }

    .confirm-icon {
      font-size: 3rem;
      color: #F59E0B;
      margin-bottom: 1rem;
      display: block;
      animation: pulse 2s infinite;
    }

    @keyframes pulse {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.05); }
    }

    .confirm-title {
      font-family: 'Space Grotesk', sans-serif;
      font-size: 1.5rem;
      font-weight: 700;
      color: #1F2937;
      margin: 0;
      line-height: 1.3;
    }

    .confirm-body {
      padding: 1.5rem 2rem;
      text-align: center;
    }

    .confirm-message {
      color: #6B7280;
      font-size: 1rem;
      line-height: 1.6;
      margin: 0;
    }

    .confirm-actions {
      padding: 1rem 2rem 2rem;
      display: flex;
      gap: 1rem;
      justify-content: center;
    }

    .confirm-btn {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.875rem 1.5rem;
      border: none;
      border-radius: 12px;
      font-weight: 600;
      font-size: 0.95rem;
      cursor: pointer;
      transition: all 0.3s ease;
      min-width: 120px;
      justify-content: center;
    }

    .cancel-btn {
      background: #F3F4F6;
      color: #6B7280;
      border: 2px solid #E5E7EB;
    }

    .cancel-btn:hover {
      background: #E5E7EB;
      color: #4B5563;
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .confirm-btn-primary {
      background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
      color: white;
      box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
    }

    .confirm-btn-primary:hover {
      background: linear-gradient(135deg, #DC2626 0%, #B91C1C 100%);
      transform: translateY(-1px);
      box-shadow: 0 6px 16px rgba(239, 68, 68, 0.4);
    }

    /* 移动端适配 */
    @media (max-width: 768px) {
      .custom-confirm-dialog {
        max-width: 90%;
        margin: 1rem;
      }

      .confirm-header {
        padding: 1.5rem 1.5rem 0.75rem;
      }

      .confirm-icon {
        font-size: 2.5rem;
        margin-bottom: 0.75rem;
      }

      .confirm-title {
        font-size: 1.25rem;
      }

      .confirm-body {
        padding: 1rem 1.5rem;
      }

      .confirm-message {
        font-size: 0.9rem;
      }

      .confirm-actions {
        padding: 0.75rem 1.5rem 1.5rem;
        flex-direction: column;
      }

      .confirm-btn {
        min-width: auto;
        width: 100%;
      }

      .success-toast {
        top: 1rem;
        right: 1rem;
        left: 1rem;
        max-width: none;
        font-size: 0.9rem;
      }
    }

    /* 响应式设计 */
    @media (max-width: 1024px) {
      .tips-grid {
        grid-template-columns: 1fr;
      }

      .header-content {
        gap: 1.5rem;
      }

      .page-title {
        font-size: 2.25rem;
      }

      .page-description {
        font-size: 1rem;
      }
    }

    @media (max-width: 768px) {
      .content-wrapper {
      padding: 1rem;
      }

      .page-header {
        flex-direction: column;
        text-align: center;
        gap: 1.5rem;
      padding: 1.5rem;
      margin-bottom: 2rem;
      border-radius: 18px;
      }

      .header-content {
        flex-direction: column;
      text-align: center;
      gap: 1.25rem;
    }

    .header-text {
      text-align: center;
    }

    .section-icon {
      width: 64px;
      height: 64px;
      font-size: 1.5rem;
      border-radius: 18px;
      }

      .page-title {
        font-size: 2rem;
      }

      .page-description {
        font-size: 1rem;
      }

      .clear-history-btn {
        width: 100%;
        justify-content: center;
      }

    .module-header {
      flex-direction: column;
      text-align: center;
      gap: 0.75rem;
      padding: 1.25rem;
    }

    .module-icon {
      width: 44px;
      height: 44px;
      font-size: 1.125rem;
      margin-top: 0;
    }

    .module-title {
      font-size: 1.375rem;
    }

    .module-subtitle {
      font-size: 0.875rem;
    }

    .game-module,
    .info-module {
      margin-bottom: 2.5rem;
      }

    .tips-grid {
        grid-template-columns: 1fr;
      }

    .tip-item {
      padding: 1rem;
      gap: 0.75rem;
    }
    
    .tip-icon {
      width: 28px;
      height: 28px;
      font-size: 0.75rem;
      }

    .tip-title {
      font-size: 0.875rem;
      }

    .tip-text {
      font-size: 0.75rem;
      }
    }

  @media (max-width: 640px) {
    .page-header {
      padding: 1.25rem;
      border-radius: 16px;
    }

    .header-content {
      gap: 1rem;
    }

    .page-title {
      font-size: 1.75rem;
    }

    .section-icon {
      width: 56px;
      height: 56px;
      font-size: 1.25rem;
      border-radius: 16px;
    }

    .page-description {
      font-size: 0.95rem;
    }

    .clear-history-btn {
      padding: 0.625rem 1.25rem;
      font-size: 0.8rem;
    }

    .module-title {
      font-size: 1.25rem;
    }

    .module-header {
      padding: 1rem;
    }

    .tip-item {
      padding: 0.875rem;
    }
    }
  </style>



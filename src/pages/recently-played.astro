---
import BaseLayout from '../layouts/BaseLayout.astro';
import GameCard from '../components/GameCard.astro';
import type { Game } from '../types/game';
import fs from 'fs';
import path from 'path';

// 导入样式文件
import '../styles/game-card.css';

const seoData = {
  title: "Recently Played Games | Your Game History | EduGameHQ",
  description: "View your recently played educational games and continue your learning journey. Track your progress across math, science, coding, and language games.",
  keywords: ["recently played games", "game history", "continue playing", "track progress", "learning history", "educational games history"],
  ogImage: "/images/recently-played-og.jpg"
};

// 从JSON文件读取游戏数据
const gamesDataPath = path.join(process.cwd(), 'src/data/games.json');
let allGamesData: Game[] = [];

try {
  const fileContent = fs.readFileSync(gamesDataPath, 'utf-8');
  allGamesData = JSON.parse(fileContent) as Game[];
} catch (error) {
  console.warn('Unable to read games data file:', error);
}

// 获取最近玩过的游戏（模拟数据 - 随机选择）
const recentlyPlayedGames = allGamesData
  .filter(() => Math.random() > 0.7) // 随机选择30%的游戏作为"最近玩过"
  .slice(0, 12);
---

<BaseLayout title={seoData.title} description={seoData.description}>
  <!-- 引入统一游戏卡片样式 -->
  
  
  <main class="main-content">
    <div class="content-wrapper">

      <!-- 1. 页面顶部区域 -->
      <section class="page-header">
        <div class="header-content">
          <div class="header-icon">
            <div class="section-icon recent">
              <i class="fas fa-history"></i>
            </div>
          </div>
          <div class="header-text">
            <h1 class="page-title">Recently Played</h1>
            <p class="page-description">
              Continue your learning journey! Pick up where you left off with your recently played educational games.
            </p>
          </div>
        </div>
        
        <div class="header-actions">
          <button id="clearHistoryBtn" class="clear-history-btn">
            <i class="fas fa-trash-alt"></i>
            <span>Clear History</span>
          </button>
        </div>
      </section>

      <!-- 2. 最近游戏列表 -->
      {recentlyPlayedGames.length > 0 && (
        <section class="game-module recent-module">
        <div class="module-header">
          <div class="module-icon recent-icon">
            <i class="fas fa-gamepad"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Your Recent Games</h2>
            <p class="module-subtitle">Continue where you left off</p>
          </div>
        </div>
        
        <div class="games-grid">
            {recentlyPlayedGames.map((game) => (
              <GameCard game={game} showPlayHistory={true} showPopularity={true} showFavorite={true} />
            ))}
        </div>
      </section>
      )}

      <!-- 3. 学习建议模块 -->
      <section class="info-module tips-module">
        <div class="module-header">
          <div class="module-icon tips-icon">
            <i class="fas fa-lightbulb"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Learning Tips</h2>
            <p class="module-subtitle">Maximize your educational gaming experience</p>
          </div>
        </div>
        
        <div class="tips-grid">
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-lightbulb"></i>
            </div>
            <div class="tip-content">
              <h4 class="tip-title">Keep Learning!</h4>
              <p class="tip-text">Regular practice helps reinforce learning. Try to play educational games for 15-20 minutes daily for best results.</p>
            </div>
          </div>
          
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-bullseye"></i>
            </div>
            <div class="tip-content">
              <h4 class="tip-title">Set Goals</h4>
              <p class="tip-text">Challenge yourself to complete one game per day or master a specific skill through repeated practice.</p>
            </div>
          </div>
          
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-chart-line"></i>
            </div>
            <div class="tip-content">
              <h4 class="tip-title">Track Progress</h4>
              <p class="tip-text">Your game history helps you see your learning journey and identify areas where you've improved.</p>
            </div>
          </div>
          
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-redo"></i>
            </div>
            <div class="tip-content">
              <h4 class="tip-title">Keep Practicing</h4>
              <p class="tip-text">Return to games you've played before to reinforce learning and improve your skills over time.</p>
            </div>
          </div>
        </div>
      </section>

    </div>
  </main>

  <!-- 最近游戏管理器 -->
  <script is:inline>
    // 增强的最近游戏管理器 - 集成真实统计数据
    class RecentlyPlayedManager {
      constructor() {
        this.storageKey = 'gameHistory';
        this.init();
      }

      // 初始化
      init() {
        // 等待统计管理器加载
        if (typeof window.gameStatsManager === 'undefined') {
          setTimeout(() => this.init(), 100);
          return;
        }

        this.loadRecentGames();
        this.setupEventListeners();
        this.setupRealTimeUpdates();
        console.log('⏱️ 最近游戏管理器初始化完成');
      }

      // 加载最近游戏 - 使用真实数据
      loadRecentGames() {
        if (typeof window.gameStatsManager === 'undefined') return;

        // 获取真实的最近游戏数据
        const recentGames = window.gameStatsManager.getRecentGames(20);
        
        console.log('📊 最近游戏数据:', recentGames);
        
        if (recentGames.length === 0) {
          this.showEmptyState();
          return;
        }

        // 隐藏空状态
        this.hideEmptyState();

        // 更新页面显示
        this.updateRecentGamesDisplay(recentGames);
        this.updatePageStats(recentGames);
      }

      // 更新最近游戏显示
      updateRecentGamesDisplay(recentGames) {
        const gamesGrid = document.querySelector('.games-grid');
        if (!gamesGrid) return;

        // 获取当前显示的游戏卡片
        const existingCards = gamesGrid.querySelectorAll('.game-card');
        
        // 更新现有卡片的历史标签和人气值
        existingCards.forEach(card => {
          const gameSlug = card.dataset.gameId;
          if (!gameSlug) return;

          // 查找对应的历史数据
          const gameHistory = recentGames.find(g => g.slug === gameSlug);
          if (gameHistory) {
            // 更新历史标签
            this.updateHistoryLabel(card, gameHistory);
            
            // 更新人气值
            this.updatePopularity(card, gameSlug);

            // 添加最近播放标识
            this.addRecentBadge(card, gameHistory);
          }
        });
        
        // 重新排序卡片（根据最近播放时间）
        this.reorderCardsByRecency(gamesGrid, recentGames);
      }

      // 更新历史标签
      updateHistoryLabel(card, gameHistory) {
        const badgeContainer = card.querySelector('.played-badge-container');
        if (!badgeContainer) return;

        const historyLabel = window.gameStatsManager.getPlayHistoryLabel(gameHistory.slug);
        if (historyLabel) {
          const badgeClass = this.getHistoryBadgeClass(historyLabel);
          badgeContainer.innerHTML = `<div class="played-badge ${badgeClass}">${historyLabel}</div>`;
        }
      }

      // 更新人气值
      updatePopularity(card, gameSlug) {
        const popularityStat = card.querySelector('.popularity-stat .popularity-count');
        if (popularityStat) {
          const popularity = window.gameStatsManager.getPopularity(gameSlug);
          popularityStat.textContent = this.formatPopularity(popularity) + ' popular';
          }
      }

      // 添加最近播放标识
      addRecentBadge(card, gameHistory) {
        const badgesContainer = card.querySelector('.game-badges');
        if (!badgesContainer) return;
        
        // 移除现有的最近播放标识
        const existingBadge = badgesContainer.querySelector('.badge.recent');
        if (existingBadge) {
          existingBadge.remove();
        }
        
        // 根据播放时间添加相应标识
        const playDate = new Date(gameHistory.timestamp);
        const now = new Date();
        const diffHours = (now - playDate) / (1000 * 60 * 60);

        if (diffHours <= 1) {
          // 1小时内播放
          const recentBadge = document.createElement('span');
          recentBadge.className = 'badge recent';
          recentBadge.textContent = 'JUST PLAYED';
          badgesContainer.appendChild(recentBadge);
        } else if (diffHours <= 24) {
          // 24小时内播放
          const recentBadge = document.createElement('span');
          recentBadge.className = 'badge recent-today';
          recentBadge.textContent = 'TODAY';
          badgesContainer.appendChild(recentBadge);
        }
      }

      // 重新排序卡片
      reorderCardsByRecency(gamesGrid, recentGames) {
        const cards = Array.from(gamesGrid.querySelectorAll('.game-card'));
        
        // 按最近播放时间排序
        cards.sort((a, b) => {
          const slugA = a.dataset.gameId;
          const slugB = b.dataset.gameId;
          
          const gameA = recentGames.find(g => g.slug === slugA);
          const gameB = recentGames.find(g => g.slug === slugB);
          
          if (!gameA && !gameB) return 0;
          if (!gameA) return 1;
          if (!gameB) return -1;
          
          return new Date(gameB.timestamp) - new Date(gameA.timestamp);
        });

        // 重新插入排序后的卡片
        cards.forEach(card => {
          gamesGrid.appendChild(card);
        });
      }

      // 更新页面统计信息
      updatePageStats(recentGames) {
        // 更新页面描述中的统计信息
        const pageDescription = document.querySelector('.page-description');
        if (pageDescription && recentGames.length > 0) {
          const totalGames = recentGames.length;
          const todayGames = recentGames.filter(game => {
            const playDate = new Date(game.timestamp);
            const today = new Date();
            return playDate.toDateString() === today.toDateString();
          }).length;

          const newDescription = `Continue your learning journey! You've played ${totalGames} games recently, including ${todayGames} today. Pick up where you left off or discover new educational adventures.`;
          pageDescription.textContent = newDescription;
        }

        // 更新活动统计模块
        this.updateActivityStats(recentGames);
      }

      // 更新活动统计
      updateActivityStats(recentGames) {
        const userStats = window.gameStatsManager.getUserStats();
        
        // 更新统计数字
        const statElements = {
          '.stat-total-games .stat-number': userStats.totalGamesInLibrary,
          '.stat-play-time .stat-number': this.formatPlayTime(userStats.totalPlayTime),
          '.stat-favorite-category .stat-number': userStats.favoriteCategory || 'None',
          '.stat-most-played .stat-number': userStats.mostPlayedGame?.title || 'None'
        };

        Object.entries(statElements).forEach(([selector, value]) => {
          const element = document.querySelector(selector);
          if (element) {
            element.textContent = value;
          }
        });
      }

      // 显示空状态
      showEmptyState() {
        const emptyState = document.querySelector('.empty-state');
        const gamesModule = document.querySelector('.game-module');
        
        if (emptyState) {
          emptyState.style.display = 'block';
        }
        if (gamesModule) {
          gamesModule.style.display = 'none';
        }
      }
        
      // 隐藏空状态
      hideEmptyState() {
        const emptyState = document.querySelector('.empty-state');
        const gamesModule = document.querySelector('.game-module');
        
        if (emptyState) {
          emptyState.style.display = 'none';
        }
        if (gamesModule) {
          gamesModule.style.display = 'block';
        }
      }

      // 设置实时更新
      setupRealTimeUpdates() {
        // 监听统计数据更新
        window.addEventListener('gameStatsUpdated', (e) => {
          if (e.detail.action === 'gameStart' || e.detail.action === 'storageChange') {
                setTimeout(() => {
              this.loadRecentGames();
            }, 500);
          }
        });

        // 监听页面可见性变化，刷新数据
        document.addEventListener('visibilitychange', () => {
          if (!document.hidden) {
            this.loadRecentGames();
            }
        });
      }

      // 设置事件监听器
      setupEventListeners() {
        // 清除历史按钮
        const clearBtn = document.querySelector('.clear-history-btn');
        if (clearBtn) {
          clearBtn.addEventListener('click', () => {
            this.clearHistory();
        });
        }

        // 刷新按钮
        const refreshBtn = document.querySelector('.refresh-btn');
        if (refreshBtn) {
          refreshBtn.addEventListener('click', () => {
            this.loadRecentGames();
        });
        }
      }
        
      // 清除历史记录
      clearHistory() {
        if (confirm('Are you sure you want to clear your game history? This action cannot be undone.')) {
          if (window.gameStatsManager) {
            window.gameStatsManager.clearAllStats();
      }

          // 显示空状态
          this.showEmptyState();
          
          // 显示通知
          this.showNotification('Game history cleared successfully', 'success');
        }
      }

      // 工具函数
      getHistoryBadgeClass(label) {
        switch (label) {
          case 'Today': return 'today';
          case 'Yesterday': return 'yesterday';
          case 'A few days ago': return 'few-days-ago';
          case '2 weeks ago': return 'weeks-ago';
          case 'A month ago': return 'month-ago';
          default: return 'default';
        }
      }

      formatPopularity(num) {
        if (!num || num === 0) return '0';
        if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
        if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
        return num.toString();
      }

      formatPlayTime(seconds) {
        if (!seconds || seconds === 0) return '0m';
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        
        if (hours > 0) {
          return `${hours}h ${minutes}m`;
        }
        return `${minutes}m`;
        }
        
      // 显示通知
      showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.style.cssText = `
          position: fixed;
          top: 2rem;
          right: 2rem;
          background: ${type === 'success' ? '#10B981' : '#6B7280'};
          color: white;
          padding: 0.75rem 1.25rem;
          border-radius: 8px;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
          z-index: 10000;
          font-weight: 600;
          transform: translateX(100%);
          transition: transform 0.3s ease;
        `;
        
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.style.transform = 'translateX(0)';
        }, 10);
        
        setTimeout(() => {
          notification.style.transform = 'translateX(100%)';
          setTimeout(() => {
            if (document.body.contains(notification)) {
              document.body.removeChild(notification);
            }
          }, 300);
        }, 3000);
      }
    }

    // 页面加载完成后初始化
    document.addEventListener('DOMContentLoaded', function() {
      window.recentlyPlayedManager = new RecentlyPlayedManager();
    });
  </script>
</BaseLayout>

  <style>
  /* 主要内容区域 */
    .main-content {
    width: 100%;
    background: linear-gradient(135deg, #F0F9FF 0%, #E0F2FE 50%, rgba(14, 165, 233, 0.05) 100%);
      min-height: 100vh;
    }

    .content-wrapper {
      max-width: 1400px;
      margin: 0 auto;
    padding: 2rem;
    }

  /* 1. 页面头部区域 */
    .page-header {
    background: linear-gradient(135deg, #E0F2FE 0%, #BAE6FD 50%, rgba(14, 165, 233, 0.08) 100%);
      border-radius: 20px;
      padding: 2rem;
      margin-bottom: 2.5rem;
      border: 1px solid rgba(14, 165, 233, 0.15);
      box-shadow: 
        0 8px 32px rgba(14, 165, 233, 0.08),
        0 2px 8px rgba(0, 0, 0, 0.04);
      position: relative;
      overflow: hidden;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .page-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 1px;
      background: linear-gradient(90deg, transparent 0%, rgba(14, 165, 233, 0.3) 50%, transparent 100%);
    }

    .header-content {
      display: flex;
      align-items: center;
      gap: 2rem;
    }

    .header-icon {
      flex-shrink: 0;
    }

    .section-icon {
      width: 72px;
      height: 72px;
      border-radius: 20px;
      background: linear-gradient(135deg, #0EA5E9 0%, #0284C7 50%, #0369A1 100%);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 1.75rem;
      box-shadow: 
        0 8px 24px rgba(14, 165, 233, 0.3),
        0 4px 12px rgba(14, 165, 233, 0.2);
      transition: all 0.3s ease;
    }

    .section-icon:hover {
      transform: translateY(-2px) scale(1.02);
      box-shadow: 
        0 12px 32px rgba(14, 165, 233, 0.4),
        0 6px 16px rgba(14, 165, 233, 0.3);
    }

    .header-text {
      flex: 1;
    }

    .page-title {
      font-size: 2.5rem;
      font-weight: 800;
      font-family: 'Space Grotesk', sans-serif;
      background: linear-gradient(135deg, #0EA5E9 0%, #0284C7 50%, #0369A1 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin: 0 0 0.5rem 0;
      line-height: 1.2;
    }

    .page-description {
      font-size: 1.125rem;
      color: #64748B;
      margin: 0;
      line-height: 1.6;
    }

    .header-actions {
      flex-shrink: 0;
    }

    .clear-history-btn {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.75rem 1.5rem;
      background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
      color: white;
      border: none;
      border-radius: 12px;
      font-weight: 600;
      font-size: 0.875rem;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
    }

    .clear-history-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(239, 68, 68, 0.4);
      background: linear-gradient(135deg, #DC2626 0%, #B91C1C 100%);
    }

  /* 通用模块样式 */
  .game-module,
  .info-module {
      margin-bottom: 3rem;
    }

    .module-header {
      display: flex;
      align-items: flex-start;
      gap: 1rem;
      margin-bottom: 1.5rem;
      padding: 1.5rem;
      background: white;
      border-radius: 16px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
      border: 1px solid #F3F4F6;
    }

    .module-icon {
      width: 48px;
      height: 48px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
    color: white;
      font-size: 1.25rem;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      flex-shrink: 0;
    margin-top: 2px;
    }

    .recent-icon {
      background: linear-gradient(135deg, #0EA5E9 0%, #0284C7 100%);
    }

    .tips-icon {
      background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%);
    }

    .module-title-group {
      flex: 1;
    }

    .module-title {
    font-family: 'Space Grotesk', sans-serif;
      font-size: 1.5rem;
      font-weight: 700;
      color: #1F2937;
      margin: 0 0 0.25rem 0;
    line-height: 1.3;
    }

    .module-subtitle {
    color: #6B7280;
      font-size: 0.9rem;
      margin: 0;
    line-height: 1.4;
    }

  /* 学习建议模块 */
  .tips-grid {
      display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    }

  .tip-item {
      background: white;
    border-radius: 12px;
    padding: 1.25rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
      border: 1px solid #F3F4F6;
      transition: all 0.3s ease;
      display: flex;
    gap: 0.875rem;
      align-items: flex-start;
    }

  .tip-item:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
      border-color: rgba(139, 92, 246, 0.2);
    }

    .tip-icon {
      width: 32px;
      height: 32px;
      border-radius: 8px;
      background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 0.875rem;
      flex-shrink: 0;
    margin-top: 1px;
    }

    .tip-content {
      flex: 1;
    }

    .tip-title {
    font-family: 'Space Grotesk', sans-serif;
      font-size: 0.9rem;
      font-weight: 600;
      color: #1F2937;
    margin: 0 0 0.25rem 0;
    line-height: 1.3;
    }

  .tip-text {
      color: #6B7280;
    line-height: 1.4;
      margin: 0;
    font-size: 0.8rem;
  }

  /* 动画效果 */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fadeInUp {
    animation: fadeInUp 0.6s ease-out forwards;
    }

    /* 自定义确认对话框样式 */
    .custom-confirm-overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 10000;
      opacity: 0;
      visibility: hidden;
      transition: all 0.3s ease;
      backdrop-filter: blur(4px);
    }

    .custom-confirm-overlay.show {
      opacity: 1;
      visibility: visible;
    }

    .custom-confirm-dialog {
      background: white;
      border-radius: 20px;
      padding: 0;
      max-width: 480px;
      width: 90%;
      box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
      transform: scale(0.9) translateY(-20px);
      transition: all 0.3s ease;
      overflow: hidden;
      border: 1px solid rgba(0, 0, 0, 0.1);
    }

    .custom-confirm-overlay.show .custom-confirm-dialog {
      transform: scale(1) translateY(0);
    }

    .confirm-header {
      padding: 2rem 2rem 1rem;
      text-align: center;
      background: linear-gradient(135deg, #FEF3C7 0%, #FDE68A 100%);
      border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }

    .confirm-icon {
      font-size: 3rem;
      color: #F59E0B;
      margin-bottom: 1rem;
      display: block;
      animation: pulse 2s infinite;
    }

    @keyframes pulse {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.05); }
    }

    .confirm-title {
      font-family: 'Space Grotesk', sans-serif;
      font-size: 1.5rem;
      font-weight: 700;
      color: #1F2937;
      margin: 0;
      line-height: 1.3;
    }

    .confirm-body {
      padding: 1.5rem 2rem;
      text-align: center;
    }

    .confirm-message {
      color: #6B7280;
      font-size: 1rem;
      line-height: 1.6;
      margin: 0;
    }

    .confirm-actions {
      padding: 1rem 2rem 2rem;
      display: flex;
      gap: 1rem;
      justify-content: center;
    }

    .confirm-btn {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.875rem 1.5rem;
      border: none;
      border-radius: 12px;
      font-weight: 600;
      font-size: 0.95rem;
      cursor: pointer;
      transition: all 0.3s ease;
      min-width: 120px;
      justify-content: center;
    }

    .cancel-btn {
      background: #F3F4F6;
      color: #6B7280;
      border: 2px solid #E5E7EB;
    }

    .cancel-btn:hover {
      background: #E5E7EB;
      color: #4B5563;
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .confirm-btn-primary {
      background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
      color: white;
      box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
    }

    .confirm-btn-primary:hover {
      background: linear-gradient(135deg, #DC2626 0%, #B91C1C 100%);
      transform: translateY(-1px);
      box-shadow: 0 6px 16px rgba(239, 68, 68, 0.4);
    }

    /* 移动端适配 */
    @media (max-width: 768px) {
      .custom-confirm-dialog {
        max-width: 90%;
        margin: 1rem;
      }

      .confirm-header {
        padding: 1.5rem 1.5rem 0.75rem;
      }

      .confirm-icon {
        font-size: 2.5rem;
        margin-bottom: 0.75rem;
      }

      .confirm-title {
        font-size: 1.25rem;
      }

      .confirm-body {
        padding: 1rem 1.5rem;
      }

      .confirm-message {
        font-size: 0.9rem;
      }

      .confirm-actions {
        padding: 0.75rem 1.5rem 1.5rem;
        flex-direction: column;
      }

      .confirm-btn {
        min-width: auto;
        width: 100%;
      }

      .success-toast {
        top: 1rem;
        right: 1rem;
        left: 1rem;
        max-width: none;
        font-size: 0.9rem;
      }
    }

    /* 响应式设计 */
    @media (max-width: 1024px) {
      .tips-grid {
        grid-template-columns: 1fr;
      }

      .header-content {
        gap: 1.5rem;
      }

      .page-title {
        font-size: 2.25rem;
      }

      .page-description {
        font-size: 1rem;
      }
    }

    @media (max-width: 768px) {
      .content-wrapper {
      padding: 1rem;
      }

      .page-header {
        flex-direction: column;
        text-align: center;
        gap: 1.5rem;
      padding: 1.5rem;
      margin-bottom: 2rem;
      border-radius: 18px;
      }

      .header-content {
        flex-direction: column;
      text-align: center;
      gap: 1.25rem;
    }

    .header-text {
      text-align: center;
    }

    .section-icon {
      width: 64px;
      height: 64px;
      font-size: 1.5rem;
      border-radius: 18px;
      }

      .page-title {
        font-size: 2rem;
      }

      .page-description {
        font-size: 1rem;
      }

      .clear-history-btn {
        width: 100%;
        justify-content: center;
      }

    .module-header {
      flex-direction: column;
      text-align: center;
      gap: 0.75rem;
      padding: 1.25rem;
    }

    .module-icon {
      width: 44px;
      height: 44px;
      font-size: 1.125rem;
      margin-top: 0;
    }

    .module-title {
      font-size: 1.375rem;
    }

    .module-subtitle {
      font-size: 0.875rem;
    }

    .game-module,
    .info-module {
      margin-bottom: 2.5rem;
      }

    .tips-grid {
        grid-template-columns: 1fr;
      }

    .tip-item {
      padding: 1rem;
      gap: 0.75rem;
    }
    
    .tip-icon {
      width: 28px;
      height: 28px;
      font-size: 0.75rem;
      }

    .tip-title {
      font-size: 0.875rem;
      }

    .tip-text {
      font-size: 0.75rem;
      }
    }

  @media (max-width: 640px) {
    .page-header {
      padding: 1.25rem;
      border-radius: 16px;
    }

    .header-content {
      gap: 1rem;
    }

    .page-title {
      font-size: 1.75rem;
    }

    .section-icon {
      width: 56px;
      height: 56px;
      font-size: 1.25rem;
      border-radius: 16px;
    }

    .page-description {
      font-size: 0.95rem;
    }

    .clear-history-btn {
      padding: 0.625rem 1.25rem;
      font-size: 0.8rem;
    }

    .module-title {
      font-size: 1.25rem;
    }

    .module-header {
      padding: 1rem;
    }

    .tip-item {
      padding: 0.875rem;
    }
    }
  </style>



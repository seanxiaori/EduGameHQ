---
import BaseLayout from '../layouts/BaseLayout.astro';
import type { Game, GameData } from '../types/game';
import fs from 'fs';
import path from 'path';

const seoData = {
  title: "Recently Played Games | Continue Your Learning Journey | EduGameHQ",
  description: "Continue where you left off! Access your recently played educational games and pick up your learning journey from where you stopped.",
  keywords: ["recently played games", "continue learning", "game history", "educational progress", "learning journey"],
  ogImage: "/images/recently-played-og.jpg"
};

// ‰ªéJSONÊñá‰ª∂ËØªÂèñÊ∏∏ÊàèÊï∞ÊçÆ
const gamesDataPath = path.join(process.cwd(), 'src/data/games/games.json');
let allGamesData: GameData = {};

try {
  const fileContent = fs.readFileSync(gamesDataPath, 'utf-8');
  allGamesData = JSON.parse(fileContent) as GameData;
} catch (error) {
  console.warn('Unable to read games data file');
}

// Êô∫ËÉΩÂõæÁâáË∑ØÂæÑÂ§ÑÁêÜÂáΩÊï∞
function getGameImagePath(game: Game, gameId: string): string {
  // ‰ºòÂÖà‰ΩøÁî®screenshots
  if (game.screenshots && game.screenshots.length > 0) {
    const screenshot = game.screenshots[0];
    // Ê£ÄÊü•ÊòØÂê¶ÊòØÈªòËÆ§Âç†‰ΩçÂõæ
    if (screenshot !== 'default-intro.jpg') {
      return `/images/games/details/${screenshot}`;
    }
  }
  
  // ÂÖ∂Ê¨°‰ΩøÁî®images
  if (game.images && game.images.length > 0) {
    const image = game.images[0];
    if (image !== 'default-intro.jpg') {
      return `/images/games/${image}`;
    }
  }
  
  // ÊúÄÂêé‰ΩøÁî®Âç†‰ΩçÂõæ
  return `/images/placeholder-game.jpg`;
}

// Ëé∑Âèñ‰∏Ä‰∫õÁ§∫‰æãÊ∏∏Êàè‰Ωú‰∏∫ÊúÄËøëÊ∏∏ÊàèÔºàÂÆûÈôÖÂ∫îËØ•‰ªélocalStorageËØªÂèñÔºâ
const recentGames = Object.entries(allGamesData)
  .slice(0, 12) // ÊòæÁ§∫Êõ¥Â§öÊ∏∏Êàè
  .map(([id, game]: [string, Game]) => ({
    id: id,
    title: game.title,
    description: game.description,
    image: getGameImagePath(game, id),
    url: `/games/${id}`,
    category: game.category,
    categoryName: game.categoryName,
    ageRange: game.ageRange,
    difficulty: game.difficulty,
    playCount: game.playCount || 1000,
    lastPlayed: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000), // ÈöèÊú∫ËøáÂéª7Â§©ÂÜÖ
    playTime: Math.floor(Math.random() * 120) + 5 // 5-125ÂàÜÈíü
  }))
  .sort((a, b) => b.lastPlayed.getTime() - a.lastPlayed.getTime());
---

<BaseLayout title={seoData.title} description={seoData.description}>
  <!-- ‰∏ªË¶ÅÂÜÖÂÆπ -->
  <main class="main-content">
    <div class="content-wrapper">
      <!-- È°µÈù¢Â§¥ÈÉ® -->
      <section class="page-header">
        <div class="header-content">
          <div class="header-icon">
            <div class="section-icon recent">
              <i class="fas fa-history"></i>
            </div>
          </div>
          <div class="header-text">
            <h1 class="page-title">Recently Played</h1>
            <p class="page-description">
              Continue your learning journey! Pick up where you left off with your recently played educational games.
            </p>
          </div>
        </div>
        
        <div class="header-stats">
          <div class="stat-item">
            <div class="stat-number">{recentGames.length}</div>
            <div class="stat-label">Recent Games</div>
          </div>
          <div class="stat-item">
            <div class="stat-number">üìö</div>
            <div class="stat-label">Learning</div>
          </div>
          <div class="stat-item">
            <div class="stat-number">‚è∞</div>
            <div class="stat-label">Continue</div>
          </div>
        </div>
      </section>

      <!-- Âø´ÈÄüÊìç‰ΩúÂå∫Âüü -->
      <section class="quick-actions">
        <div class="action-buttons">
          <button id="clearHistoryBtn" class="action-btn clear-btn">
            <i class="fas fa-trash-alt"></i>
            <span>Clear History</span>
          </button>
          <button id="refreshBtn" class="action-btn refresh-btn">
            <i class="fas fa-sync-alt"></i>
            <span>Refresh</span>
          </button>
          <button id="exportBtn" class="action-btn export-btn">
            <i class="fas fa-download"></i>
            <span>Export Progress</span>
          </button>
        </div>
      </section>

      <!-- Ê∏∏ÊàèÁΩëÊ†º -->
      <section class="games-section">
        <div class="section-header">
          <h2 class="section-title">Your Recent Games</h2>
          <p class="section-subtitle">Continue where you left off</p>
        </div>
        
        <div class="games-grid">
          {recentGames.map((game, index) => {
            // Ê†ºÂºèÂåñÊúÄÂêéÊ∏∏ÊàèÊó∂Èó¥
            const formatLastPlayed = (date) => {
              const now = new Date();
              const diffMs = now.getTime() - date.getTime();
              const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
              const diffDays = Math.floor(diffHours / 24);
              
              if (diffHours < 1) return 'Just now';
              if (diffHours < 24) return `${diffHours}h ago`;
              if (diffDays === 1) return 'Yesterday';
              if (diffDays < 7) return `${diffDays} days ago`;
              return 'A week ago';
            };
            
            // Ê†ºÂºèÂåñÊ∏∏ÊàèÊó∂Èó¥
            const formatPlayTime = (minutes) => {
              if (minutes < 60) return `${minutes}m`;
              const hours = Math.floor(minutes / 60);
              const mins = minutes % 60;
              return mins > 0 ? `${hours}h ${mins}m` : `${hours}h`;
            };
            
            // Ê†ºÂºèÂåñ‰∫∫Ê∞îÂÄº
            const formatPopularity = (num) => {
              if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
              if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
              return num.toString();
            };
            
            const lastPlayedText = formatLastPlayed(game.lastPlayed);
            const popularity = game.playCount || 1500;
            
            return (
              <div class={`game-card recent-theme animate-fadeInUp`} style={`animation-delay: ${index * 0.1}s`} data-game-id={game.id}>
                <div class="game-image-container">
                  <img src={game.image} alt={game.title} class="game-image" />
                  <div class="game-overlay">
                    <div class={`played-badge ${
                      lastPlayedText === 'Just now' || lastPlayedText.includes('h ago') ? 'today' : 
                      lastPlayedText === 'Yesterday' ? 'yesterday' : 
                      lastPlayedText.includes('days ago') ? 'few-days-ago' : 
                      'weeks-ago'
                    }`}>
                      {lastPlayedText}
                    </div>
                    <div class="popularity-badge">
                      {popularity > 5000 ? 'üî•' : popularity > 1000 ? '‚≠ê' : ''} {formatPopularity(popularity)}
                    </div>
                    <button class="play-button" onclick={`window.location.href='${game.url}'`}>
                      <i class="fas fa-play"></i>
                      <span>Continue</span>
                    </button>
                  </div>
                </div>
                <div class="game-info">
                  <h3 class="game-title">{game.title}</h3>
                  <div class="game-tags">
                    <span class={`category-tag ${game.category}-theme`}>{game.categoryName}</span>
                    <span class="difficulty-tag">{game.difficulty}</span>
                    <span class="feature-tag continue">CONTINUE</span>
                  </div>
                  <div class="game-stats">
                    <div class="stat">
                      <i class="fas fa-clock"></i>
                      <span>Played {formatPlayTime(game.playTime)}</span>
                    </div>
                    <div class="stat">
                      <i class="fas fa-calendar-alt"></i>
                      <span>{lastPlayedText}</span>
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </section>

      <!-- Â≠¶‰π†ËøõÂ∫¶ÊèêÁ§∫ -->
      <section class="learning-tips">
        <div class="section-header">
          <h2 class="section-title">Learning Tips</h2>
          <p class="section-subtitle">Maximize your educational gaming experience</p>
        </div>
        
        <div class="tips-container">
          <div class="tip-card">
            <div class="tip-icon">
              <i class="fas fa-lightbulb"></i>
            </div>
            <div class="tip-content">
              <h3 class="tip-title">Keep Learning!</h3>
              <p class="tip-description">
                Regular practice helps reinforce learning. Try to play educational games for 15-20 minutes daily for best results.
              </p>
            </div>
          </div>
          
          <div class="tip-card">
            <div class="tip-icon">
              <i class="fas fa-target"></i>
            </div>
            <div class="tip-content">
              <h3 class="tip-title">Set Goals</h3>
              <p class="tip-description">
                Challenge yourself to complete one game per day or master a specific skill through repeated practice.
              </p>
            </div>
          </div>
          
          <div class="tip-card">
            <div class="tip-icon">
              <i class="fas fa-chart-line"></i>
            </div>
            <div class="tip-content">
              <h3 class="tip-title">Track Progress</h3>
              <p class="tip-description">
                Your game history helps you see your learning journey and identify areas where you've improved.
              </p>
            </div>
          </div>
        </div>
      </section>
    </div>
  </main>

  <!-- Ê∏∏ÊàèÂéÜÂè≤ÁÆ°ÁêÜÁöÑJavaScript -->
  <script is:inline>
    // Ê∏∏ÊàèÂéÜÂè≤ÁÆ°ÁêÜÁ±ª
    class GameHistoryManager {
      constructor() {
        this.loadRecentGames();
        this.initializeCards();
        this.initializeActions();
      }

      // Âä†ËΩΩÊúÄËøëÊ∏∏Êàè
      loadRecentGames() {
        const history = JSON.parse(localStorage.getItem('gameHistory') || '{}');
        const gameCards = document.querySelectorAll('.game-card[data-game-id]');
        
        // Â¶ÇÊûúÊúâÁúüÂÆûÁöÑÊ∏∏ÊàèÂéÜÂè≤ÔºåÊõ¥Êñ∞ÊòæÁ§∫
        if (Object.keys(history).length > 0) {
          console.log('ÂèëÁé∞Ê∏∏ÊàèÂéÜÂè≤ËÆ∞ÂΩï:', Object.keys(history).length, '‰∏™Ê∏∏Êàè');
          
          // Êõ¥Êñ∞Ê∏∏ÊàèÂç°ÁâáÁöÑÊúÄÂêéÊ∏∏ÊàèÊó∂Èó¥
          gameCards.forEach(card => {
            const gameId = card.dataset.gameId;
            if (history[gameId]) {
              const lastPlayed = new Date(history[gameId]);
              const playedBadge = card.querySelector('.played-badge');
              if (playedBadge) {
                playedBadge.textContent = this.formatLastPlayed(lastPlayed);
                playedBadge.className = `played-badge ${this.getPlayedBadgeClass(lastPlayed)}`;
              }
            }
          });
        }
      }

      // Ê†ºÂºèÂåñÊúÄÂêéÊ∏∏ÊàèÊó∂Èó¥
      formatLastPlayed(date) {
        const now = new Date();
        const diffMs = now.getTime() - date.getTime();
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffHours / 24);
        
        if (diffHours < 1) return 'Just now';
        if (diffHours < 24) return `${diffHours}h ago`;
        if (diffDays === 1) return 'Yesterday';
        if (diffDays < 7) return `${diffDays} days ago`;
        return 'A week ago';
      }

      // Ëé∑ÂèñÊ∏∏ÊàèÊó∂Èó¥Ê†áËÆ∞Ê†∑ÂºèÁ±ª
      getPlayedBadgeClass(date) {
        const now = new Date();
        const diffMs = now.getTime() - date.getTime();
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffHours / 24);
        
        if (diffHours < 24) return 'today';
        if (diffDays === 1) return 'yesterday';
        if (diffDays < 7) return 'few-days-ago';
        return 'weeks-ago';
      }

      // ËÆ∞ÂΩïÊ∏∏ÊàèÊí≠Êîæ
      recordGamePlay(gameId) {
        const history = JSON.parse(localStorage.getItem('gameHistory') || '{}');
        history[gameId] = Date.now();
        localStorage.setItem('gameHistory', JSON.stringify(history));
        
        // Êõ¥Êñ∞‰∫∫Ê∞îÂÄº
        const popularity = JSON.parse(localStorage.getItem('gamePopularity') || '{}');
        popularity[gameId] = (popularity[gameId] || 0) + 1;
        localStorage.setItem('gamePopularity', JSON.stringify(popularity));
        
        console.log(`ËÆ∞ÂΩïÊ∏∏Êàè ${gameId} ÁöÑÊí≠ÊîæÂéÜÂè≤`);
      }

      // ÂàùÂßãÂåñÂç°Áâá
      initializeCards() {
        const cards = document.querySelectorAll('.game-card');
        cards.forEach(card => {
          const playButton = card.querySelector('.play-button');
          if (playButton) {
            playButton.addEventListener('click', (e) => {
              e.preventDefault();
              const gameId = card.dataset.gameId;
              if (gameId) {
                this.recordGamePlay(gameId);
                // Âª∂ËøüË∑≥ËΩ¨ÔºåÁ°Æ‰øùÊï∞ÊçÆ‰øùÂ≠ò
                setTimeout(() => {
                  window.location.href = `/games/${gameId}`;
                }, 100);
              }
            });
          }
        });
      }

      // ÂàùÂßãÂåñÊìç‰ΩúÊåâÈíÆ
      initializeActions() {
        // Ê∏ÖÈô§ÂéÜÂè≤ÊåâÈíÆ
        const clearBtn = document.getElementById('clearHistoryBtn');
        if (clearBtn) {
          clearBtn.addEventListener('click', () => this.clearHistory());
        }

        // Âà∑Êñ∞ÊåâÈíÆ
        const refreshBtn = document.getElementById('refreshBtn');
        if (refreshBtn) {
          refreshBtn.addEventListener('click', () => this.refreshPage());
        }

        // ÂØºÂá∫ÊåâÈíÆ
        const exportBtn = document.getElementById('exportBtn');
        if (exportBtn) {
          exportBtn.addEventListener('click', () => this.exportProgress());
        }
      }

      // Ê∏ÖÈô§Ê∏∏ÊàèÂéÜÂè≤
      clearHistory() {
        if (confirm('Are you sure you want to clear your game history? This action cannot be undone.')) {
          localStorage.removeItem('gameHistory');
          localStorage.removeItem('gamePopularity');
          location.reload();
        }
      }

      // Âà∑Êñ∞È°µÈù¢
      refreshPage() {
        const refreshIcon = document.querySelector('#refreshBtn i');
        if (refreshIcon) {
          refreshIcon.style.animation = 'spin 1s linear';
          setTimeout(() => {
            refreshIcon.style.animation = '';
            location.reload();
          }, 1000);
        }
      }

      // ÂØºÂá∫Â≠¶‰π†ËøõÂ∫¶
      exportProgress() {
        const history = JSON.parse(localStorage.getItem('gameHistory') || '{}');
        const popularity = JSON.parse(localStorage.getItem('gamePopularity') || '{}');
        
        const data = {
          exportDate: new Date().toISOString(),
          gameHistory: history,
          gamePopularity: popularity,
          totalGamesPlayed: Object.keys(history).length
        };
        
        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `edugamehq-progress-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        console.log('Â≠¶‰π†ËøõÂ∫¶Â∑≤ÂØºÂá∫');
      }
    }

    // È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÁöÑÂàùÂßãÂåñ
    document.addEventListener('DOMContentLoaded', function() {
      console.log('ÊúÄËøëÊ∏∏ÊàèÈ°µÈù¢Âä†ËΩΩÂÆåÊàêÔºåÊ∏∏ÊàèÂéÜÂè≤ÁÆ°ÁêÜÁ≥ªÁªüÂ∑≤ÂêØÁî®');
      window.gameHistoryManager = new GameHistoryManager();
      
      // Ê∑ªÂä†Ê∑°ÂÖ•Âä®Áîª
      const cards = document.querySelectorAll('.animate-fadeInUp');
      cards.forEach((card, index) => {
        setTimeout(() => {
          card.style.opacity = '1';
          card.style.transform = 'translateY(0)';
        }, index * 100);
      });
    });

    // Ê∑ªÂä†ÊóãËΩ¨Âä®Áîª
    const style = document.createElement('style');
    style.textContent = `
      @keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
      }
    `;
    document.head.appendChild(style);
  </script>
</BaseLayout>

<style>
  /* ÂØºÂÖ•ÈÄöÁî®Ê∏∏ÊàèÂç°ÁâáÊ†∑Âºè */
  @import '../styles/game-card.css';

  /* ‰∏ªË¶ÅÂÜÖÂÆπÂå∫Âüü */
  .main-content {
    width: 100%;
    background: #FEFCFB;
    min-height: 100vh;
  }

  .content-wrapper {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
  }

  /* È°µÈù¢Â§¥ÈÉ® */
  .page-header {
    background: linear-gradient(135deg, #F0F9FF 0%, #E0F2FE 50%, rgba(14, 165, 233, 0.08) 100%);
    border-radius: 20px;
    padding: 2rem;
    margin-bottom: 2.5rem;
    border: 1px solid rgba(14, 165, 233, 0.15);
    box-shadow: 
      0 8px 32px rgba(14, 165, 233, 0.08),
      0 2px 8px rgba(0, 0, 0, 0.04);
    position: relative;
    overflow: hidden;
  }

  .page-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent 0%, rgba(14, 165, 233, 0.3) 50%, transparent 100%);
  }

  .header-content {
    display: flex;
    align-items: center;
    gap: 2rem;
    margin-bottom: 2rem;
  }

  .header-icon {
    flex-shrink: 0;
  }

  .section-icon {
    width: 72px;
    height: 72px;
    border-radius: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.75rem;
    color: white;
    box-shadow: 
      0 8px 16px rgba(14, 165, 233, 0.3),
      0 4px 8px rgba(14, 165, 233, 0.2);
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
  }

  .section-icon.recent {
    background: linear-gradient(135deg, #0EA5E9 0%, #0284C7 50%, #0369A1 100%);
  }

  .section-icon:hover {
    transform: translateY(-2px) scale(1.02);
  }

  .section-icon::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, transparent 50%);
  }

  .header-text {
    flex: 1;
  }

  .page-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 2.5rem;
    font-weight: 800;
    margin-bottom: 1rem;
    background: linear-gradient(135deg, #0EA5E9 0%, #0284C7 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .page-description {
    font-size: 1.125rem;
    color: #64748B;
    line-height: 1.6;
    margin-bottom: 0;
  }

  .header-stats {
    display: flex;
    justify-content: center;
    gap: 2rem;
  }

  .stat-item {
    text-align: center;
    background: rgba(255, 255, 255, 0.9);
    padding: 1rem;
    border-radius: 12px;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(14, 165, 233, 0.1);
  }

  .stat-number {
    display: block;
    font-size: 1.5rem;
    font-weight: 800;
    color: #0EA5E9;
    margin-bottom: 0.25rem;
  }

  .stat-label {
    font-size: 0.875rem;
    color: #6B7280;
    font-weight: 500;
  }

  /* Âø´ÈÄüÊìç‰ΩúÂå∫Âüü */
  .quick-actions {
    margin-bottom: 2rem;
  }

  .action-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 12px;
    font-weight: 600;
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
  }

  .action-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .clear-btn {
    background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
    color: white;
  }

  .refresh-btn {
    background: linear-gradient(135deg, #10B981 0%, #059669 100%);
    color: white;
  }

  .export-btn {
    background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%);
    color: white;
  }

  /* Âå∫ÂüüÊ†áÈ¢ò */
  .section-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .section-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 2rem;
    font-weight: 700;
    color: #1F2937;
    margin-bottom: 0.5rem;
  }

  .section-subtitle {
    color: #6B7280;
    font-size: 1rem;
  }

  /* Ê∏∏ÊàèÂå∫Âüü */
  .games-section {
    margin-bottom: 3rem;
  }

  /* ÊúÄËøëÊ∏∏Êàè‰∏ªÈ¢òÊ†∑Âºè */
  .game-card.recent-theme {
    border: 2px solid #0EA5E9;
    box-shadow: 0 4px 15px rgba(14, 165, 233, 0.2);
  }

  .game-card.recent-theme:hover {
    border-color: #0284C7;
    box-shadow: 0 8px 25px rgba(14, 165, 233, 0.3);
  }

  /* Ê∏∏ÊàèÊó∂Èó¥Ê†áËÆ∞Ê†∑Âºè */
  .played-badge {
    position: absolute;
    top: 10px;
    left: 10px;
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .played-badge.today {
    background: rgba(16, 185, 129, 0.9);
    color: white;
  }

  .played-badge.yesterday {
    background: rgba(245, 158, 11, 0.9);
    color: white;
  }

  .played-badge.few-days-ago {
    background: rgba(239, 68, 68, 0.9);
    color: white;
  }

  .played-badge.weeks-ago {
    background: rgba(107, 114, 128, 0.9);
    color: white;
  }

  .feature-tag.continue {
    background: linear-gradient(135deg, #0EA5E9 0%, #0284C7 100%);
  }

  /* Ê∏∏ÊàèÁªüËÆ°‰ø°ÊÅØ */
  .game-stats {
    display: flex;
    gap: 1rem;
    margin-top: 0.5rem;
    font-size: 0.75rem;
    color: #6B7280;
  }

  .game-stats .stat {
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .game-stats i {
    font-size: 0.7rem;
  }

  /* Â≠¶‰π†ÊèêÁ§∫Âå∫Âüü */
  .learning-tips {
    margin-bottom: 3rem;
  }

  .tips-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
  }

  .tip-card {
    background: white;
    padding: 1.5rem;
    border-radius: 1rem;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
    border: 1px solid #E5E7EB;
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    transition: all 0.3s ease;
  }

  .tip-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    border-color: rgba(14, 165, 233, 0.2);
  }

  .tip-icon {
    width: 40px;
    height: 40px;
    border-radius: 12px;
    background: linear-gradient(135deg, #0EA5E9 0%, #0284C7 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1rem;
    flex-shrink: 0;
  }

  .tip-content {
    flex: 1;
  }

  .tip-title {
    font-size: 1.125rem;
    font-weight: 700;
    color: #1F2937;
    margin-bottom: 0.5rem;
  }

  .tip-description {
    color: #6B7280;
    font-size: 0.9rem;
    line-height: 1.5;
  }

  /* Âä®ÁîªÊïàÊûú */
  .animate-fadeInUp {
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.6s ease-out;
  }

  /* ÂìçÂ∫îÂºèËÆæËÆ° */
  @media (max-width: 768px) {
    .content-wrapper {
      padding: 1rem;
    }

    .page-header {
      padding: 1.5rem;
    }

    .header-content {
      flex-direction: column;
      text-align: center;
      gap: 1rem;
    }

    .page-title {
      font-size: 2rem;
    }

    .header-stats {
      flex-direction: row;
      gap: 1rem;
    }

    .stat-item {
      padding: 0.75rem;
      flex: 1;
    }

    .action-buttons {
      flex-direction: column;
      align-items: center;
    }

    .action-btn {
      width: 100%;
      max-width: 200px;
      justify-content: center;
    }

    .tips-container {
      grid-template-columns: 1fr;
    }

    .section-title {
      font-size: 1.5rem;
    }
  }

  @media (max-width: 640px) {
    .header-stats {
      flex-direction: column;
      gap: 0.5rem;
    }

    .games-grid {
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    }
  }
</style> 


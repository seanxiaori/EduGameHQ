---
import BaseLayout from '../layouts/BaseLayout.astro';
import type { Game, GameData } from '../types/game';
import fs from 'fs';
import path from 'path';

const seoData = {
  title: "Recently Played Games | Continue Your Learning Journey | EduGameHQ",
  description: "Continue where you left off! Access your recently played educational games and pick up your learning journey from where you stopped.",
  keywords: ["recently played games", "continue learning", "game history", "educational progress", "learning journey"],
  ogImage: "/images/recently-played-og.jpg"
};

// ‰ªéJSONÊñá‰ª∂ËØªÂèñÊ∏∏ÊàèÊï∞ÊçÆ
const gamesDataPath = path.join(process.cwd(), 'src/data/games/games.json');
let allGamesData: GameData = {};

try {
  const fileContent = fs.readFileSync(gamesDataPath, 'utf-8');
  allGamesData = JSON.parse(fileContent) as GameData;
} catch (error) {
  console.warn('Unable to read games data file');
}

// Êô∫ËÉΩÂõæÁâáË∑ØÂæÑÂ§ÑÁêÜÂáΩÊï∞ - ÊîØÊåÅÂ§öÁßçÊ∏∏ÊàèÊù•Ê∫ê
function getGameImagePath(game: Game, gameId: string): string {
  // 1. ‰ºòÂÖà‰ΩøÁî®screenshotsÔºàÁà¨ÂèñÊ∏∏ÊàèÁöÑÊà™ÂõæÔºâ
  if (game.screenshots && game.screenshots.length > 0) {
    const screenshot = game.screenshots[0];
    // Ê£ÄÊü•ÊòØÂê¶ÊòØÊúâÊïàÁöÑÊà™ÂõæÊñá‰ª∂
    if (screenshot && screenshot !== 'default-intro.jpg' && screenshot !== 'placeholder-game.jpg') {
      return `/images/games/details/${screenshot}`;
    }
  }
  
  // 2. ÂÖ∂Ê¨°‰ΩøÁî®imagesÔºàÊ∏∏ÊàèÂ∞ÅÈù¢ÂõæÔºâ
  if (game.images && game.images.length > 0) {
    const image = game.images[0];
    if (image && image !== 'default-intro.jpg' && image !== 'placeholder-game.jpg') {
      return `/images/games/${image}`;
    }
  }
  
  // 3. Ê£ÄÊü•ÊòØÂê¶ÊòØGitHubÂºÄÊ∫êÊ∏∏ÊàèÔºà‰∏∫Êú™Êù•ÂÅöÂáÜÂ§áÔºâ
  if (game.source === 'github' && game.repository) {
    // GitHubÊ∏∏ÊàèÂèØËÉΩÊúâREADME‰∏≠ÁöÑÂõæÁâáÊàñËÄÖ‰ªìÂ∫ìÂ∞ÅÈù¢
    return `/images/games/github/${gameId}.jpg`;
  }
  
  // 4. Ê†πÊçÆÊ∏∏ÊàèÂàÜÁ±ª‰ΩøÁî®ÂàÜÁ±ªÂç†‰ΩçÂõæ
  const categoryPlaceholders = {
    'math': '/images/placeholders/math-placeholder.jpg',
    'science': '/images/placeholders/science-placeholder.jpg',
    'coding': '/images/placeholders/coding-placeholder.jpg',
    'language': '/images/placeholders/language-placeholder.jpg',
    'puzzle': '/images/placeholders/puzzle-placeholder.jpg',
    'sports': '/images/placeholders/sports-placeholder.jpg',
    'art': '/images/placeholders/art-placeholder.jpg',
    'geography': '/images/placeholders/geography-placeholder.jpg'
  };
  
  // 5. ‰ΩøÁî®ÂàÜÁ±ªÁâπÂÆöÁöÑÂç†‰ΩçÂõæ
  if (game.category && categoryPlaceholders[game.category]) {
    return categoryPlaceholders[game.category];
  }
  
  // 6. ÊúÄÂêé‰ΩøÁî®ÈÄöÁî®Âç†‰ΩçÂõæ
  return `/images/placeholder-game.jpg`;
}

// Ëé∑Âèñ‰∏Ä‰∫õÁ§∫‰æãÊ∏∏Êàè‰Ωú‰∏∫ÊúÄËøëÊ∏∏ÊàèÔºàÂÆûÈôÖÂ∫îËØ•‰ªélocalStorageËØªÂèñÔºâ
const recentGames = Object.entries(allGamesData)
  .slice(0, 12) // ÊòæÁ§∫Êõ¥Â§öÊ∏∏Êàè
  .map(([id, game]: [string, Game]) => ({
    id: id,
    title: game.title,
    description: game.description,
    image: getGameImagePath(game, id),
    url: `/games/${id}`,
    category: game.category,
    categoryName: game.categoryName,
    ageRange: game.ageRange,
    difficulty: game.difficulty,
    playCount: game.playCount || 1000,
    lastPlayed: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000), // ÈöèÊú∫ËøáÂéª7Â§©ÂÜÖ
    playTime: Math.floor(Math.random() * 120) + 5 // 5-125ÂàÜÈíü
  }))
  .sort((a, b) => b.lastPlayed.getTime() - a.lastPlayed.getTime());
---

<BaseLayout title={seoData.title} description={seoData.description}>
  <!-- ‰∏ªË¶ÅÂÜÖÂÆπ -->
  <main class="main-content">
    <div class="content-wrapper">
      <!-- È°µÈù¢Â§¥ÈÉ® -->
      <section class="page-header">
        <div class="header-content">
          <div class="header-icon">
            <div class="section-icon recent">
              <i class="fas fa-history"></i>
            </div>
          </div>
          <div class="header-text">
            <h1 class="page-title">Recently Played</h1>
            <p class="page-description">
              Continue your learning journey! Pick up where you left off with your recently played educational games.
            </p>
          </div>
        </div>
        
        <!-- Ê∏ÖÈô§ÂéÜÂè≤ËÆ∞ÂΩïÊåâÈíÆ -->
        <div class="header-actions">
          <button id="clearHistoryBtn" class="clear-history-btn">
            <i class="fas fa-trash-alt"></i>
            <span>Clear History</span>
          </button>
        </div>
      </section>

      <!-- Ê∏∏ÊàèÁΩëÊ†º -->
      <section class="games-section">
        <div class="module-header">
          <div class="module-icon recent-icon">
            <i class="fas fa-gamepad"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Your Recent Games</h2>
            <p class="module-subtitle">Continue where you left off</p>
          </div>
        </div>
        
        <div class="games-grid">
          {recentGames.map((game, index) => {
            // Ê†ºÂºèÂåñÊúÄÂêéÊ∏∏ÊàèÊó∂Èó¥
            const formatLastPlayed = (date) => {
              const now = new Date();
              const diffMs = now.getTime() - date.getTime();
              const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
              const diffDays = Math.floor(diffHours / 24);
              
              if (diffHours < 1) return 'Just now';
              if (diffHours < 24) return `${diffHours}h ago`;
              if (diffDays === 1) return 'Yesterday';
              if (diffDays < 7) return `${diffDays} days ago`;
              return 'A week ago';
            };
            
            // Ê†ºÂºèÂåñ‰∫∫Ê∞îÂÄº
            const formatPopularity = (num) => {
              if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
              if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
              return num.toString();
            };
            
            const lastPlayedText = formatLastPlayed(game.lastPlayed);
            const popularity = game.playCount || 1500;
            
            return (
              <div class={`game-card recent-theme animate-fadeInUp`} style={`animation-delay: ${index * 0.1}s`} data-game-id={game.id}>
                <div class="game-image-container">
                  <img src={game.image} alt={game.title} class="game-image" />
                  <div class="game-overlay">
                    <div class={`played-badge ${
                      lastPlayedText === 'Just now' || lastPlayedText.includes('h ago') ? 'today' : 
                      lastPlayedText === 'Yesterday' ? 'yesterday' : 
                      lastPlayedText.includes('days ago') ? 'few-days-ago' : 
                      'weeks-ago'
                    }`}>
                      {lastPlayedText}
                    </div>
                    <div class="popularity-badge">
                      {popularity > 5000 ? 'üî•' : popularity > 1000 ? '‚≠ê' : ''} {formatPopularity(popularity)}
                    </div>
                    <button class="play-button continue-btn" onclick={`window.location.href='${game.url}'`}>
                      <i class="fas fa-play"></i>
                      <span>Continue</span>
                    </button>
                  </div>
                </div>
                <div class="game-info">
                  <h3 class="game-title">{game.title}</h3>
                  <div class="game-tags">
                    <span class={`category-tag ${game.category}`}>{game.categoryName}</span>
                    <span class="feature-tag continue">CONTINUE</span>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </section>

      <!-- Â≠¶‰π†Âª∫ËÆÆ -->
      <section class="learning-tips">
        <div class="module-header">
          <div class="module-icon tips-icon">
            <i class="fas fa-lightbulb"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Learning Tips</h2>
            <p class="module-subtitle">Maximize your educational gaming experience</p>
          </div>
        </div>
        
        <div class="tips-container">
          <div class="tip-card">
            <div class="tip-icon">
              <i class="fas fa-lightbulb"></i>
            </div>
            <div class="tip-content">
              <h3 class="tip-title">Keep Learning!</h3>
              <p class="tip-description">
                Regular practice helps reinforce learning. Try to play educational games for 15-20 minutes daily for best results.
              </p>
            </div>
          </div>
          
          <div class="tip-card">
            <div class="tip-icon">
              <i class="fas fa-bullseye"></i>
            </div>
            <div class="tip-content">
              <h3 class="tip-title">Set Goals</h3>
              <p class="tip-description">
                Challenge yourself to complete one game per day or master a specific skill through repeated practice.
              </p>
            </div>
          </div>
          
          <div class="tip-card">
            <div class="tip-icon">
              <i class="fas fa-chart-line"></i>
            </div>
            <div class="tip-content">
              <h3 class="tip-title">Track Progress</h3>
              <p class="tip-description">
                Your game history helps you see your learning journey and identify areas where you've improved.
              </p>
            </div>
          </div>
        </div>
      </section>
    </div>
  </main>

  <!-- Ê∏∏ÊàèÂéÜÂè≤ÁÆ°ÁêÜÁöÑJavaScript -->
  <script is:inline>
    // Ê∏∏ÊàèÂéÜÂè≤ÁÆ°ÁêÜÁ±ª
    class GameHistoryManager {
      constructor() {
        this.loadRecentGames();
        this.initializeCards();
      }

      // Âä†ËΩΩÊúÄËøëÊ∏∏Êàè
      loadRecentGames() {
        const history = JSON.parse(localStorage.getItem('gameHistory') || '{}');
        const gameCards = document.querySelectorAll('.game-card[data-game-id]');
        
        // Â¶ÇÊûúÊúâÁúüÂÆûÁöÑÊ∏∏ÊàèÂéÜÂè≤ÔºåÊõ¥Êñ∞ÊòæÁ§∫
        if (Object.keys(history).length > 0) {
          console.log('ÂèëÁé∞Ê∏∏ÊàèÂéÜÂè≤ËÆ∞ÂΩï:', Object.keys(history).length, '‰∏™Ê∏∏Êàè');
          
          // Êõ¥Êñ∞Ê∏∏ÊàèÂç°ÁâáÁöÑÊúÄÂêéÊ∏∏ÊàèÊó∂Èó¥
          gameCards.forEach(card => {
            const gameId = card.dataset.gameId;
            if (history[gameId]) {
              const lastPlayed = new Date(history[gameId]);
              const playedBadge = card.querySelector('.played-badge');
              if (playedBadge) {
                playedBadge.textContent = this.formatLastPlayed(lastPlayed);
                playedBadge.className = `played-badge ${this.getPlayedBadgeClass(lastPlayed)}`;
              }
            }
          });
        }
      }

      // Ê†ºÂºèÂåñÊúÄÂêéÊ∏∏ÊàèÊó∂Èó¥
      formatLastPlayed(date) {
        const now = new Date();
        const diffMs = now.getTime() - date.getTime();
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffHours / 24);
        
        if (diffHours < 1) return 'Just now';
        if (diffHours < 24) return `${diffHours}h ago`;
        if (diffDays === 1) return 'Yesterday';
        if (diffDays < 7) return `${diffDays} days ago`;
        return 'A week ago';
      }

      // Ëé∑ÂèñÊ∏∏ÊàèÊó∂Èó¥Ê†áËÆ∞Ê†∑ÂºèÁ±ª
      getPlayedBadgeClass(date) {
        const now = new Date();
        const diffMs = now.getTime() - date.getTime();
        const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
        const diffDays = Math.floor(diffHours / 24);
        
        if (diffHours < 24) return 'today';
        if (diffDays === 1) return 'yesterday';
        if (diffDays < 7) return 'few-days-ago';
        return 'weeks-ago';
      }

      // ËÆ∞ÂΩïÊ∏∏ÊàèÊí≠Êîæ
      recordGamePlay(gameId) {
        const history = JSON.parse(localStorage.getItem('gameHistory') || '{}');
        history[gameId] = Date.now();
        localStorage.setItem('gameHistory', JSON.stringify(history));
        
        // Êõ¥Êñ∞‰∫∫Ê∞îÂÄº
        const popularity = JSON.parse(localStorage.getItem('gamePopularity') || '{}');
        popularity[gameId] = (popularity[gameId] || 0) + 1;
        localStorage.setItem('gamePopularity', JSON.stringify(popularity));
        
        console.log(`ËÆ∞ÂΩïÊ∏∏Êàè ${gameId} ÁöÑÊí≠ÊîæÂéÜÂè≤`);
      }

      // ÂàùÂßãÂåñÂç°Áâá
      initializeCards() {
        const cards = document.querySelectorAll('.game-card');
        cards.forEach(card => {
          const playButton = card.querySelector('.play-button');
          if (playButton) {
            playButton.addEventListener('click', (e) => {
              e.preventDefault();
              const gameId = card.dataset.gameId;
              if (gameId) {
                this.recordGamePlay(gameId);
                // Âª∂ËøüË∑≥ËΩ¨ÔºåÁ°Æ‰øùÊï∞ÊçÆ‰øùÂ≠ò
                setTimeout(() => {
                  window.location.href = `/games/${gameId}`;
                }, 100);
              }
            });
          }
        });
        
        // ÂàùÂßãÂåñÊ∏ÖÈô§ÂéÜÂè≤ÊåâÈíÆ
        const clearBtn = document.getElementById('clearHistoryBtn');
        if (clearBtn) {
          clearBtn.addEventListener('click', () => this.clearHistory());
        }
      }

      // Ê∏ÖÈô§Ê∏∏ÊàèÂéÜÂè≤
      clearHistory() {
        if (confirm('Are you sure you want to clear your game history? This action cannot be undone.')) {
          localStorage.removeItem('gameHistory');
          localStorage.removeItem('gamePopularity');
          console.log('Ê∏∏ÊàèÂéÜÂè≤Â∑≤Ê∏ÖÈô§');
          location.reload();
        }
      }
    }

    // È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
    document.addEventListener('DOMContentLoaded', () => {
      new GameHistoryManager();
    });
  </script>

  <!-- È°µÈù¢Ê†∑Âºè -->
  <style>
    @import '../styles/game-card.css';

    /* È°µÈù¢‰∏ªË¶ÅÂÜÖÂÆπ */
    .main-content {
      min-height: 100vh;
      background: linear-gradient(135deg, #F0F9FF 0%, #E0F2FE 50%, rgba(14, 165, 233, 0.08) 100%);
      padding: 2rem 0;
    }

    .content-wrapper {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 2rem;
    }

    /* È°µÈù¢Â§¥ÈÉ® */
    .page-header {
      background: linear-gradient(135deg, #F0F9FF 0%, #E0F2FE 50%, rgba(14, 165, 233, 0.08) 100%);
      border-radius: 20px;
      padding: 2rem;
      margin-bottom: 2.5rem;
      border: 1px solid rgba(14, 165, 233, 0.15);
      box-shadow: 
        0 8px 32px rgba(14, 165, 233, 0.08),
        0 2px 8px rgba(0, 0, 0, 0.04);
      position: relative;
      overflow: hidden;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .page-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 1px;
      background: linear-gradient(90deg, transparent 0%, rgba(14, 165, 233, 0.3) 50%, transparent 100%);
    }

    .header-content {
      display: flex;
      align-items: center;
      gap: 2rem;
      flex: 1;
    }

    .header-icon {
      flex-shrink: 0;
    }

    .section-icon {
      width: 72px;
      height: 72px;
      border-radius: 20px;
      background: linear-gradient(135deg, #0EA5E9 0%, #0284C7 50%, #0369A1 100%);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 1.75rem;
      box-shadow: 
        0 8px 24px rgba(14, 165, 233, 0.3),
        0 4px 12px rgba(14, 165, 233, 0.2);
      transition: all 0.3s ease;
    }

    .section-icon:hover {
      transform: translateY(-2px) scale(1.02);
      box-shadow: 
        0 12px 32px rgba(14, 165, 233, 0.4),
        0 6px 16px rgba(14, 165, 233, 0.3);
    }

    .header-text {
      flex: 1;
    }

    .page-title {
      font-size: 2.5rem;
      font-weight: 800;
      font-family: 'Space Grotesk', sans-serif;
      background: linear-gradient(135deg, #0EA5E9 0%, #0284C7 50%, #0369A1 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      margin: 0 0 0.5rem 0;
      line-height: 1.2;
    }

    .page-description {
      font-size: 1.125rem;
      color: #64748B;
      margin: 0;
      line-height: 1.6;
    }

    /* Ê∏ÖÈô§ÂéÜÂè≤ÊåâÈíÆ */
    .header-actions {
      flex-shrink: 0;
    }

    .clear-history-btn {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.75rem 1.5rem;
      background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
      color: white;
      border: none;
      border-radius: 12px;
      font-weight: 600;
      font-size: 0.875rem;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
    }

    .clear-history-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(239, 68, 68, 0.4);
      background: linear-gradient(135deg, #DC2626 0%, #B91C1C 100%);
    }

    .clear-history-btn i {
      font-size: 0.875rem;
    }

    /* Ê∏∏ÊàèÂå∫Âüü */
    .games-section {
      margin-bottom: 3rem;
    }

    /* Ê®°ÂùóÂ§¥ÈÉ®Ê†∑Âºè */
    .module-header {
      display: flex;
      align-items: flex-start;
      gap: 1rem;
      margin-bottom: 1.5rem;
      padding: 1.5rem;
      background: white;
      border-radius: 16px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
      border: 1px solid #F3F4F6;
    }

    .module-icon {
      width: 48px;
      height: 48px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.25rem;
      color: white;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      flex-shrink: 0;
    }

    .recent-icon {
      background: linear-gradient(135deg, #0EA5E9 0%, #0284C7 100%);
    }

    .tips-icon {
      background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%);
    }

    .module-title-group {
      flex: 1;
    }

    .module-title {
      font-size: 1.5rem;
      font-weight: 700;
      color: #1F2937;
      margin: 0 0 0.25rem 0;
      font-family: 'Space Grotesk', sans-serif;
    }

    .module-subtitle {
      font-size: 0.9rem;
      color: #6B7280;
      margin: 0;
    }

    /* Ê∏∏ÊàèÁΩëÊ†º */
    .games-grid {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 1.5rem;
    }

    /* Â≠¶‰π†ÊèêÁ§∫Âå∫Âüü */
    .learning-tips {
      margin-top: 3rem;
    }

    .tips-container {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 1.5rem;
      margin-top: 0;
    }

    .tip-card {
      background: white;
      border-radius: 16px;
      padding: 1.5rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
      border: 1px solid #F3F4F6;
      transition: all 0.3s ease;
      display: flex;
      gap: 1rem;
      align-items: flex-start;
    }

    .tip-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
      border-color: rgba(139, 92, 246, 0.2);
    }

    .tip-icon {
      width: 32px;
      height: 32px;
      border-radius: 8px;
      background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 0.875rem;
      flex-shrink: 0;
    }

    .tip-content {
      flex: 1;
    }

    .tip-title {
      font-size: 0.9rem;
      font-weight: 600;
      color: #1F2937;
      margin: 0 0 0.5rem 0;
      font-family: 'Space Grotesk', sans-serif;
    }

    .tip-description {
      font-size: 0.8rem;
      color: #6B7280;
      margin: 0;
      line-height: 1.6;
    }

    /* ÂìçÂ∫îÂºèËÆæËÆ° */
    @media (max-width: 768px) {
      .content-wrapper {
        padding: 0 1rem;
      }

      .page-header {
        flex-direction: column;
        text-align: center;
        gap: 1.5rem;
      }

      .header-content {
        flex-direction: column;
        gap: 1rem;
      }

      .page-title {
        font-size: 2rem;
      }

      .page-description {
        font-size: 1rem;
      }

      .section-icon {
        width: 60px;
        height: 60px;
        font-size: 1.5rem;
      }

      .clear-history-btn {
        width: 100%;
        justify-content: center;
      }

      .games-grid {
        grid-template-columns: repeat(2, 1fr);
      }

      .tips-container {
        grid-template-columns: 1fr;
      }
    }

    @media (min-width: 769px) and (max-width: 1024px) {
      .content-wrapper {
        max-width: 1200px;
        padding: 0 1.5rem;
      }

      .games-grid {
        grid-template-columns: repeat(3, 1fr);
      }

      .tips-container {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    /* Ê∏∏ÊàèÂç°ÁâáÁâπÊÆäÊ†∑Âºè */
    .game-card.recent-theme {
      border-left: 4px solid #0EA5E9;
    }

    .game-card.recent-theme:hover {
      border-left-color: #0284C7;
      box-shadow: 0 20px 40px rgba(14, 165, 233, 0.15);
    }

    .play-button.continue-btn {
      background: linear-gradient(135deg, #0EA5E9 0%, #0284C7 100%);
      color: white;
    }

    .play-button.continue-btn:hover {
      background: linear-gradient(135deg, #0284C7 0%, #0369A1 100%);
      transform: scale(1.05);
    }
  </style>
</BaseLayout>



---
import BaseLayout from '../layouts/BaseLayout.astro';
import type { Game, GameData } from '../types/game';
import fs from 'fs';
import path from 'path';

const seoData = {
  title: "Language Games for Kids | Free Online Learning Games | EduGameHQ",
  description: "Play 30+ free language games for kids aged 6-18. Improve your language skills with interactive vocabulary, grammar, and communication games.",
  keywords: ["language games", "vocabulary games", "grammar games", "reading games", "language for kids", "educational language games", "free language games"],
  ogImage: "/images/language-games-og.jpg"
};

// ‰ªéJSONÊñá‰ª∂ËØªÂèñÊ∏∏ÊàèÊï∞ÊçÆ
const gamesDataPath = path.join(process.cwd(), 'src/data/games/games.json');
let allGamesData: GameData = {};

try {
  const fileContent = fs.readFileSync(gamesDataPath, 'utf-8');
  allGamesData = JSON.parse(fileContent) as GameData;
} catch (error) {
  console.warn('Unable to read games data file');
}

// Á≠õÈÄâËØ≠Ë®ÄÊ∏∏Êàè
const languageGames = Object.entries(allGamesData)
  .filter(([_id, game]: [string, Game]) => game.category === 'language')
  .map(([id, game]: [string, Game]) => ({
    id: id,
    title: game.title,
    description: game.description,
    icon: 'fas fa-language',
    image: game.screenshots && game.screenshots.length > 0 
      ? `/images/games/details/${game.screenshots[0]}` 
      : `/images/games/${id}.svg`,
    difficulty: game.difficulty,
    age: `Ages ${game.ageRange}`,
    skills: game.tags && game.tags.length > 0 ? game.tags : ['Language', 'Communication'],
    url: `/games/${id}`,
    playCount: game.playCount || 0,
    isFeatured: game.isFeatured || false
  }));

// ÊåâÈöæÂ∫¶ÂàÜÁªÑÊ∏∏Êàè
const featuredGames = languageGames.filter(game => game.isFeatured).slice(0, 4);
const easyGames = languageGames.filter(game => game.difficulty === 'Easy');
const mediumGames = languageGames.filter(game => game.difficulty === 'Medium');
const hardGames = languageGames.filter(game => game.difficulty === 'Hard');

// Â¶ÇÊûúÊ≤°ÊúâÁâπËâ≤Ê∏∏ÊàèÔºå‰ªéÊâÄÊúâÊ∏∏Êàè‰∏≠ÈÄâÊã©Ââç4‰∏™‰Ωú‰∏∫ÁâπËâ≤
const displayFeaturedGames = featuredGames.length > 0 ? featuredGames : languageGames.slice(0, 4);
---

<BaseLayout title={seoData.title} description={seoData.description}>
  <main class="main-content">
    <div class="content-wrapper">
      
      <!-- 1. È°µÈù¢È°∂ÈÉ®Âå∫Âüü -->
      <section class="page-header">
        <div class="header-content">
          <div class="category-icon-container">
            <div class="category-icon language">
              <div class="icon-background">
                üìù
              </div>
            </div>
          </div>
          
          <div class="header-text">
            <h1 class="page-title">Language Games</h1>
            <p class="page-description">
              Improve reading, writing, vocabulary, and communication skills with our engaging language games designed for English learners worldwide. Perfect for building strong language foundations.
            </p>
          </div>
        </div>
      </section>

      <!-- 2. ÁâπËâ≤Ê∏∏ÊàèÊ®°Âùó -->
      <section class="game-module featured-module">
        <div class="module-header">
          <div class="module-icon featured-icon">
            <i class="fas fa-star"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Featured Language Games</h2>
            <p class="module-subtitle">Hand-picked language games to enhance your communication skills</p>
          </div>
        </div>
        
        <div class="games-grid">
          {displayFeaturedGames.map((game, index) => {
            const popularity = Math.floor(Math.random() * 15000) + 500;
            const formatPopularity = (num) => {
              if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
              if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
              return num.toString();
            };
            
            return (
              <a href={game.url} class="game-card animate-fadeInUp" style={`animation-delay: ${index * 0.1}s`}>
                <div class="game-image-container">
                  <img src={game.image} alt={game.title} class="game-image" loading="lazy" />
                  <div class="game-overlay">
                    <div class="popularity-badge">üî• {formatPopularity(popularity)}</div>
                    <button class="play-button">
                      <i class="fas fa-play"></i>
                    </button>
                  </div>
                </div>
                <div class="game-info">
                  <h3 class="game-title">{game.title}</h3>
                  <div class="game-tags">
                    <span class="age-tag">{game.age}</span>
                    <span class="category-tag language">Language</span>
                    <span class="feature-tag featured">FEATURED</span>
                  </div>
                </div>
              </a>
            );
          })}
        </div>
      </section>

      <!-- 3. ÂÆπÊòìÈöæÂ∫¶Ê∏∏ÊàèÊ®°Âùó -->
      {easyGames.length > 0 && (
        <section class="game-module easy-module">
          <div class="module-header">
            <div class="module-icon easy-icon">
              <i class="fas fa-smile"></i>
            </div>
            <div class="module-title-group">
              <h2 class="module-title">Easy Language Games</h2>
              <p class="module-subtitle">Perfect for beginners and young language learners</p>
            </div>
          </div>
          
          <div class="games-grid">
            {easyGames.slice(0, 4).map((game, index) => {
              const popularity = Math.floor(Math.random() * 8000) + 200;
              const formatPopularity = (num) => {
                if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
                return num.toString();
              };
              
              return (
                <a href={game.url} class="game-card animate-fadeInUp" style={`animation-delay: ${index * 0.1}s`}>
                  <div class="game-image-container">
                    <img src={game.image} alt={game.title} class="game-image" loading="lazy" />
                    <div class="game-overlay">
                      <div class="popularity-badge">‚≠ê {formatPopularity(popularity)}</div>
                      <button class="play-button">
                        <i class="fas fa-play"></i>
                      </button>
                    </div>
                  </div>
                  <div class="game-info">
                    <h3 class="game-title">{game.title}</h3>
                    <div class="game-tags">
                      <span class="age-tag">{game.age}</span>
                      <span class="category-tag language">Language</span>
                      <span class="difficulty-tag easy">EASY</span>
                    </div>
                  </div>
                </a>
              );
            })}
          </div>
        </section>
      )}

      <!-- 4. ‰∏≠Á≠âÈöæÂ∫¶Ê∏∏ÊàèÊ®°Âùó -->
      {mediumGames.length > 0 && (
        <section class="game-module medium-module">
          <div class="module-header">
            <div class="module-icon medium-icon">
              <i class="fas fa-meh"></i>
            </div>
            <div class="module-title-group">
              <h2 class="module-title">Medium Language Games</h2>
              <p class="module-subtitle">Intermediate challenges for developing language skills</p>
            </div>
          </div>
          
          <div class="games-grid">
            {mediumGames.slice(0, 4).map((game, index) => {
              const popularity = Math.floor(Math.random() * 12000) + 300;
              const formatPopularity = (num) => {
                if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
                return num.toString();
              };
              
              return (
                <a href={game.url} class="game-card animate-fadeInUp" style={`animation-delay: ${index * 0.1}s`}>
                  <div class="game-image-container">
                    <img src={game.image} alt={game.title} class="game-image" loading="lazy" />
                    <div class="game-overlay">
                      <div class="popularity-badge">‚≠ê {formatPopularity(popularity)}</div>
                      <button class="play-button">
                        <i class="fas fa-play"></i>
                      </button>
                    </div>
                  </div>
                  <div class="game-info">
                    <h3 class="game-title">{game.title}</h3>
                    <div class="game-tags">
                      <span class="age-tag">{game.age}</span>
                      <span class="category-tag language">Language</span>
                      <span class="difficulty-tag medium">MEDIUM</span>
                    </div>
                  </div>
                </a>
              );
            })}
          </div>
        </section>
      )}

      <!-- 5. Âõ∞ÈöæÊ∏∏ÊàèÊ®°Âùó -->
      {hardGames.length > 0 && (
        <section class="game-module hard-module">
          <div class="module-header">
            <div class="module-icon hard-icon">
              <i class="fas fa-frown"></i>
            </div>
            <div class="module-title-group">
              <h2 class="module-title">Advanced Language Games</h2>
              <p class="module-subtitle">Complex language challenges for advanced learners</p>
            </div>
          </div>
          
          <div class="games-grid">
            {hardGames.slice(0, 4).map((game, index) => {
              const popularity = Math.floor(Math.random() * 6000) + 100;
              const formatPopularity = (num) => {
                if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
                return num.toString();
              };
              
              return (
                <a href={game.url} class="game-card animate-fadeInUp" style={`animation-delay: ${index * 0.1}s`}>
                  <div class="game-image-container">
                    <img src={game.image} alt={game.title} class="game-image" loading="lazy" />
                    <div class="game-overlay">
                      <div class="popularity-badge">{formatPopularity(popularity)}</div>
                      <button class="play-button">
                        <i class="fas fa-play"></i>
                      </button>
                    </div>
                  </div>
                  <div class="game-info">
                    <h3 class="game-title">{game.title}</h3>
                    <div class="game-tags">
                      <span class="age-tag">{game.age}</span>
                      <span class="category-tag language">Language</span>
                      <span class="difficulty-tag hard">HARD</span>
                    </div>
                  </div>
                </a>
              );
            })}
          </div>
        </section>
      )}

      <!-- 6. Â≠¶‰π†Âª∫ËÆÆÊ®°Âùó -->
      <section class="game-module tips-module">
        <div class="module-header">
          <div class="module-icon tips-icon">
            <i class="fas fa-lightbulb"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Language Learning Tips</h2>
            <p class="module-subtitle">Expert advice to improve your language skills</p>
          </div>
        </div>
        
        <div class="tips-grid">
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-clock"></i>
            </div>
            <div class="tip-content">
              <h3 class="tip-title">Practice Daily</h3>
              <p class="tip-text">Spend 15-20 minutes daily practicing language concepts through games</p>
            </div>
          </div>
          
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-book"></i>
            </div>
            <div class="tip-content">
              <h3 class="tip-title">Read Regularly</h3>
              <p class="tip-text">Expand vocabulary and comprehension by reading diverse materials</p>
            </div>
          </div>
          
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-comments"></i>
            </div>
            <div class="tip-content">
              <h3 class="tip-title">Practice Speaking</h3>
              <p class="tip-text">Improve pronunciation and fluency through regular conversation practice</p>
            </div>
          </div>
          
          <div class="tip-item">
            <div class="tip-icon">
              <i class="fas fa-puzzle-piece"></i>
            </div>
            <div class="tip-content">
              <h3 class="tip-title">Use Context Clues</h3>
              <p class="tip-text">Learn to understand new words through surrounding context</p>
            </div>
          </div>
        </div>
      </section>

      <!-- 7. Ê†∏ÂøÉÊäÄËÉΩÊ®°Âùó -->
      <section class="game-module skills-module">
        <div class="module-header">
          <div class="module-icon skills-icon">
            <i class="fas fa-brain"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Core Skills You'll Develop</h2>
            <p class="module-subtitle">Essential language abilities gained through gameplay</p>
          </div>
        </div>
        
        <div class="skills-grid">
          <div class="skill-item">
            <div class="skill-icon">
              <i class="fas fa-book-open"></i>
            </div>
            <div class="skill-content">
              <h3 class="skill-title">Reading Comprehension</h3>
              <p class="skill-description">Understand and analyze written texts effectively</p>
            </div>
          </div>
          
          <div class="skill-item">
            <div class="skill-icon">
              <i class="fas fa-spell-check"></i>
            </div>
            <div class="skill-content">
              <h3 class="skill-title">Vocabulary Building</h3>
              <p class="skill-description">Expand word knowledge and usage skills</p>
            </div>
          </div>
          
          <div class="skill-item">
            <div class="skill-icon">
              <i class="fas fa-pen"></i>
            </div>
            <div class="skill-content">
              <h3 class="skill-title">Writing Skills</h3>
              <p class="skill-description">Develop clear and effective written communication</p>
            </div>
          </div>
          
          <div class="skill-item">
            <div class="skill-icon">
              <i class="fas fa-language"></i>
            </div>
            <div class="skill-content">
              <h3 class="skill-title">Grammar Mastery</h3>
              <p class="skill-description">Master language rules and sentence structure</p>
            </div>
          </div>
          
          <div class="skill-item">
            <div class="skill-icon">
              <i class="fas fa-microphone"></i>
            </div>
            <div class="skill-content">
              <h3 class="skill-title">Communication</h3>
              <p class="skill-description">Express ideas clearly and confidently</p>
            </div>
          </div>
          
          <div class="skill-item">
            <div class="skill-icon">
              <i class="fas fa-lightbulb"></i>
            </div>
            <div class="skill-content">
              <h3 class="skill-title">Critical Thinking</h3>
              <p class="skill-description">Analyze and evaluate language use and meaning</p>
            </div>
          </div>
        </div>
      </section>

    </div>
  </main>
</BaseLayout>

<style>
  /* ‰∏ªË¶ÅÂÜÖÂÆπÂå∫Âüü */
  .main-content {
    width: 100%;
    background: #FEFCFB;
    min-height: 100vh;
  }

  .content-wrapper {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  /* 1. È°µÈù¢È°∂ÈÉ®Âå∫ÂüüÊ†∑Âºè */
  .page-header {
    background: linear-gradient(135deg, #FFFBF5 0%, #FFF7ED 50%, rgba(192, 38, 211, 0.08) 100%);
    border-radius: 20px;
    padding: 2rem;
    margin-bottom: 2.5rem;
    border: 1px solid rgba(192, 38, 211, 0.15);
    box-shadow: 
      0 8px 32px rgba(192, 38, 211, 0.08),
      0 2px 8px rgba(0, 0, 0, 0.04);
    position: relative;
    overflow: hidden;
  }

  .page-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent 0%, rgba(192, 38, 211, 0.3) 50%, transparent 100%);
  }

  .header-content {
    display: flex;
    align-items: center;
    gap: 2rem;
  }

  .category-icon-container {
    flex-shrink: 0;
  }

  .category-icon {
    width: 72px;
    height: 72px;
    border-radius: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    transition: all 0.3s ease;
  }

  .category-icon.language {
    background: linear-gradient(135deg, #C026D3 0%, #A21CAF 50%, #86198F 100%);
    box-shadow: 
      0 8px 24px rgba(192, 38, 211, 0.3),
      0 4px 12px rgba(192, 38, 211, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
  }

  .category-icon:hover {
    transform: translateY(-2px) scale(1.02);
    box-shadow: 
      0 12px 32px rgba(192, 38, 211, 0.4),
      0 6px 16px rgba(192, 38, 211, 0.3),
      inset 0 1px 0 rgba(255, 255, 255, 0.3);
  }

  .icon-background {
    font-size: 2rem;
    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2));
  }

  .header-text {
    flex: 1;
  }

  .page-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 2.5rem;
    font-weight: 800;
    margin: 0 0 0.5rem 0;
    background: linear-gradient(135deg, #C026D3 0%, #A21CAF 50%, #86198F 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    line-height: 1.2;
  }

  .page-description {
    font-size: 1.125rem;
    color: #64748B;
    margin: 0;
    line-height: 1.6;
  }

  /* 2-5. Ê∏∏ÊàèÊ®°ÂùóÈÄöÁî®Ê†∑Âºè */
  .game-module {
    margin-bottom: 3rem;
  }

  .module-header {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    margin-bottom: 1.5rem;
    padding: 1.5rem;
    background: white;
    border-radius: 16px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    border: 1px solid #F3F4F6;
  }

  .module-icon {
    width: 48px;
    height: 48px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.25rem;
    color: white;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    flex-shrink: 0;
    margin-top: 2px;
  }

  .featured-icon {
    background: linear-gradient(135deg, #F59E0B 0%, #D97706 100%);
  }

  .easy-icon {
    background: linear-gradient(135deg, #10B981 0%, #059669 100%);
  }

  .medium-icon {
    background: linear-gradient(135deg, #F59E0B 0%, #D97706 100%);
  }

  .hard-icon {
    background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%);
  }

  .tips-icon {
    background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%);
  }

  .skills-icon {
    background: linear-gradient(135deg, #EC4899 0%, #DB2777 100%);
  }

  .module-title-group {
    flex: 1;
  }

  .module-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 1.5rem;
    font-weight: 700;
    color: #1F2937;
    margin: 0 0 0.25rem 0;
    line-height: 1.3;
  }

  .module-subtitle {
    font-size: 0.9rem;
    color: #6B7280;
    margin: 0;
    line-height: 1.4;
  }

  /* Ê∏∏ÊàèÁΩëÊ†º */
  .games-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
    padding: 0 1.5rem 1.5rem;
  }

  .game-card {
    background: white;
    border-radius: 16px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    text-decoration: none;
    color: inherit;
    border: 1px solid #F3F4F6;
  }

  .game-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
    border-color: rgba(192, 38, 211, 0.2);
  }

  .game-image-container {
    position: relative;
    height: 200px;
    overflow: hidden;
  }

  .game-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .game-card:hover .game-image {
    transform: scale(1.05);
  }

  .game-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to bottom, rgba(0,0,0,0.1) 0%, rgba(0,0,0,0.3) 100%);
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    padding: 1rem;
  }

  .popularity-badge {
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 6px;
    font-size: 0.75rem;
    font-weight: 600;
    backdrop-filter: blur(4px);
  }

  .play-button {
    position: absolute;
    bottom: 1rem;
    right: 1rem;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: rgba(192, 38, 211, 0.9);
    border: none;
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    opacity: 0;
    transform: scale(0.8);
    backdrop-filter: blur(4px);
  }

  .game-card:hover .play-button {
    opacity: 1;
    transform: scale(1);
  }

  .play-button:hover {
    background: rgba(192, 38, 211, 1);
    transform: scale(1.1);
  }

  .game-info {
    padding: 1rem;
  }

  .game-title {
    font-size: 1rem;
    font-weight: 600;
    color: #1F2937;
    margin: 0 0 0.75rem 0;
    line-height: 1.3;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .game-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .game-tags span {
    padding: 0.25rem 0.5rem;
    border-radius: 6px;
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  .age-tag {
    background: #F3F4F6;
    color: #6B7280;
  }

  .category-tag.language {
    background: linear-gradient(135deg, #C026D3, #A21CAF);
    color: white;
  }

  .feature-tag.featured {
    background: linear-gradient(135deg, #F59E0B, #D97706);
    color: white;
  }

  .difficulty-tag.easy {
    background: linear-gradient(135deg, #10B981, #059669);
    color: white;
  }

  .difficulty-tag.medium {
    background: linear-gradient(135deg, #F59E0B, #D97706);
    color: white;
  }

  .difficulty-tag.hard {
    background: linear-gradient(135deg, #EF4444, #DC2626);
    color: white;
  }

  /* 6. Â≠¶‰π†Âª∫ËÆÆÊ®°ÂùóÊ†∑Âºè */
  .tips-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
    padding: 0 1.5rem 1.5rem;
  }

  .tip-item {
    background: white;
    border-radius: 12px;
    padding: 1.25rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    border: 1px solid #F3F4F6;
    transition: all 0.3s ease;
    display: flex;
    gap: 0.875rem;
    align-items: flex-start;
  }

  .tip-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    border-color: rgba(139, 92, 246, 0.2);
  }

  .tip-icon {
    width: 32px;
    height: 32px;
    border-radius: 8px;
    background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 0.875rem;
    flex-shrink: 0;
    margin-top: 2px;
  }

  .tip-content {
    flex: 1;
  }

  .tip-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 0.9rem;
    font-weight: 600;
    color: #1F2937;
    margin: 0 0 0.25rem 0;
    line-height: 1.3;
  }

  .tip-text {
    font-size: 0.8rem;
    color: #6B7280;
    margin: 0;
    line-height: 1.4;
  }

  /* 7. Ê†∏ÂøÉÊäÄËÉΩÊ®°ÂùóÊ†∑Âºè */
  .skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1rem;
    padding: 0 1.5rem 1.5rem;
  }

  .skill-item {
    background: white;
    border-radius: 12px;
    padding: 1.25rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.06);
    border: 1px solid #F3F4F6;
    transition: all 0.3s ease;
    text-align: left;
    display: flex;
    gap: 0.875rem;
    align-items: flex-start;
  }

  .skill-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
    border-color: rgba(236, 72, 153, 0.2);
  }

  .skill-icon {
    width: 32px;
    height: 32px;
    border-radius: 8px;
    background: linear-gradient(135deg, #EC4899 0%, #DB2777 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 0.875rem;
    box-shadow: 0 2px 6px rgba(236, 72, 153, 0.3);
    flex-shrink: 0;
    margin-top: 2px;
  }

  .skill-content {
    flex: 1;
  }

  .skill-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 0.9rem;
    font-weight: 600;
    color: #1F2937;
    margin: 0 0 0.25rem 0;
    line-height: 1.3;
  }

  .skill-description {
    font-size: 0.8rem;
    color: #6B7280;
    margin: 0;
    line-height: 1.4;
  }

  /* Âä®Áîª */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fadeInUp {
    animation: fadeInUp 0.6s ease-out both;
  }

  /* ÂìçÂ∫îÂºèËÆæËÆ° */
  @media (max-width: 768px) {
    .content-wrapper {
      padding: 1rem;
    }

    .page-header {
      padding: 1.5rem;
      margin-bottom: 2rem;
    }

    .header-content {
      flex-direction: column;
      text-align: center;
      gap: 1rem;
    }

    .page-title {
      font-size: 2rem;
    }

    .page-description {
      font-size: 1rem;
    }

    .module-header {
      flex-direction: column;
      text-align: center;
      gap: 0.75rem;
      padding: 1rem;
    }

    .games-grid {
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1rem;
      padding: 0 1rem 1rem;
    }

    .tips-grid {
      grid-template-columns: 1fr;
      padding: 0 1rem 1rem;
    }

    .skills-grid {
      grid-template-columns: 1fr;
      padding: 0 1rem 1rem;
    }

    .tip-icon, .skill-icon {
      width: 28px;
      height: 28px;
      font-size: 0.75rem;
    }

    .tip-title, .skill-title {
      font-size: 0.875rem;
    }

    .tip-text, .skill-description {
      font-size: 0.75rem;
    }
  }

  @media (max-width: 640px) {
    .games-grid {
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    }
  }
</style> 


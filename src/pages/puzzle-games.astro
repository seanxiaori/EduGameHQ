---
import BaseLayout from '../layouts/BaseLayout.astro';
import type { Game, GameData } from '../types/game';
import fs from 'fs';
import path from 'path';

const seoData = {
  title: "Puzzle Games for Kids | Brain Training & Logic Games",
  description: "Challenge your mind with fun puzzle games for kids aged 6-18. Improve logic, critical thinking, and problem-solving skills through engaging brain teasers.",
  keywords: ["puzzle games", "brain games", "logic games", "critical thinking games", "problem solving games", "kids puzzles", "educational puzzles"],
  ogImage: "/images/puzzle-games-og.jpg"
};

// ‰ªéJSONÊñá‰ª∂ËØªÂèñÊ∏∏ÊàèÊï∞ÊçÆ
const gamesDataPath = path.join(process.cwd(), 'src/data/games/games.json');
let allGamesData: GameData = {};

try {
  const fileContent = fs.readFileSync(gamesDataPath, 'utf-8');
  allGamesData = JSON.parse(fileContent) as GameData;
} catch (error) {
  console.warn('Unable to read games data file');
}

// Á≠õÈÄâÁõäÊô∫Ê∏∏Êàè
const puzzleGames = Object.entries(allGamesData)
  .filter(([id, game]: [string, Game]) => game.category === 'puzzle')
  .map(([id, game]: [string, Game]) => ({
    id: id,
    title: game.title,
    description: game.description,
    image: game.screenshots && game.screenshots.length > 0 
      ? `/images/games/details/${game.screenshots[0]}` 
      : `/images/games/${id}.svg`,
    url: `/games/${id}`,
    category: game.category,
    categoryName: game.categoryName,
    ageRange: game.ageRange,
    difficulty: game.difficulty || 'medium',
    skills: game.skills || [],
    isFeatured: Math.random() > 0.7
  }));
---

<BaseLayout title={seoData.title} description={seoData.description}>
  <!-- ÂºïÂÖ•Áªü‰∏ÄÁöÑÊ∏∏ÊàèÂç°ÁâáÊ†∑Âºè -->
  <link rel="stylesheet" href="/src/styles/game-card.css">

  <!-- ‰∏ªË¶ÅÂÜÖÂÆπ -->
  <main class="main-content">
    <div class="content-wrapper">
      <!-- È°µÈù¢Â§¥ÈÉ® -->
      <section class="page-header">
        <div class="header-content">
          <div class="header-icon">
            <div class="section-icon puzzle">
              <i class="fas fa-puzzle-piece"></i>
            </div>
          </div>
          <div class="header-text">
            <h1 class="page-title">Puzzle Games</h1>
            <p class="page-description">
              Challenge your mind with engaging puzzle games that develop critical thinking, logic, and problem-solving skills. Perfect brain training for all ages.
            </p>
          </div>
        </div>
        
        <div class="header-stats">
          <div class="stat-item">
            <div class="stat-number">{puzzleGames.length}</div>
            <div class="stat-label">Puzzle Games</div>
          </div>
          <div class="stat-item">
            <div class="stat-number">6-18</div>
            <div class="stat-label">Age Range</div>
          </div>
          <div class="stat-item">
            <div class="stat-number">100%</div>
            <div class="stat-label">Free</div>
          </div>
        </div>
      </section>

      <!-- Ê∏∏ÊàèÁΩëÊ†º -->
      <section class="games-section">
        <div class="games-grid">
          {puzzleGames.map((game, index) => {
            // Ê®°Êãü‰∫∫Ê∞îÂÄºÊï∞ÊçÆ
            const popularity = Math.floor(Math.random() * 15000) + 500;
            const formatPopularity = (num) => {
              if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
              if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
              return num.toString();
            };
            
            // Ê®°ÊãüÊ∏∏ÊàèÂéÜÂè≤
            const playHistory = ['Today', 'Yesterday', 'A few days ago', 'A few weeks ago', null];
            const randomHistory = playHistory[Math.floor(Math.random() * playHistory.length)];
            
            // Á°ÆÂÆöÁâπËâ≤Ê†áÁ≠æ
            const isNew = Math.random() > 0.8;
            const isHot = popularity > 10000;
            const isFeatured = game.isFeatured;
            const isUpdated = Math.random() > 0.9;
            
            let featureTag = null;
            if (isNew) featureTag = 'NEW';
            else if (isHot) featureTag = 'HOT';
            else if (isFeatured) featureTag = 'FEATURED';
            else if (isUpdated) featureTag = 'UPDATED';
            
            return (
              <a href={game.url} class={`game-card puzzle-theme animate-fadeInUp`} style={`animation-delay: ${index * 0.1}s`}>
                <div class="game-image-container">
                  <img src={game.image} alt={game.title} class="game-image" />
                  <div class="game-overlay">
                    {randomHistory && (
                      <div class={`played-badge ${
                        randomHistory === 'Today' ? 'today' : 
                        randomHistory === 'Yesterday' ? 'yesterday' : 
                        randomHistory === 'A few days ago' ? 'few-days-ago' : 
                        'weeks-ago'
                      }`}>
                        {randomHistory}
                      </div>
                    )}
                    <div class="popularity-badge">
                      {popularity > 5000 ? 'üî•' : popularity > 1000 ? '‚≠ê' : ''} {formatPopularity(popularity)}
                    </div>
                    <div class="play-button">
                      <i class="fas fa-play"></i>
                      <span>Play Now</span>
                    </div>
                  </div>
                </div>
                <div class="game-info">
                  <h3 class="game-title">{game.title}</h3>
                  <p class="game-description">{game.description}</p>
                  <div class="game-tags">
                    <span class="category-tag puzzle">Puzzle</span>
                    <span class="game-tag age">Ages {game.ageRange}</span>
                    <span class={`game-tag difficulty ${game.difficulty}`}>{game.difficulty.charAt(0).toUpperCase() + game.difficulty.slice(1)}</span>
                    {featureTag && (
                      <span class={`feature-tag ${featureTag.toLowerCase()}`}>{featureTag}</span>
                    )}
                  </div>
                  {game.skills && game.skills.length > 0 && (
                    <div class="game-stats">
                      <div class="stat">
                        <i class="fas fa-star"></i>
                        <span>{game.skills.slice(0, 2).join(', ')}</span>
                      </div>
                    </div>
                  )}
                </div>
              </a>
            );
          })}
        </div>
      </section>

      <!-- ‰æßËæπÊ†è‰ø°ÊÅØ -->
      <section class="sidebar-section">
        <div class="sidebar-card">
          <div class="sidebar-title">
            <div class="sidebar-icon">
              <i class="fas fa-lightbulb"></i>
            </div>
            Puzzle Solving Tips
          </div>
          <ul class="tips-list">
            <li>Start with easier puzzles and gradually increase difficulty</li>
            <li>Take breaks if you feel stuck - fresh perspective helps</li>
            <li>Look for patterns and logical connections</li>
            <li>Don't be afraid to try different approaches</li>
            <li>Practice regularly to improve problem-solving speed</li>
          </ul>
        </div>

        <div class="sidebar-card">
          <div class="sidebar-title">
            <div class="sidebar-icon">
              <i class="fas fa-brain"></i>
            </div>
            Skills Developed
          </div>
          <div class="skills-list">
            <span class="skill-tag">Critical Thinking</span>
            <span class="skill-tag">Logic Reasoning</span>
            <span class="skill-tag">Pattern Recognition</span>
            <span class="skill-tag">Spatial Awareness</span>
            <span class="skill-tag">Persistence</span>
            <span class="skill-tag">Focus</span>
          </div>
        </div>
      </section>
    </div>
  </main>

  <!-- Ê∏∏ÊàèÂç°ÁâáÁÆ°ÁêÜÂäüËÉΩÁöÑJavaScript -->
  <script is:inline>
    // Ê∏∏ÊàèÂç°ÁâáÁÆ°ÁêÜÁ±ª
    class GameCardManager {
      constructor() {
        this.initializeCards();
      }

      // ËÆ∞ÂΩïÊ∏∏ÊàèÊí≠Êîæ
      recordGamePlay(gameId) {
        const history = JSON.parse(localStorage.getItem('gameHistory') || '{}');
        history[gameId] = Date.now();
        localStorage.setItem('gameHistory', JSON.stringify(history));
        
        // Êõ¥Êñ∞‰∫∫Ê∞îÂÄº
        const popularity = JSON.parse(localStorage.getItem('gamePopularity') || '{}');
        popularity[gameId] = (popularity[gameId] || 0) + 1;
        localStorage.setItem('gamePopularity', JSON.stringify(popularity));
      }

      // ÂàùÂßãÂåñÂç°Áâá
      initializeCards() {
        const cards = document.querySelectorAll('.game-card');
        cards.forEach(card => {
          card.addEventListener('click', (e) => {
            const gameId = card.href.split('/').pop();
            if (gameId) {
              this.recordGamePlay(gameId);
            }
          });
        });
      }
    }

    // È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÁöÑÂàùÂßãÂåñ
    document.addEventListener('DOMContentLoaded', function() {
      console.log('ÁõäÊô∫Ê∏∏ÊàèÈ°µÈù¢Âä†ËΩΩÂÆåÊàêÔºåÊ∏∏ÊàèÂç°ÁâáÁÆ°ÁêÜÁ≥ªÁªüÂ∑≤ÂêØÁî®');
      window.gameCardManager = new GameCardManager();
      
      // Ê∑ªÂä†Ê∑°ÂÖ•Âä®Áîª
      const cards = document.querySelectorAll('.animate-fadeInUp');
      cards.forEach((card, index) => {
        setTimeout(() => {
          card.style.opacity = '1';
          card.style.transform = 'translateY(0)';
        }, index * 100);
      });
    });
  </script>
</BaseLayout>

<style>
  /* ‰∏ªË¶ÅÂÜÖÂÆπÂå∫Âüü */
  .main-content {
    width: 100%;
    background: #FEFCFB;
    min-height: 100vh;
  }

  .content-wrapper {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
  }

  /* È°µÈù¢Â§¥ÈÉ® */
  .page-header {
    background: linear-gradient(135deg, #F3F4F6 0%, #E5E7EB 50%, #D1D5DB 100%);
    border-radius: 20px;
    padding: 3rem;
    margin-bottom: 3rem;
    box-shadow: 0 4px 14px 0 rgba(124, 58, 237, 0.2);
    position: relative;
    overflow: hidden;
  }

  .page-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.2), transparent 50%);
  }

  .header-content {
    display: flex;
    align-items: center;
    gap: 2rem;
    margin-bottom: 2rem;
    position: relative;
    z-index: 1;
  }

  .header-icon {
    flex-shrink: 0;
  }

  .section-icon {
    width: 80px;
    height: 80px;
    border-radius: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2rem;
    color: white;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    position: relative;
    overflow: hidden;
  }

  .section-icon.puzzle {
    background: linear-gradient(135deg, #7C3AED 0%, #6D28D9 100%);
  }

  .section-icon::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, transparent 50%);
  }

  .header-text {
    flex: 1;
  }

  .page-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 3rem;
    font-weight: 800;
    margin-bottom: 1rem;
    color: #7C3AED;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .page-description {
    font-size: 1.125rem;
    color: #6B7280;
    line-height: 1.6;
    margin-bottom: 0;
  }

  .header-stats {
    display: flex;
    justify-content: center;
    gap: 2rem;
    position: relative;
    z-index: 1;
  }

  .stat-item {
    text-align: center;
    background: rgba(255, 255, 255, 0.9);
    padding: 1rem;
    border-radius: 12px;
    backdrop-filter: blur(10px);
  }

  .stat-number {
    display: block;
    font-size: 1.5rem;
    font-weight: 800;
    color: #7C3AED;
    margin-bottom: 0.25rem;
  }

  .stat-label {
    font-size: 0.875rem;
    color: #6B7280;
    font-weight: 500;
  }

  /* Ê∏∏ÊàèÂå∫Âüü */
  .games-section {
    margin-bottom: 3rem;
  }

  /* ‰æßËæπÊ†èÊ†∑Âºè */
  .sidebar-section {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .sidebar-card {
    background: white;
    border-radius: 16px;
    padding: 1.5rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .sidebar-title {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 1.1rem;
    font-weight: 700;
    color: #1F2937;
    margin-bottom: 1rem;
  }

  .sidebar-icon {
    width: 32px;
    height: 32px;
    border-radius: 8px;
    background: linear-gradient(135deg, #7C3AED 0%, #6D28D9 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 0.9rem;
    box-shadow: 0 2px 8px rgba(124, 58, 237, 0.3);
  }

  .tips-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .tips-list li {
    padding: 0.5rem 0;
    border-bottom: 1px solid #F3F4F6;
    color: #6B7280;
    font-size: 0.9rem;
    line-height: 1.4;
  }

  .tips-list li:last-child {
    border-bottom: none;
  }

  .skills-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .skill-tag {
    background: rgba(124, 58, 237, 0.1);
    color: #7C3AED;
    padding: 0.25rem 0.75rem;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 500;
  }

  /* Âä®ÁîªÊïàÊûú */
  .animate-fadeInUp {
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.6s ease-out;
  }

  /* ÂìçÂ∫îÂºèËÆæËÆ° */
  @media (max-width: 1024px) {
    .sidebar-section {
      grid-template-columns: 1fr;
    }
  }

  @media (max-width: 768px) {
    .content-wrapper {
      padding: 1rem;
    }

    .page-header {
      padding: 2rem 1rem;
    }

    .header-content {
      flex-direction: column;
      text-align: center;
      gap: 1rem;
    }

    .page-title {
      font-size: 2rem;
    }

    .header-stats {
      flex-direction: column;
      gap: 1rem;
    }

    .stat-item {
      padding: 0.75rem;
    }
  }
</style> 


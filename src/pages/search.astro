---
// 客户端搜索页面 - 支持静态构建
import BaseLayout from '../layouts/BaseLayout.astro';
import GameCard from '../components/GameCard.astro';
import type { Game } from '../types/game';
import { getCollection } from 'astro:content';

// 获取所有游戏数据
const allGamesData = await getCollection('games');
const allGames: Game[] = allGamesData.map((entry: any) => ({
  ...entry.data,
  slug: entry.slug
}));

// 获取推荐的热门游戏
const popularGames = allGames
  .filter(game => game.featured || (game.popularity && game.popularity > 800))
  .slice(0, 12);

// 热门搜索关键词
const popularSearchTerms = [
  { term: 'math', icon: 'fa-calculator', color: 'blue' },
  { term: 'science', icon: 'fa-flask', color: 'green' },
  { term: 'puzzle', icon: 'fa-puzzle-piece', color: 'orange' },
  { term: 'language', icon: 'fa-language', color: 'red' },
  { term: 'sports', icon: 'fa-futbol', color: 'purple' },
  { term: 'art', icon: 'fa-palette', color: 'teal' }
];

// SEO数据
const seoData = {
  title: 'Search Educational Games - EduGameHQ',
  description: 'Search our collection of educational games by subject, difficulty, or keywords. Find the perfect learning game for your needs.',
  keywords: ['search games', 'educational games', 'learning games', 'find games', 'game search']
};
---

<BaseLayout title={seoData.title} description={seoData.description}>
  <!-- 引入统一游戏卡片样式 -->
  <link rel="stylesheet" href="/src/styles/game-card.css">
  
  <main class="main-content">
    <div class="content-wrapper">
      
      <!-- 搜索头部 -->
      <section class="search-header">
        <div class="header-content">
          <div class="header-icon">
            <div class="section-icon search">
              <i class="fas fa-search"></i>
            </div>
          </div>
          <div class="header-text">
            <div>
              <h1 class="page-title">Search Educational Games</h1>
              <p class="page-description">
                Find the perfect educational game for your learning journey
              </p>
            </div>
          </div>
        </div>
      </section>

      <section class="search-prompt">
        <div class="module-header">
          <div class="module-icon prompt-icon">
            <i class="fas fa-lightbulb"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Start Your Learning Adventure</h2>
            <p class="module-subtitle">Use the search bar above to find educational games by subject, difficulty, or keywords</p>
          </div>
        </div>
        
        <div class="popular-searches">
          <h3 class="section-title">Popular Searches</h3>
          <div class="search-tags">
            {popularSearchTerms.map(item => (
              <a href={`/search?q=${item.term}`} class={`search-tag ${item.color}`}>
                <i class={`fas ${item.icon}`}></i>
                <span>{item.term.charAt(0).toUpperCase() + item.term.slice(1)}</span>
              </a>
            ))}
          </div>
        </div>
      </section>

      {/* 推荐游戏（当没有搜索或没有结果时显示） */}
      <section class="recommendations">
        <div class="module-header">
          <div class="module-icon recommendations-icon">
            <i class="fas fa-star"></i>
          </div>
          <div class="module-title-group">
            <h2 class="module-title">Popular Educational Games</h2>
            <p class="module-subtitle">Start with our most loved educational games</p>
          </div>
        </div>
        
        <div class="games-grid">
          {popularGames.map((game) => (
            <GameCard 
              game={game} 
              showPopularity={true} 
              showFavorite={true} 
              showDeveloper={false}
            />
          ))}
        </div>
      </section>

    </div>
  </main>
</BaseLayout>

<style>
  /* 主要内容区域 */
  .main-content {
    width: 100%;
    background: linear-gradient(135deg, #FEFCFB 0%, #FEF3E2 50%, rgba(245, 158, 11, 0.05) 100%);
    min-height: 100vh;
  }

  .content-wrapper {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
  }

  /* 搜索头部 - 橙色主题 */
  .search-header {
    background: linear-gradient(135deg, #FEF3E2 0%, #FED7AA 50%, #F59E0B 100%);
    border-radius: 20px;
    padding: 3rem;
    margin-bottom: 3rem;
    box-shadow: 0 4px 14px 0 rgba(245, 158, 11, 0.2);
    position: relative;
    overflow: hidden;
  }

  .search-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.2), transparent 50%);
  }

  .header-content {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    position: relative;
    z-index: 1;
  }

  .header-icon {
    flex-shrink: 0;
  }

  .section-icon {
    width: 64px;
    height: 64px;
    border-radius: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.5rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .section-icon.search {
    background: linear-gradient(135deg, #F59E0B, #D97706);
  }

  .header-text {
    flex: 1;
  }

  .page-title {
    font-family: 'Space Grotesk', sans-serif;
    font-size: 2.5rem;
    font-weight: 800;
    margin: 0 0 0.5rem 0;
    color: #92400E;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    line-height: 1.2;
  }

  .page-description {
    font-size: 1.125rem;
    color: #78350F;
    margin: 0;
    font-weight: 500;
    line-height: 1.6;
  }

  .page-description strong {
    color: #92400E;
    font-weight: 700;
  }

  /* 通用模块样式 */
  .search-prompt,
  .recommendations {
    background: white;
    border-radius: 20px;
    padding: 2rem;
    margin-bottom: 3rem;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
    border: 1px solid #E5E7EB;
  }

  .module-header {
    display: flex;
    align-items: center;
    gap: 1.5rem;
    margin-bottom: 2rem;
    padding-bottom: 1.5rem;
    border-bottom: 2px solid #F3F4F6;
  }

  .module-icon {
    width: 56px;
    height: 56px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.25rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    flex-shrink: 0;
  }

  .prompt-icon {
    background: linear-gradient(135deg, #F59E0B, #D97706);
  }

  .recommendations-icon {
    background: linear-gradient(135deg, #DC2626, #B91C1C);
  }

  .module-title-group {
    flex: 1;
  }

  .module-title {
    font-size: 1.75rem;
    font-weight: 700;
    color: #1F2937;
    margin: 0 0 0.25rem 0;
    font-family: 'Space Grotesk', sans-serif;
  }

  .module-subtitle {
    font-size: 1rem;
    color: #6B7280;
    margin: 0;
    font-weight: 500;
  }

  /* 搜索标签 */
  .section-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #1F2937;
    margin: 0 0 1.5rem 0;
    text-align: center;
    font-family: 'Space Grotesk', sans-serif;
  }

  .search-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: center;
  }

  .search-tag {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.25rem;
    border-radius: 12px;
    text-decoration: none;
    font-weight: 600;
    font-size: 0.95rem;
    transition: all 0.3s ease;
    border: 2px solid transparent;
  }

  /* 搜索标签颜色变体 */
  .search-tag.blue {
    background: linear-gradient(135deg, #DBEAFE, #BFDBFE);
    color: #1D4ED8;
  }

  .search-tag.blue:hover {
    background: linear-gradient(135deg, #3B82F6, #2563EB);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  .search-tag.green {
    background: linear-gradient(135deg, #D1FAE5, #A7F3D0);
    color: #059669;
  }

  .search-tag.green:hover {
    background: linear-gradient(135deg, #10B981, #059669);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
  }

  .search-tag.purple {
    background: linear-gradient(135deg, #EDE9FE, #DDD6FE);
    color: #7C3AED;
  }

  .search-tag.purple:hover {
    background: linear-gradient(135deg, #8B5CF6, #7C3AED);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
  }

  .search-tag.orange {
    background: linear-gradient(135deg, #FED7AA, #FDBA74);
    color: #D97706;
  }

  .search-tag.orange:hover {
    background: linear-gradient(135deg, #F59E0B, #D97706);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(245, 158, 11, 0.3);
  }

  .search-tag.red {
    background: linear-gradient(135deg, #FEE2E2, #FECACA);
    color: #DC2626;
  }

  .search-tag.red:hover {
    background: linear-gradient(135deg, #EF4444, #DC2626);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
  }

  .search-tag.teal {
    background: linear-gradient(135deg, #CCFBF1, #99F6E4);
    color: #0F766E;
  }

  .search-tag.teal:hover {
    background: linear-gradient(135deg, #14B8A6, #0F766E);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(20, 184, 166, 0.3);
  }

  /* 游戏网格 */
  .games-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 1.5rem;
  }

  /* 搜索建议和热门搜索 */
  .popular-searches {
    padding: 1.5rem 0;
  }

  /* 响应式设计 */
  @media (max-width: 1024px) {
    .content-wrapper {
      padding: 1.5rem;
    }
    
    .search-header {
      padding: 2rem;
    }
    
    .header-content {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }
  }

  @media (max-width: 768px) {
    .content-wrapper {
      padding: 1rem;
    }
    
    .search-header {
      padding: 1.5rem;
    }
    
    .page-title {
      font-size: 2rem;
    }
    
    .games-grid {
      grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
      gap: 1rem;
    }
    
    .search-prompt,
    .recommendations {
      padding: 1.5rem;
    }
    
    .search-tags {
      gap: 0.75rem;
    }
    
    .search-tag {
      padding: 0.625rem 1rem;
      font-size: 0.9rem;
    }
  }

  @media (max-width: 480px) {
    .games-grid {
      grid-template-columns: 1fr;
    }
    
    .search-tags {
      flex-direction: column;
      align-items: center;
    }
    
    .search-tag {
      width: 100%;
      max-width: 240px;
      justify-content: center;
    }
  }
</style>

<script is:inline define:vars={{ allGames, popularSearchTerms }}>
  // 客户端搜索逻辑
  console.log('🔍 搜索页面初始化...');
  
  let currentResults = [];
  let isSearching = false;
  
  // 获取URL参数中的搜索关键词
  function getSearchQuery() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('q') || '';
  }
  
  // 执行搜索
  function performSearch(query) {
    if (!query || query.trim() === '') {
      showDefaultView();
      return;
    }
    
    console.log(`🔍 搜索关键词: "${query}"`);
    isSearching = true;
    
    const searchTerm = query.toLowerCase().trim();
    const results = allGames.filter(game => 
      game.title.toLowerCase().includes(searchTerm) ||
      game.description.toLowerCase().includes(searchTerm) ||
      game.category.toLowerCase().includes(searchTerm) ||
      (game.tags && game.tags.some(tag => tag.toLowerCase().includes(searchTerm)))
    );
    
    currentResults = results;
    displayResults(results, query);
  }
  
  // 显示搜索结果
  function displayResults(results, query) {
    updatePageTitle(results.length, query);
    
    if (results.length === 0) {
      showNoResults(query);
    } else {
      showResults(results, query);
    }
  }
  
  // 更新页面标题
  function updatePageTitle(count, query) {
    const titleElement = document.querySelector('.page-title');
    const descElement = document.querySelector('.page-description');
    
    if (titleElement && descElement) {
      if (count === 0) {
        titleElement.textContent = 'No Results Found';
        descElement.innerHTML = `Search results for: <strong>"${query}"</strong>`;
      } else {
        titleElement.textContent = `Found ${count} Results`;
        descElement.innerHTML = `Search results for: <strong>"${query}"</strong>`;
      }
    }
  }
  
  // 显示搜索结果
  function showResults(results, query) {
    hideAllSections();
    
    // 创建搜索结果区域
    const container = document.querySelector('.content-wrapper');
    let resultsSection = document.getElementById('search-results-section');
    
    if (!resultsSection) {
      resultsSection = document.createElement('section');
      resultsSection.id = 'search-results-section';
      resultsSection.className = 'search-results';
      container.appendChild(resultsSection);
    }
    
    resultsSection.innerHTML = `
      <div class="module-header">
        <div class="module-icon results-icon">
          <i class="fas fa-gamepad"></i>
        </div>
        <div class="module-title-group">
          <h2 class="module-title">Search Results</h2>
          <p class="module-subtitle">Found ${results.length} games matching "${query}"</p>
        </div>
      </div>
      <div class="games-grid" id="results-grid">
        ${results.map(game => createGameCard(game)).join('')}
      </div>
    `;
    
    resultsSection.style.display = 'block';
  }
  
  // 显示无结果
  function showNoResults(query) {
    hideAllSections();
    
    const container = document.querySelector('.content-wrapper');
    let noResultsSection = document.getElementById('no-results-section');
    
    if (!noResultsSection) {
      noResultsSection = document.createElement('section');
      noResultsSection.id = 'no-results-section';
      noResultsSection.className = 'no-results';
      container.appendChild(noResultsSection);
    }
    
    noResultsSection.innerHTML = `
      <div class="module-header">
        <div class="module-icon no-results-icon">
          <i class="fas fa-search"></i>
        </div>
        <div class="module-title-group">
          <h2 class="module-title">No Games Found</h2>
          <p class="module-subtitle">Sorry, we couldn't find any games matching "${query}"</p>
        </div>
      </div>
      <div class="search-suggestions">
        <h3 class="section-title">Try searching for:</h3>
        <div class="search-tags">
          ${popularSearchTerms.map(item => `
            <a href="/search?q=${item.term}" class="search-tag ${item.color}">
              <i class="fas ${item.icon}"></i>
              <span>${item.term.charAt(0).toUpperCase() + item.term.slice(1)} Games</span>
            </a>
          `).join('')}
        </div>
      </div>
    `;
    
    // 显示推荐游戏
    const recommendationsSection = document.querySelector('.recommendations');
    if (recommendationsSection) {
      const titleElement = recommendationsSection.querySelector('.module-title');
      const subtitleElement = recommendationsSection.querySelector('.module-subtitle');
      if (titleElement) titleElement.textContent = 'You Might Like These Games';
      if (subtitleElement) subtitleElement.textContent = 'Try these popular games instead';
      recommendationsSection.style.display = 'block';
    }
    
    noResultsSection.style.display = 'block';
  }
  
  // 显示默认视图
  function showDefaultView() {
    hideAllSections();
    isSearching = false;
    
    const titleElement = document.querySelector('.page-title');
    const descElement = document.querySelector('.page-description');
    
    if (titleElement && descElement) {
      titleElement.textContent = 'Search Educational Games';
      descElement.textContent = 'Find the perfect educational game for your learning journey';
    }
    
    const promptSection = document.querySelector('.search-prompt');
    const recommendationsSection = document.querySelector('.recommendations');
    
    if (promptSection) promptSection.style.display = 'block';
    if (recommendationsSection) {
      const titleElement = recommendationsSection.querySelector('.module-title');
      const subtitleElement = recommendationsSection.querySelector('.module-subtitle');
      if (titleElement) titleElement.textContent = 'Popular Educational Games';
      if (subtitleElement) subtitleElement.textContent = 'Start with our most loved educational games';
      recommendationsSection.style.display = 'block';
    }
  }
  
  // 隐藏所有动态创建的区域
  function hideAllSections() {
    const dynamicSections = ['search-results-section', 'no-results-section'];
    dynamicSections.forEach(id => {
      const section = document.getElementById(id);
      if (section) section.style.display = 'none';
    });
    
    const staticSections = ['.search-prompt', '.recommendations'];
    staticSections.forEach(selector => {
      const section = document.querySelector(selector);
      if (section) section.style.display = 'none';
    });
  }
  
  // 创建游戏卡片HTML
  function createGameCard(game) {
    return `
      <div class="game-card" data-game-id="${game.slug}">
        <a href="/games/${game.slug}" class="game-link">
          <div class="game-image-container">
            <img src="${game.thumbnail}" alt="${game.title}" class="game-image" loading="lazy">
            <div class="game-overlay">
              <span class="play-button">
                <i class="fas fa-play"></i>
              </span>
            </div>
          </div>
          <div class="game-content">
            <h3 class="game-title">${game.title}</h3>
            <p class="game-description">${game.description}</p>
            <div class="game-meta">
              <span class="category-tag ${game.category}">${game.category}</span>
              <div class="game-stats">
                <span class="popularity-stat">
                  <i class="fas fa-fire"></i>
                  <span class="popularity-count">-</span>
                </span>
              </div>
            </div>
          </div>
        </a>
      </div>
    `;
  }
  
  // 初始化页面
  function initializePage() {
    const query = getSearchQuery();
    
    if (query) {
      performSearch(query);
    } else {
      showDefaultView();
    }
    
    // 监听搜索框输入（如果存在）
    const searchInput = document.querySelector('input[name="q"]');
    if (searchInput) {
      searchInput.value = query;
      
      searchInput.addEventListener('input', (e) => {
        const newQuery = e.target.value;
        const url = new URL(window.location);
        if (newQuery) {
          url.searchParams.set('q', newQuery);
        } else {
          url.searchParams.delete('q');
        }
        history.replaceState(null, '', url);
        performSearch(newQuery);
      });
    }
  }
  
  // 页面加载完成后初始化
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializePage);
  } else {
    initializePage();
  }
  
  console.log('🔍 搜索页面初始化完成');
</script>



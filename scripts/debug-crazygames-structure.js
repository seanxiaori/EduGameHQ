import puppeteer from 'puppeteer';

/**
 * Ë∞ÉËØïCrazyGamesÈ°µÈù¢ÁªìÊûÑ
 */
async function debugCrazyGamesStructure() {
    console.log('üîç Ë∞ÉËØïCrazyGamesÈ°µÈù¢ÁªìÊûÑ...\n');
    
    const browser = await puppeteer.launch({
        headless: false, // ÊòæÁ§∫ÊµèËßàÂô®Á™óÂè£‰æø‰∫éËßÇÂØü
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox'
        ]
    });
    
    try {
        const page = await browser.newPage();
        await page.setViewport({ width: 1280, height: 720 });
        
        // ËÆæÁΩÆÁî®Êà∑‰ª£ÁêÜ
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
        
        // 1. Ê£ÄÊü•ÂàÜÁ±ªÈ°µÈù¢ÁªìÊûÑ
        console.log('1Ô∏è‚É£ Ê£ÄÊü•ÂàÜÁ±ªÈ°µÈù¢ÁªìÊûÑ...');
        const categoryUrl = 'https://www.crazygames.com/c/puzzle';
        console.log(`ËÆøÈóÆ: ${categoryUrl}`);
        
        await page.goto(categoryUrl, { 
            waitUntil: 'networkidle2',
            timeout: 30000 
        });
        
        // Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩ
        await new Promise(resolve => setTimeout(resolve, 5000));
        
        // ÂàÜÊûêÈ°µÈù¢ÁªìÊûÑ
        const pageStructure = await page.evaluate(() => {
            const structure = {
                title: document.title,
                gameLinks: [],
                allLinks: [],
                gameElements: []
            };
            
            // Êü•ÊâæÊâÄÊúâÂåÖÂê´gameÁöÑÈìæÊé•
            const allLinks = document.querySelectorAll('a');
            for (const link of allLinks) {
                if (link.href && link.href.includes('/game/')) {
                    structure.gameLinks.push({
                        href: link.href,
                        text: link.textContent?.trim(),
                        className: link.className
                    });
                }
                
                structure.allLinks.push({
                    href: link.href,
                    text: link.textContent?.trim()?.substring(0, 50),
                    className: link.className
                });
            }
            
            // Êü•ÊâæÂèØËÉΩÁöÑÊ∏∏ÊàèÂÆπÂô®
            const possibleGameContainers = [
                '.game-card',
                '.game-item',
                '[class*="game"]',
                '[data-game]',
                '.card',
                '.item'
            ];
            
            for (const selector of possibleGameContainers) {
                const elements = document.querySelectorAll(selector);
                if (elements.length > 0) {
                    structure.gameElements.push({
                        selector: selector,
                        count: elements.length,
                        sample: elements[0]?.outerHTML?.substring(0, 200)
                    });
                }
            }
            
            return structure;
        });
        
        console.log(`È°µÈù¢Ê†áÈ¢ò: ${pageStructure.title}`);
        console.log(`ÊâæÂà∞Ê∏∏ÊàèÈìæÊé•: ${pageStructure.gameLinks.length} ‰∏™`);
        console.log(`ÊÄªÈìæÊé•Êï∞: ${pageStructure.allLinks.length} ‰∏™`);
        
        if (pageStructure.gameLinks.length > 0) {
            console.log('\nÊ∏∏ÊàèÈìæÊé•Á§∫‰æã:');
            pageStructure.gameLinks.slice(0, 5).forEach((link, i) => {
                console.log(`  ${i + 1}. ${link.text}`);
                console.log(`     URL: ${link.href}`);
                console.log(`     Class: ${link.className}`);
            });
        }
        
        console.log('\nÂèØËÉΩÁöÑÊ∏∏ÊàèÂÆπÂô®:');
        pageStructure.gameElements.forEach(element => {
            console.log(`  ${element.selector}: ${element.count} ‰∏™ÂÖÉÁ¥†`);
        });
        
        // 2. Ê£ÄÊü•ÂÖ∑‰ΩìÊ∏∏ÊàèÈ°µÈù¢ÁöÑembedÊåâÈíÆ
        if (pageStructure.gameLinks.length > 0) {
            console.log('\n2Ô∏è‚É£ Ê£ÄÊü•Ê∏∏ÊàèÈ°µÈù¢ÁöÑembedÊåâÈíÆ...');
            const firstGame = pageStructure.gameLinks[0];
            console.log(`Ê£ÄÊü•Ê∏∏Êàè: ${firstGame.text}`);
            console.log(`URL: ${firstGame.href}`);
            
            await page.goto(firstGame.href, { 
                waitUntil: 'networkidle2',
                timeout: 30000 
            });
            
            // Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩ
            await new Promise(resolve => setTimeout(resolve, 5000));
            
            // Êü•ÊâæembedÁõ∏ÂÖ≥ÂÖÉÁ¥†
            const embedInfo = await page.evaluate(() => {
                const info = {
                    title: document.title,
                    buttons: [],
                    embedElements: [],
                    shareElements: [],
                    codeElements: []
                };
                
                // Êü•ÊâæÊâÄÊúâÊåâÈíÆ
                const buttons = document.querySelectorAll('button, a, .button, [role="button"]');
                for (const button of buttons) {
                    const text = button.textContent?.toLowerCase() || '';
                    info.buttons.push({
                        text: button.textContent?.trim(),
                        className: button.className,
                        id: button.id,
                        href: button.href || null,
                        isEmbedRelated: text.includes('embed') || text.includes('share') || text.includes('code')
                    });
                }
                
                // Êü•ÊâæembedÁõ∏ÂÖ≥ÂÖÉÁ¥†
                const embedSelectors = ['[class*="embed"]', '[id*="embed"]', '[data-embed]'];
                for (const selector of embedSelectors) {
                    const elements = document.querySelectorAll(selector);
                    if (elements.length > 0) {
                        info.embedElements.push({
                            selector: selector,
                            count: elements.length,
                            sample: elements[0]?.outerHTML?.substring(0, 200)
                        });
                    }
                }
                
                // Êü•ÊâæÂàÜ‰∫´Áõ∏ÂÖ≥ÂÖÉÁ¥†
                const shareSelectors = ['[class*="share"]', '[id*="share"]'];
                for (const selector of shareSelectors) {
                    const elements = document.querySelectorAll(selector);
                    if (elements.length > 0) {
                        info.shareElements.push({
                            selector: selector,
                            count: elements.length,
                            sample: elements[0]?.outerHTML?.substring(0, 200)
                        });
                    }
                }
                
                // Êü•Êâæ‰ª£Á†ÅÁõ∏ÂÖ≥ÂÖÉÁ¥†
                const codeElements = document.querySelectorAll('textarea, input[type="text"], code, pre');
                for (const element of codeElements) {
                    const value = element.value || element.textContent || '';
                    if (value.includes('<iframe') || value.includes('embed')) {
                        info.codeElements.push({
                            type: element.tagName,
                            value: value.substring(0, 200)
                        });
                    }
                }
                
                return info;
            });
            
            console.log(`Ê∏∏ÊàèÈ°µÈù¢Ê†áÈ¢ò: ${embedInfo.title}`);
            console.log(`ÊâæÂà∞ÊåâÈíÆ: ${embedInfo.buttons.length} ‰∏™`);
            
            // ÊòæÁ§∫embedÁõ∏ÂÖ≥ÊåâÈíÆ
            const embedButtons = embedInfo.buttons.filter(b => b.isEmbedRelated);
            if (embedButtons.length > 0) {
                console.log('\n‚úÖ ÊâæÂà∞embedÁõ∏ÂÖ≥ÊåâÈíÆ:');
                embedButtons.forEach(button => {
                    console.log(`  ‚Ä¢ ${button.text}`);
                    console.log(`    Class: ${button.className}`);
                    console.log(`    ID: ${button.id}`);
                    if (button.href) console.log(`    Href: ${button.href}`);
                });
            } else {
                console.log('\n‚ùå Êú™ÊâæÂà∞embedÁõ∏ÂÖ≥ÊåâÈíÆ');
                console.log('\nÊâÄÊúâÊåâÈíÆ:');
                embedInfo.buttons.slice(0, 10).forEach(button => {
                    console.log(`  ‚Ä¢ ${button.text} (${button.className})`);
                });
            }
            
            if (embedInfo.embedElements.length > 0) {
                console.log('\n‚úÖ ÊâæÂà∞embedÂÖÉÁ¥†:');
                embedInfo.embedElements.forEach(element => {
                    console.log(`  ${element.selector}: ${element.count} ‰∏™`);
                });
            }
            
            if (embedInfo.shareElements.length > 0) {
                console.log('\n‚úÖ ÊâæÂà∞ÂàÜ‰∫´ÂÖÉÁ¥†:');
                embedInfo.shareElements.forEach(element => {
                    console.log(`  ${element.selector}: ${element.count} ‰∏™`);
                });
            }
            
            if (embedInfo.codeElements.length > 0) {
                console.log('\n‚úÖ ÊâæÂà∞‰ª£Á†ÅÂÖÉÁ¥†:');
                embedInfo.codeElements.forEach(element => {
                    console.log(`  ${element.type}: ${element.value}`);
                });
            }
        }
        
        // 3. ÊµãËØïÂ∑≤Áü•ÁöÑembed URL
        console.log('\n3Ô∏è‚É£ ÊµãËØïÂ∑≤Áü•ÁöÑembed URL...');
        const testEmbedUrl = 'https://www.crazygames.com/embed/2048';
        console.log(`ÊµãËØï: ${testEmbedUrl}`);
        
        try {
            const response = await page.goto(testEmbedUrl, { 
                waitUntil: 'networkidle2',
                timeout: 20000 
            });
            
            console.log(`Áä∂ÊÄÅÁ†Å: ${response.status()}`);
            
            if (response.status() === 200) {
                await new Promise(resolve => setTimeout(resolve, 3000));
                
                const embedPageInfo = await page.evaluate(() => {
                    return {
                        title: document.title,
                        hasCanvas: !!document.querySelector('canvas'),
                        hasGameContainer: !!document.querySelector('#game, .game-container, .unity-container'),
                        hasIframe: !!document.querySelector('iframe'),
                        bodyText: document.body.textContent?.substring(0, 500)
                    };
                });
                
                console.log(`EmbedÈ°µÈù¢Ê†áÈ¢ò: ${embedPageInfo.title}`);
                console.log(`ÊúâCanvas: ${embedPageInfo.hasCanvas}`);
                console.log(`ÊúâÊ∏∏ÊàèÂÆπÂô®: ${embedPageInfo.hasGameContainer}`);
                console.log(`Êúâiframe: ${embedPageInfo.hasIframe}`);
                console.log(`È°µÈù¢ÂÜÖÂÆπÈ¢ÑËßà: ${embedPageInfo.bodyText}`);
            }
        } catch (error) {
            console.log(`Embed URLÊµãËØïÂ§±Ë¥•: ${error.message}`);
        }
        
        console.log('\n‚úÖ Ë∞ÉËØïÂÆåÊàêÔºÅ');
        
    } catch (error) {
        console.error('Ë∞ÉËØïÂ§±Ë¥•:', error);
    } finally {
        // ‰øùÊåÅÊµèËßàÂô®ÊâìÂºÄ‰∏ÄÊÆµÊó∂Èó¥‰æø‰∫éËßÇÂØü
        console.log('\nÊµèËßàÂô®Â∞ÜÂú®10ÁßíÂêéÂÖ≥Èó≠...');
        await new Promise(resolve => setTimeout(resolve, 10000));
        await browser.close();
    }
}

// ËøêË°åË∞ÉËØï
debugCrazyGamesStructure(); 